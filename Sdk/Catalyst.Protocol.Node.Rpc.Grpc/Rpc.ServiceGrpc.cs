// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rpc.Service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Catalyst.Protocol.Rpc.Node {
  public static partial class RpcServer
  {
    static readonly string __ServiceName = "Catalyst.Protocol.Rpc.Node.RpcServer";

    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.PingRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.PongResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_PongResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.PongResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.VersionRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.VersionResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.VersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetInfoRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetInfoResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateWalletResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ListWalletRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_ListWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ListWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ListWalletResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_ListWalletResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ListWalletResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateAddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetAddressRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetAddressResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetAddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetAddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ListAddressRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_ListAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ListAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ListAddressResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_ListAddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ListAddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_ValidateAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_ValidateAddressResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetBalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetBalanceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateRawTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_CreateRawTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SignRawTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SignRawTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_DecodeRawTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_DecodeRawTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_BroadcastRawTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_BroadcastRawTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendToRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SendToRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendToRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendToResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SendToResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendToResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendToFromRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SendToFromRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendToFromRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendToFromResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SendToFromResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendToFromResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendManyRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SendManyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendManyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendManyResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SendManyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendManyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SendFromManyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SendFromManyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.AddNodeRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_AddNodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.AddNodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.AddNodeResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_AddNodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.AddNodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetConnectionCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetConnectionCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetDeltaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetDeltaResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_GetMempoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_GetMempoolResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SignMessageRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_SignMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SignMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.SignMessageResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_SignMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.SignMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_VerifyMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_VerifyMessageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest> __Marshaller_Catalyst_Protocol_Rpc_Node_ServiceStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse> __Marshaller_Catalyst_Protocol_Rpc_Node_ServiceStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.PingRequest, global::Catalyst.Protocol.Rpc.Node.PongResponse> __Method_Ping = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.PingRequest, global::Catalyst.Protocol.Rpc.Node.PongResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_Catalyst_Protocol_Rpc_Node_PingRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_PongResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.VersionRequest, global::Catalyst.Protocol.Rpc.Node.VersionResponse> __Method_Version = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.VersionRequest, global::Catalyst.Protocol.Rpc.Node.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Version",
        __Marshaller_Catalyst_Protocol_Rpc_Node_VersionRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_VersionResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetInfoRequest, global::Catalyst.Protocol.Rpc.Node.GetInfoResponse> __Method_GetInfo = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetInfoRequest, global::Catalyst.Protocol.Rpc.Node.GetInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfo",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetInfoRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetInfoResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest, global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse> __Method_CreateWallet = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest, global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWallet",
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateWalletRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateWalletResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.ListWalletRequest, global::Catalyst.Protocol.Rpc.Node.ListWalletResponse> __Method_ListWallet = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.ListWalletRequest, global::Catalyst.Protocol.Rpc.Node.ListWalletResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWallet",
        __Marshaller_Catalyst_Protocol_Rpc_Node_ListWalletRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_ListWalletResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest, global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse> __Method_CreateAddress = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest, global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAddress",
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateAddressRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateAddressResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetAddressRequest, global::Catalyst.Protocol.Rpc.Node.GetAddressResponse> __Method_GetAddress = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetAddressRequest, global::Catalyst.Protocol.Rpc.Node.GetAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAddress",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetAddressRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetAddressResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.ListAddressRequest, global::Catalyst.Protocol.Rpc.Node.ListAddressResponse> __Method_ListAddress = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.ListAddressRequest, global::Catalyst.Protocol.Rpc.Node.ListAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAddress",
        __Marshaller_Catalyst_Protocol_Rpc_Node_ListAddressRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_ListAddressResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest, global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse> __Method_ValidateAddress = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest, global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateAddress",
        __Marshaller_Catalyst_Protocol_Rpc_Node_ValidateAddressRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_ValidateAddressResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest, global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse> __Method_GetBalance = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest, global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetBalanceRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetBalanceResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse> __Method_CreateRawTransaction = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRawTransaction",
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateRawTransactionRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_CreateRawTransactionResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse> __Method_SignRawTransaction = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignRawTransaction",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SignRawTransactionRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SignRawTransactionResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse> __Method_DecodeRawTransaction = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecodeRawTransaction",
        __Marshaller_Catalyst_Protocol_Rpc_Node_DecodeRawTransactionRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_DecodeRawTransactionResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse> __Method_BroadcastRawTransaction = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest, global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastRawTransaction",
        __Marshaller_Catalyst_Protocol_Rpc_Node_BroadcastRawTransactionRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_BroadcastRawTransactionResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendToRequest, global::Catalyst.Protocol.Rpc.Node.SendToResponse> __Method_SendTo = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendToRequest, global::Catalyst.Protocol.Rpc.Node.SendToResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendTo",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendToRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendToResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendToFromRequest, global::Catalyst.Protocol.Rpc.Node.SendToFromResponse> __Method_SendToFrom = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendToFromRequest, global::Catalyst.Protocol.Rpc.Node.SendToFromResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendToFrom",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendToFromRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendToFromResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendManyRequest, global::Catalyst.Protocol.Rpc.Node.SendManyResponse> __Method_SendMany = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendManyRequest, global::Catalyst.Protocol.Rpc.Node.SendManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMany",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendManyRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendManyResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest, global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse> __Method_SendFromMany = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest, global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendFromMany",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendFromManyRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SendFromManyResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.AddNodeRequest, global::Catalyst.Protocol.Rpc.Node.AddNodeResponse> __Method_AddNode = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.AddNodeRequest, global::Catalyst.Protocol.Rpc.Node.AddNodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddNode",
        __Marshaller_Catalyst_Protocol_Rpc_Node_AddNodeRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_AddNodeResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest, global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse> __Method_GetPeerList = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest, global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPeerList",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerListRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerListResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest, global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse> __Method_GetPeerInfo = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest, global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPeerInfo",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerInfoRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetPeerInfoResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest, global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse> __Method_GetConnectionCount = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest, global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectionCount",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetConnectionCountRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetConnectionCountResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest, global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse> __Method_GetDelta = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest, global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDelta",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetDeltaRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetDeltaResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest, global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse> __Method_GetMempool = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest, global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMempool",
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetMempoolRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_GetMempoolResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.SignMessageRequest, global::Catalyst.Protocol.Rpc.Node.SignMessageResponse> __Method_SignMessage = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.SignMessageRequest, global::Catalyst.Protocol.Rpc.Node.SignMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignMessage",
        __Marshaller_Catalyst_Protocol_Rpc_Node_SignMessageRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_SignMessageResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest, global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse> __Method_VerifyMessage = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest, global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyMessage",
        __Marshaller_Catalyst_Protocol_Rpc_Node_VerifyMessageRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_VerifyMessageResponse);

    static readonly grpc::Method<global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest, global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse> __Method_ServiceStatus = new grpc::Method<global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest, global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServiceStatus",
        __Marshaller_Catalyst_Protocol_Rpc_Node_ServiceStatusRequest,
        __Marshaller_Catalyst_Protocol_Rpc_Node_ServiceStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Catalyst.Protocol.Rpc.Node.RpcServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RpcServer</summary>
    public abstract partial class RpcServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.PongResponse> Ping(global::Catalyst.Protocol.Rpc.Node.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.VersionResponse> Version(global::Catalyst.Protocol.Rpc.Node.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetInfoResponse> GetInfo(global::Catalyst.Protocol.Rpc.Node.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse> CreateWallet(global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.ListWalletResponse> ListWallet(global::Catalyst.Protocol.Rpc.Node.ListWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse> CreateAddress(global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetAddressResponse> GetAddress(global::Catalyst.Protocol.Rpc.Node.GetAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.ListAddressResponse> ListAddress(global::Catalyst.Protocol.Rpc.Node.ListAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse> ValidateAddress(global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse> GetBalance(global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse> CreateRawTransaction(global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse> SignRawTransaction(global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse> DecodeRawTransaction(global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse> BroadcastRawTransaction(global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SendToResponse> SendTo(global::Catalyst.Protocol.Rpc.Node.SendToRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SendToFromResponse> SendToFrom(global::Catalyst.Protocol.Rpc.Node.SendToFromRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SendManyResponse> SendMany(global::Catalyst.Protocol.Rpc.Node.SendManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse> SendFromMany(global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.AddNodeResponse> AddNode(global::Catalyst.Protocol.Rpc.Node.AddNodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse> GetPeerList(global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse> GetPeerInfo(global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse> GetConnectionCount(global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse> GetDelta(global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse> GetMempool(global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.SignMessageResponse> SignMessage(global::Catalyst.Protocol.Rpc.Node.SignMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse> VerifyMessage(global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse> ServiceStatus(global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RpcServer</summary>
    public partial class RpcServerClient : grpc::ClientBase<RpcServerClient>
    {
      /// <summary>Creates a new client for RpcServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RpcServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RpcServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RpcServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RpcServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RpcServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Catalyst.Protocol.Rpc.Node.PongResponse Ping(global::Catalyst.Protocol.Rpc.Node.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.PongResponse Ping(global::Catalyst.Protocol.Rpc.Node.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.PongResponse> PingAsync(global::Catalyst.Protocol.Rpc.Node.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.PongResponse> PingAsync(global::Catalyst.Protocol.Rpc.Node.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.VersionResponse Version(global::Catalyst.Protocol.Rpc.Node.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Version(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.VersionResponse Version(global::Catalyst.Protocol.Rpc.Node.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Version, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.VersionResponse> VersionAsync(global::Catalyst.Protocol.Rpc.Node.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.VersionResponse> VersionAsync(global::Catalyst.Protocol.Rpc.Node.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Version, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetInfoResponse GetInfo(global::Catalyst.Protocol.Rpc.Node.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetInfoResponse GetInfo(global::Catalyst.Protocol.Rpc.Node.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetInfoResponse> GetInfoAsync(global::Catalyst.Protocol.Rpc.Node.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetInfoResponse> GetInfoAsync(global::Catalyst.Protocol.Rpc.Node.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfo, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse CreateWallet(global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse CreateWallet(global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse> CreateWalletAsync(global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateWalletResponse> CreateWalletAsync(global::Catalyst.Protocol.Rpc.Node.CreateWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWallet, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ListWalletResponse ListWallet(global::Catalyst.Protocol.Rpc.Node.ListWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ListWalletResponse ListWallet(global::Catalyst.Protocol.Rpc.Node.ListWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ListWalletResponse> ListWalletAsync(global::Catalyst.Protocol.Rpc.Node.ListWalletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ListWalletResponse> ListWalletAsync(global::Catalyst.Protocol.Rpc.Node.ListWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWallet, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse CreateAddress(global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse CreateAddress(global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse> CreateAddressAsync(global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateAddressResponse> CreateAddressAsync(global::Catalyst.Protocol.Rpc.Node.CreateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAddress, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetAddressResponse GetAddress(global::Catalyst.Protocol.Rpc.Node.GetAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetAddressResponse GetAddress(global::Catalyst.Protocol.Rpc.Node.GetAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetAddressResponse> GetAddressAsync(global::Catalyst.Protocol.Rpc.Node.GetAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetAddressResponse> GetAddressAsync(global::Catalyst.Protocol.Rpc.Node.GetAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAddress, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ListAddressResponse ListAddress(global::Catalyst.Protocol.Rpc.Node.ListAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ListAddressResponse ListAddress(global::Catalyst.Protocol.Rpc.Node.ListAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ListAddressResponse> ListAddressAsync(global::Catalyst.Protocol.Rpc.Node.ListAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ListAddressResponse> ListAddressAsync(global::Catalyst.Protocol.Rpc.Node.ListAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAddress, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse ValidateAddress(global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse ValidateAddress(global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse> ValidateAddressAsync(global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ValidateAddressResponse> ValidateAddressAsync(global::Catalyst.Protocol.Rpc.Node.ValidateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateAddress, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse GetBalance(global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse GetBalance(global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse> GetBalanceAsync(global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetBalanceResponse> GetBalanceAsync(global::Catalyst.Protocol.Rpc.Node.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse CreateRawTransaction(global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRawTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse CreateRawTransaction(global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRawTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse> CreateRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRawTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse> CreateRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRawTransaction, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse SignRawTransaction(global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignRawTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse SignRawTransaction(global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignRawTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse> SignRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignRawTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse> SignRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignRawTransaction, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse DecodeRawTransaction(global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecodeRawTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse DecodeRawTransaction(global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecodeRawTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse> DecodeRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DecodeRawTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse> DecodeRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecodeRawTransaction, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse BroadcastRawTransaction(global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastRawTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse BroadcastRawTransaction(global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastRawTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse> BroadcastRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastRawTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse> BroadcastRawTransactionAsync(global::Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastRawTransaction, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendToResponse SendTo(global::Catalyst.Protocol.Rpc.Node.SendToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendTo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendToResponse SendTo(global::Catalyst.Protocol.Rpc.Node.SendToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendTo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendToResponse> SendToAsync(global::Catalyst.Protocol.Rpc.Node.SendToRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendToAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendToResponse> SendToAsync(global::Catalyst.Protocol.Rpc.Node.SendToRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendTo, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendToFromResponse SendToFrom(global::Catalyst.Protocol.Rpc.Node.SendToFromRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendToFrom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendToFromResponse SendToFrom(global::Catalyst.Protocol.Rpc.Node.SendToFromRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendToFrom, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendToFromResponse> SendToFromAsync(global::Catalyst.Protocol.Rpc.Node.SendToFromRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendToFromAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendToFromResponse> SendToFromAsync(global::Catalyst.Protocol.Rpc.Node.SendToFromRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendToFrom, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendManyResponse SendMany(global::Catalyst.Protocol.Rpc.Node.SendManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendManyResponse SendMany(global::Catalyst.Protocol.Rpc.Node.SendManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendManyResponse> SendManyAsync(global::Catalyst.Protocol.Rpc.Node.SendManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendManyResponse> SendManyAsync(global::Catalyst.Protocol.Rpc.Node.SendManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMany, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse SendFromMany(global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFromMany(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse SendFromMany(global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendFromMany, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse> SendFromManyAsync(global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendFromManyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SendFromManyResponse> SendFromManyAsync(global::Catalyst.Protocol.Rpc.Node.SendFromManyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendFromMany, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.AddNodeResponse AddNode(global::Catalyst.Protocol.Rpc.Node.AddNodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.AddNodeResponse AddNode(global::Catalyst.Protocol.Rpc.Node.AddNodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddNode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.AddNodeResponse> AddNodeAsync(global::Catalyst.Protocol.Rpc.Node.AddNodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddNodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.AddNodeResponse> AddNodeAsync(global::Catalyst.Protocol.Rpc.Node.AddNodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddNode, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse GetPeerList(global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeerList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse GetPeerList(global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPeerList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse> GetPeerListAsync(global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeerListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetPeerListResponse> GetPeerListAsync(global::Catalyst.Protocol.Rpc.Node.GetPeerListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPeerList, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse GetPeerInfo(global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeerInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse GetPeerInfo(global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPeerInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse> GetPeerInfoAsync(global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeerInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse> GetPeerInfoAsync(global::Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPeerInfo, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse GetConnectionCount(global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse GetConnectionCount(global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectionCount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse> GetConnectionCountAsync(global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse> GetConnectionCountAsync(global::Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectionCount, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse GetDelta(global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDelta(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse GetDelta(global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDelta, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse> GetDeltaAsync(global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeltaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetDeltaResponse> GetDeltaAsync(global::Catalyst.Protocol.Rpc.Node.GetDeltaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDelta, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse GetMempool(global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMempool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse GetMempool(global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMempool, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse> GetMempoolAsync(global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMempoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.GetMempoolResponse> GetMempoolAsync(global::Catalyst.Protocol.Rpc.Node.GetMempoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMempool, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SignMessageResponse SignMessage(global::Catalyst.Protocol.Rpc.Node.SignMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.SignMessageResponse SignMessage(global::Catalyst.Protocol.Rpc.Node.SignMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SignMessageResponse> SignMessageAsync(global::Catalyst.Protocol.Rpc.Node.SignMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.SignMessageResponse> SignMessageAsync(global::Catalyst.Protocol.Rpc.Node.SignMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignMessage, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse VerifyMessage(global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse VerifyMessage(global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse> VerifyMessageAsync(global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.VerifyMessageResponse> VerifyMessageAsync(global::Catalyst.Protocol.Rpc.Node.VerifyMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyMessage, null, options, request);
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse ServiceStatus(global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServiceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse ServiceStatus(global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServiceStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse> ServiceStatusAsync(global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServiceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Catalyst.Protocol.Rpc.Node.ServiceStatusResponse> ServiceStatusAsync(global::Catalyst.Protocol.Rpc.Node.ServiceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServiceStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RpcServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RpcServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RpcServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_Version, serviceImpl.Version)
          .AddMethod(__Method_GetInfo, serviceImpl.GetInfo)
          .AddMethod(__Method_CreateWallet, serviceImpl.CreateWallet)
          .AddMethod(__Method_ListWallet, serviceImpl.ListWallet)
          .AddMethod(__Method_CreateAddress, serviceImpl.CreateAddress)
          .AddMethod(__Method_GetAddress, serviceImpl.GetAddress)
          .AddMethod(__Method_ListAddress, serviceImpl.ListAddress)
          .AddMethod(__Method_ValidateAddress, serviceImpl.ValidateAddress)
          .AddMethod(__Method_GetBalance, serviceImpl.GetBalance)
          .AddMethod(__Method_CreateRawTransaction, serviceImpl.CreateRawTransaction)
          .AddMethod(__Method_SignRawTransaction, serviceImpl.SignRawTransaction)
          .AddMethod(__Method_DecodeRawTransaction, serviceImpl.DecodeRawTransaction)
          .AddMethod(__Method_BroadcastRawTransaction, serviceImpl.BroadcastRawTransaction)
          .AddMethod(__Method_SendTo, serviceImpl.SendTo)
          .AddMethod(__Method_SendToFrom, serviceImpl.SendToFrom)
          .AddMethod(__Method_SendMany, serviceImpl.SendMany)
          .AddMethod(__Method_SendFromMany, serviceImpl.SendFromMany)
          .AddMethod(__Method_AddNode, serviceImpl.AddNode)
          .AddMethod(__Method_GetPeerList, serviceImpl.GetPeerList)
          .AddMethod(__Method_GetPeerInfo, serviceImpl.GetPeerInfo)
          .AddMethod(__Method_GetConnectionCount, serviceImpl.GetConnectionCount)
          .AddMethod(__Method_GetDelta, serviceImpl.GetDelta)
          .AddMethod(__Method_GetMempool, serviceImpl.GetMempool)
          .AddMethod(__Method_SignMessage, serviceImpl.SignMessage)
          .AddMethod(__Method_VerifyMessage, serviceImpl.VerifyMessage)
          .AddMethod(__Method_ServiceStatus, serviceImpl.ServiceStatus).Build();
    }

  }
}
#endregion
