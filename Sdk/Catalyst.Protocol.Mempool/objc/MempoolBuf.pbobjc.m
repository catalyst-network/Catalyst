// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MempoolBuf.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "MempoolBuf.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MempoolBufRoot

@implementation MempoolBufRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MempoolBufRoot_FileDescriptor

static GPBFileDescriptor *MempoolBufRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Catalyst.Protocols.Mempool"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Tx

@implementation Tx

@dynamic addressSource;
@dynamic addressDest;
@dynamic signature;
@dynamic amount;
@dynamic fee;
@dynamic outputAmount;
@dynamic inputAction;
@dynamic unlockScript;
@dynamic unlockingProgram;
@dynamic hasUpdated, updated;

typedef struct Tx__storage_ {
  uint32_t _has_storage_[1];
  uint32_t amount;
  uint32_t fee;
  uint32_t outputAmount;
  NSString *addressSource;
  NSString *addressDest;
  NSString *signature;
  NSString *inputAction;
  NSString *unlockScript;
  NSString *unlockingProgram;
  Tx_Timestamp *updated;
} Tx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "addressSource",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_AddressSource,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tx__storage_, addressSource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "addressDest",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_AddressDest,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tx__storage_, addressDest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_Signature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Tx__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Tx__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "fee",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_Fee,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Tx__storage_, fee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "outputAmount",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_OutputAmount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Tx__storage_, outputAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "inputAction",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_InputAction,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Tx__storage_, inputAction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unlockScript",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_UnlockScript,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Tx__storage_, unlockScript),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unlockingProgram",
        .dataTypeSpecific.className = NULL,
        .number = Tx_FieldNumber_UnlockingProgram,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Tx__storage_, unlockingProgram),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updated",
        .dataTypeSpecific.className = GPBStringifySymbol(Tx_Timestamp),
        .number = Tx_FieldNumber_Updated,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Tx__storage_, updated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tx class]
                                     rootClass:[MempoolBufRoot class]
                                          file:MempoolBufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tx__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\r\000\002\013\000\006\014\000\007\013\000\010\014\000\t\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tx_Timestamp

@implementation Tx_Timestamp

@dynamic seconds;
@dynamic nanos;

typedef struct Tx_Timestamp__storage_ {
  uint32_t _has_storage_[1];
  int32_t nanos;
  int64_t seconds;
} Tx_Timestamp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seconds",
        .dataTypeSpecific.className = NULL,
        .number = Tx_Timestamp_FieldNumber_Seconds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tx_Timestamp__storage_, seconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nanos",
        .dataTypeSpecific.className = NULL,
        .number = Tx_Timestamp_FieldNumber_Nanos,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tx_Timestamp__storage_, nanos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tx_Timestamp class]
                                     rootClass:[MempoolBufRoot class]
                                          file:MempoolBufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tx_Timestamp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Tx)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Key

@implementation Key

@dynamic hashedSignature;

typedef struct Key__storage_ {
  uint32_t _has_storage_[1];
  NSString *hashedSignature;
} Key__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hashedSignature",
        .dataTypeSpecific.className = NULL,
        .number = Key_FieldNumber_HashedSignature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Key__storage_, hashedSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Key class]
                                     rootClass:[MempoolBufRoot class]
                                          file:MempoolBufRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Key__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
