// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Delta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Catalyst.Protocol.zDelta {

  /// <summary>Holder for reflection information generated from Delta.proto</summary>
  public static partial class DeltaReflection {

    #region Descriptor
    /// <summary>File descriptor for Delta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeltaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtEZWx0YS5wcm90bxIXQ2F0YWx5c3QuUHJvdG9jb2wuRGVsdGEaEVRyYW5z",
            "YWN0aW9uLnByb3RvGgxDb21tb24ucHJvdG8ivgIKBURlbHRhEg8KB1ZlcnNp",
            "b24YASABKA0SHAoUUHJldmlvdXNEZWx0YURmc0hhc2gYAiABKAwSEgoKTWVy",
            "a2xlUm9vdBgDIAEoDBISCgpNZXJrbGVQb2RhGAQgASgMEhEKCVRpbWVTdGFt",
            "cBgFIAEoDRJECglTVEVudHJpZXMYBiADKAsyMS5DYXRhbHlzdC5Qcm90b2Nv",
            "bC5UcmFuc2FjdGlvbi5TVFRyYW5zYWN0aW9uRW50cnkSRAoJQ0ZFbnRyaWVz",
            "GAcgAygLMjEuQ2F0YWx5c3QuUHJvdG9jb2wuVHJhbnNhY3Rpb24uQ0ZUcmFu",
            "c2FjdGlvbkVudHJ5Ej8KCUNCRW50cmllcxgIIAMoCzIsLkNhdGFseXN0LlBy",
            "b3RvY29sLlRyYW5zYWN0aW9uLkNvaW5iYXNlRW50cnkiewoXQ2FuZGlkYXRl",
            "RGVsdGFCcm9hZGNhc3QSDAoESGFzaBgBIAEoDBI0CgpQcm9kdWNlcklkGAIg",
            "ASgLMiAuQ2F0YWx5c3QuUHJvdG9jb2wuQ29tbW9uLlBlZXJJZBIcChRQcmV2",
            "aW91c0RlbHRhRGZzSGFzaBgDIAEoDCKRAQoXRmF2b3VyaXRlRGVsdGFCcm9h",
            "ZGNhc3QSQwoJQ2FuZGlkYXRlGAEgASgLMjAuQ2F0YWx5c3QuUHJvdG9jb2wu",
            "RGVsdGEuQ2FuZGlkYXRlRGVsdGFCcm9hZGNhc3QSMQoHVm90ZXJJZBgCIAEo",
            "CzIgLkNhdGFseXN0LlByb3RvY29sLkNvbW1vbi5QZWVySWQiSwoVRGVsdGFE",
            "ZnNIYXNoQnJvYWRjYXN0EhQKDERlbHRhRGZzSGFzaBgBIAEoDBIcChRQcmV2",
            "aW91c0RlbHRhRGZzSGFzaBgCIAEoDEICUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Catalyst.Protocol.Transaction.TransactionReflection.Descriptor, global::Catalyst.Protocol.Common.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Catalyst.Protocol.Delta.Delta), global::Catalyst.Protocol.Delta.Delta.Parser, new[]{ "Version", "PreviousDeltaDfsHash", "MerkleRoot", "MerklePoda", "TimeStamp", "STEntries", "CFEntries", "CBEntries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast), global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast.Parser, new[]{ "Hash", "ProducerId", "PreviousDeltaDfsHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Catalyst.Protocol.Delta.FavouriteDeltaBroadcast), global::Catalyst.Protocol.Delta.FavouriteDeltaBroadcast.Parser, new[]{ "Candidate", "VoterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Catalyst.Protocol.Delta.DeltaDfsHashBroadcast), global::Catalyst.Protocol.Delta.DeltaDfsHashBroadcast.Parser, new[]{ "DeltaDfsHash", "PreviousDeltaDfsHash" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// Delta
  ///
  /// version:
  /// PreviousDeltaDfsHash: address for the content of the previous delta on the DFS
  /// MerkleRoot:
  /// MerklePoda: proof of delegated authority for active wokers
  /// TimeStamp:
  /// STEntries:
  /// CFEntries:
  /// CBEntries: one per active worker
  /// </summary>
  public sealed partial class Delta : pb::IMessage<Delta> {
    private static readonly pb::MessageParser<Delta> _parser = new pb::MessageParser<Delta>(() => new Delta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Catalyst.Protocol.Delta.DeltaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta(Delta other) : this() {
      version_ = other.version_;
      previousDeltaDfsHash_ = other.previousDeltaDfsHash_;
      merkleRoot_ = other.merkleRoot_;
      merklePoda_ = other.merklePoda_;
      timeStamp_ = other.timeStamp_;
      sTEntries_ = other.sTEntries_.Clone();
      cFEntries_ = other.cFEntries_.Clone();
      cBEntries_ = other.cBEntries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delta Clone() {
      return new Delta(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "PreviousDeltaDfsHash" field.</summary>
    public const int PreviousDeltaDfsHashFieldNumber = 2;
    private pb::ByteString previousDeltaDfsHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousDeltaDfsHash {
      get { return previousDeltaDfsHash_; }
      set {
        previousDeltaDfsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MerkleRoot" field.</summary>
    public const int MerkleRootFieldNumber = 3;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MerklePoda" field.</summary>
    public const int MerklePodaFieldNumber = 4;
    private pb::ByteString merklePoda_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerklePoda {
      get { return merklePoda_; }
      set {
        merklePoda_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private uint timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "STEntries" field.</summary>
    public const int STEntriesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Catalyst.Protocol.Transaction.STTransactionEntry> _repeated_sTEntries_codec
        = pb::FieldCodec.ForMessage(50, global::Catalyst.Protocol.Transaction.STTransactionEntry.Parser);
    private readonly pbc::RepeatedField<global::Catalyst.Protocol.Transaction.STTransactionEntry> sTEntries_ = new pbc::RepeatedField<global::Catalyst.Protocol.Transaction.STTransactionEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Catalyst.Protocol.Transaction.STTransactionEntry> STEntries {
      get { return sTEntries_; }
    }

    /// <summary>Field number for the "CFEntries" field.</summary>
    public const int CFEntriesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Catalyst.Protocol.Transaction.CFTransactionEntry> _repeated_cFEntries_codec
        = pb::FieldCodec.ForMessage(58, global::Catalyst.Protocol.Transaction.CFTransactionEntry.Parser);
    private readonly pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CFTransactionEntry> cFEntries_ = new pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CFTransactionEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CFTransactionEntry> CFEntries {
      get { return cFEntries_; }
    }

    /// <summary>Field number for the "CBEntries" field.</summary>
    public const int CBEntriesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Catalyst.Protocol.Transaction.CoinbaseEntry> _repeated_cBEntries_codec
        = pb::FieldCodec.ForMessage(66, global::Catalyst.Protocol.Transaction.CoinbaseEntry.Parser);
    private readonly pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CoinbaseEntry> cBEntries_ = new pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CoinbaseEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Catalyst.Protocol.Transaction.CoinbaseEntry> CBEntries {
      get { return cBEntries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PreviousDeltaDfsHash != other.PreviousDeltaDfsHash) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      if (MerklePoda != other.MerklePoda) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if(!sTEntries_.Equals(other.sTEntries_)) return false;
      if(!cFEntries_.Equals(other.cFEntries_)) return false;
      if(!cBEntries_.Equals(other.cBEntries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (PreviousDeltaDfsHash.Length != 0) hash ^= PreviousDeltaDfsHash.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      if (MerklePoda.Length != 0) hash ^= MerklePoda.GetHashCode();
      if (TimeStamp != 0) hash ^= TimeStamp.GetHashCode();
      hash ^= sTEntries_.GetHashCode();
      hash ^= cFEntries_.GetHashCode();
      hash ^= cBEntries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PreviousDeltaDfsHash);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MerkleRoot);
      }
      if (MerklePoda.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(MerklePoda);
      }
      if (TimeStamp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeStamp);
      }
      sTEntries_.WriteTo(output, _repeated_sTEntries_codec);
      cFEntries_.WriteTo(output, _repeated_cFEntries_codec);
      cBEntries_.WriteTo(output, _repeated_cBEntries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousDeltaDfsHash);
      }
      if (MerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      if (MerklePoda.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerklePoda);
      }
      if (TimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeStamp);
      }
      size += sTEntries_.CalculateSize(_repeated_sTEntries_codec);
      size += cFEntries_.CalculateSize(_repeated_cFEntries_codec);
      size += cBEntries_.CalculateSize(_repeated_cBEntries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delta other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.PreviousDeltaDfsHash.Length != 0) {
        PreviousDeltaDfsHash = other.PreviousDeltaDfsHash;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
      if (other.MerklePoda.Length != 0) {
        MerklePoda = other.MerklePoda;
      }
      if (other.TimeStamp != 0) {
        TimeStamp = other.TimeStamp;
      }
      sTEntries_.Add(other.sTEntries_);
      cFEntries_.Add(other.cFEntries_);
      cBEntries_.Add(other.cBEntries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            PreviousDeltaDfsHash = input.ReadBytes();
            break;
          }
          case 26: {
            MerkleRoot = input.ReadBytes();
            break;
          }
          case 34: {
            MerklePoda = input.ReadBytes();
            break;
          }
          case 40: {
            TimeStamp = input.ReadUInt32();
            break;
          }
          case 50: {
            sTEntries_.AddEntriesFrom(input, _repeated_sTEntries_codec);
            break;
          }
          case 58: {
            cFEntries_.AddEntriesFrom(input, _repeated_cFEntries_codec);
            break;
          }
          case 66: {
            cBEntries_.AddEntriesFrom(input, _repeated_cBEntries_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// CandidateDeltaBroadcast
  ///
  /// DeltaHash: The hash computed for the current delta produced by ProducerId.
  ///	This is meant to be used when voting for most popular hashes.
  /// PreviousDeltaDfsHash: The DFS address for the content of the delta preceding this candidate.
  /// ProducerId: Identifier of the producer of the candidate.
  /// </summary>
  public sealed partial class CandidateDeltaBroadcast : pb::IMessage<CandidateDeltaBroadcast> {
    private static readonly pb::MessageParser<CandidateDeltaBroadcast> _parser = new pb::MessageParser<CandidateDeltaBroadcast>(() => new CandidateDeltaBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateDeltaBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Catalyst.Protocol.Delta.DeltaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateDeltaBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateDeltaBroadcast(CandidateDeltaBroadcast other) : this() {
      hash_ = other.hash_;
      producerId_ = other.producerId_ != null ? other.producerId_.Clone() : null;
      previousDeltaDfsHash_ = other.previousDeltaDfsHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateDeltaBroadcast Clone() {
      return new CandidateDeltaBroadcast(this);
    }

    /// <summary>Field number for the "Hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProducerId" field.</summary>
    public const int ProducerIdFieldNumber = 2;
    private global::Catalyst.Protocol.Common.PeerId producerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Catalyst.Protocol.Common.PeerId ProducerId {
      get { return producerId_; }
      set {
        producerId_ = value;
      }
    }

    /// <summary>Field number for the "PreviousDeltaDfsHash" field.</summary>
    public const int PreviousDeltaDfsHashFieldNumber = 3;
    private pb::ByteString previousDeltaDfsHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousDeltaDfsHash {
      get { return previousDeltaDfsHash_; }
      set {
        previousDeltaDfsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateDeltaBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateDeltaBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (!object.Equals(ProducerId, other.ProducerId)) return false;
      if (PreviousDeltaDfsHash != other.PreviousDeltaDfsHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (producerId_ != null) hash ^= ProducerId.GetHashCode();
      if (PreviousDeltaDfsHash.Length != 0) hash ^= PreviousDeltaDfsHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (producerId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProducerId);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PreviousDeltaDfsHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (producerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProducerId);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousDeltaDfsHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateDeltaBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.producerId_ != null) {
        if (producerId_ == null) {
          ProducerId = new global::Catalyst.Protocol.Common.PeerId();
        }
        ProducerId.MergeFrom(other.ProducerId);
      }
      if (other.PreviousDeltaDfsHash.Length != 0) {
        PreviousDeltaDfsHash = other.PreviousDeltaDfsHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            if (producerId_ == null) {
              ProducerId = new global::Catalyst.Protocol.Common.PeerId();
            }
            input.ReadMessage(ProducerId);
            break;
          }
          case 26: {
            PreviousDeltaDfsHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// FavouriteDeltaBroadcast
  ///
  /// CandidateDeltaBroadcast: The candidate favoured by the voter broadcasting this message.
  /// VoterId: The PeerId of the participant submitting its vote to the network.
  /// </summary>
  public sealed partial class FavouriteDeltaBroadcast : pb::IMessage<FavouriteDeltaBroadcast> {
    private static readonly pb::MessageParser<FavouriteDeltaBroadcast> _parser = new pb::MessageParser<FavouriteDeltaBroadcast>(() => new FavouriteDeltaBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FavouriteDeltaBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Catalyst.Protocol.Delta.DeltaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavouriteDeltaBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavouriteDeltaBroadcast(FavouriteDeltaBroadcast other) : this() {
      candidate_ = other.candidate_ != null ? other.candidate_.Clone() : null;
      voterId_ = other.voterId_ != null ? other.voterId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavouriteDeltaBroadcast Clone() {
      return new FavouriteDeltaBroadcast(this);
    }

    /// <summary>Field number for the "Candidate" field.</summary>
    public const int CandidateFieldNumber = 1;
    private global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast candidate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast Candidate {
      get { return candidate_; }
      set {
        candidate_ = value;
      }
    }

    /// <summary>Field number for the "VoterId" field.</summary>
    public const int VoterIdFieldNumber = 2;
    private global::Catalyst.Protocol.Common.PeerId voterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Catalyst.Protocol.Common.PeerId VoterId {
      get { return voterId_; }
      set {
        voterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FavouriteDeltaBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FavouriteDeltaBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Candidate, other.Candidate)) return false;
      if (!object.Equals(VoterId, other.VoterId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (candidate_ != null) hash ^= Candidate.GetHashCode();
      if (voterId_ != null) hash ^= VoterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (candidate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Candidate);
      }
      if (voterId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VoterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (candidate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Candidate);
      }
      if (voterId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FavouriteDeltaBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.candidate_ != null) {
        if (candidate_ == null) {
          Candidate = new global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast();
        }
        Candidate.MergeFrom(other.Candidate);
      }
      if (other.voterId_ != null) {
        if (voterId_ == null) {
          VoterId = new global::Catalyst.Protocol.Common.PeerId();
        }
        VoterId.MergeFrom(other.VoterId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (candidate_ == null) {
              Candidate = new global::Catalyst.Protocol.Delta.CandidateDeltaBroadcast();
            }
            input.ReadMessage(Candidate);
            break;
          }
          case 18: {
            if (voterId_ == null) {
              VoterId = new global::Catalyst.Protocol.Common.PeerId();
            }
            input.ReadMessage(VoterId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// DeltaDfsHashBroadcast
  ///
  /// DeltaDfsHash: The DFS address at which the full content of the delta can be retrieved.
  /// PreviousDeltaDfsHash: The DFS address for the content of the delta preceding this candidate.
  /// </summary>
  public sealed partial class DeltaDfsHashBroadcast : pb::IMessage<DeltaDfsHashBroadcast> {
    private static readonly pb::MessageParser<DeltaDfsHashBroadcast> _parser = new pb::MessageParser<DeltaDfsHashBroadcast>(() => new DeltaDfsHashBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeltaDfsHashBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Catalyst.Protocol.Delta.DeltaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaDfsHashBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaDfsHashBroadcast(DeltaDfsHashBroadcast other) : this() {
      deltaDfsHash_ = other.deltaDfsHash_;
      previousDeltaDfsHash_ = other.previousDeltaDfsHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeltaDfsHashBroadcast Clone() {
      return new DeltaDfsHashBroadcast(this);
    }

    /// <summary>Field number for the "DeltaDfsHash" field.</summary>
    public const int DeltaDfsHashFieldNumber = 1;
    private pb::ByteString deltaDfsHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeltaDfsHash {
      get { return deltaDfsHash_; }
      set {
        deltaDfsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreviousDeltaDfsHash" field.</summary>
    public const int PreviousDeltaDfsHashFieldNumber = 2;
    private pb::ByteString previousDeltaDfsHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousDeltaDfsHash {
      get { return previousDeltaDfsHash_; }
      set {
        previousDeltaDfsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeltaDfsHashBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeltaDfsHashBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeltaDfsHash != other.DeltaDfsHash) return false;
      if (PreviousDeltaDfsHash != other.PreviousDeltaDfsHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeltaDfsHash.Length != 0) hash ^= DeltaDfsHash.GetHashCode();
      if (PreviousDeltaDfsHash.Length != 0) hash ^= PreviousDeltaDfsHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeltaDfsHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DeltaDfsHash);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PreviousDeltaDfsHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeltaDfsHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeltaDfsHash);
      }
      if (PreviousDeltaDfsHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousDeltaDfsHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeltaDfsHashBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.DeltaDfsHash.Length != 0) {
        DeltaDfsHash = other.DeltaDfsHash;
      }
      if (other.PreviousDeltaDfsHash.Length != 0) {
        PreviousDeltaDfsHash = other.PreviousDeltaDfsHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeltaDfsHash = input.ReadBytes();
            break;
          }
          case 18: {
            PreviousDeltaDfsHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
