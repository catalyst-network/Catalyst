{
    "defaultAssembly": "Catalyst.Node.Core",
    "components": [
        {
            "type": "Catalyst.Node.Core.CatalystNode",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.ICatalystNode, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.IO.Messaging.MessageFactory, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.IMessageFactory, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.P2P.PeerClientFactory",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IPeerClientFactory, Catalyst.Common"
                }
            ],
            "instanceScope": "singleinstance"
        },
        {
            "type": "Catalyst.Node.Core.RPC.NodeRpcServer",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Rpc.INodeRpcServer, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.RPC.RpcServerSettings",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Rpc.IRpcServerSettings, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.IO.Messaging.CorrelationManager, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.ICorrelationManager, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.P2P.PeerSettings",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IPeerSettings, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.P2P.PeerIdentifier, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IPeerIdentifier, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.KeyStore.LocalKeyStore, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.KeyStore.IKeyStore, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.KeyStore.KeyStoreServiceWrapped, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.KeyStore.IKeyStoreService, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Util.AddressHelper, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Util.IAddressHelper, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Cryptography.RustCryptoContext, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Cryptography.ICryptoContext, Catalyst.Common"
                }
            ]
        },
        {
            "type": "SharpRepository.InMemoryRepository.InMemoryRepository`1[[Catalyst.Common.P2P.Peer, Catalyst.Common]], SharpRepository.InMemoryRepository",
            "services": [
                {
                    "type": "SharpRepository.Repository.IRepository`1[[Catalyst.Common.P2P.Peer, Catalyst.Common]], SharpRepository.Repository"
                }
            ]
        },
        {
            "type": "Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Caching.Memory",
            "services": [
                {
                    "type": "Microsoft.Extensions.Options.IOptions`1[[Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Caching.Memory]], Microsoft.Extensions.Options"
                }
            ]
        },
        {
            "type": "Microsoft.Extensions.Caching.Memory.MemoryCache, Microsoft.Extensions.Caching.Memory",
            "services": [
                {
                    "type": "Microsoft.Extensions.Caching.Memory.IMemoryCache, Microsoft.Extensions.Caching.Abstractions"
                }
            ]
        },
        {
            "type": "Catalyst.Common.P2P.Peer, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IPeer, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.P2P.PeerDiscovery",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IPeerDiscovery, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Network.DevDnsClient, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Network.IDns, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Network.InjectableLookupClient, Catalyst.Common",
            "services": [
                {
                    "type": "DnsClient.ILookupClient, DnsClient"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.P2P.P2PService",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.P2P.IP2PService, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Cryptography.CertificateStore, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Cryptography.ICertificateStore, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Cryptography.IsaacRandom, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Cryptography.IDeterministicRandom, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.Cryptography.ConsolePasswordReader, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Cryptography.IPasswordReader, Catalyst.Common"
                }
            ]
        },
        // WHY USE CLI BASED CLASS AND NOT IN COMMON???
        {
            "type": "Catalyst.Common.Shell.ConsoleUserOutput, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.Cli.IUserOutput, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.FileSystem.FileSystem, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.FileSystem.IFileSystem, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.FileTransfer.UploadFileTransferFactory, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.FileTransfer.IUploadFileTransferFactory, Catalyst.Common"
                }
            ],
            "instanceScope": "singleinstance"
        },
        {
            "type": "Catalyst.Common.FileTransfer.DownloadFileTransferFactory, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.FileTransfer.IDownloadFileTransferFactory, Catalyst.Common"
                }
            ],
            "instanceScope": "singleinstance"
        },
        {
            "type": "Catalyst.Node.Core.P2P.Messaging.Gossip.GossipManagerContext",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.Gossip.IGossipManagerContext, Catalyst.Common"
                }
            ],
            "instanceScope": "singleinstance"
        },
        {
            "type": "Catalyst.Node.Core.P2P.Messaging.Gossip.GossipManager",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.Gossip.IGossipManager, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Common.IO.Inbound.GossipHandler, Catalyst.Common",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.Gossip.IGossipHandler, Catalyst.Common"
                }
            ]
        },
        {
            "type": "Catalyst.Node.Core.P2P.Messaging.Gossip.GossipCache",
            "services": [
                {
                    "type": "Catalyst.Common.Interfaces.IO.Messaging.Gossip.IGossipCache, Catalyst.Common"
                }
            ],
            "instanceScope": "singleinstance"
        }
    ],
    "modules": [
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/messageHandlers.json"
            }
        },
        // The following modules are not only modules in the sense of Autofac,
        // but also in the sense of the catalyst node architecture, i.e. swappable
        // components that can customized for different use cases.
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/Modules/dfs.json"
            }
        },
        {
            "type": "Catalyst.Node.Core.Modules.Consensus.ConsensusModule",
            "parameters": {
                "configFilePath": "Config/Modules/consensus.json"
            }
        },
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/Modules/contract.json"
            }
        },
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/Modules/ledger.json"
            }
        },
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/Modules/keysigner.json"
            }
        },
        {
            "type": "Catalyst.Node.Core.Modules.JsonConfiguredModule",
            "parameters": {
                "configFilePath": "Config/Modules/mempool.json"
            }
        }
    ]
}
