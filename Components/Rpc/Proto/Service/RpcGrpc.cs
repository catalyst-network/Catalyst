// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Rpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ADL.Rpc.Proto.Service {
  public static partial class RpcService
  {
    static readonly string __ServiceName = "ADL.Rpc.Proto.Service.RpcService";

    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.PingRequest> __Marshaller_ADL_Rpc_Proto_Service_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.PongResponse> __Marshaller_ADL_Rpc_Proto_Service_PongResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.PongResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.VersionRequest> __Marshaller_ADL_Rpc_Proto_Service_VersionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.VersionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.VersionResponse> __Marshaller_ADL_Rpc_Proto_Service_VersionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.VersionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.GetInfoRequest> __Marshaller_ADL_Rpc_Proto_Service_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ADL.Rpc.Proto.Service.GetInfoResponse> __Marshaller_ADL_Rpc_Proto_Service_GetInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ADL.Rpc.Proto.Service.GetInfoResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::ADL.Rpc.Proto.Service.PingRequest, global::ADL.Rpc.Proto.Service.PongResponse> __Method_Ping = new grpc::Method<global::ADL.Rpc.Proto.Service.PingRequest, global::ADL.Rpc.Proto.Service.PongResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_ADL_Rpc_Proto_Service_PingRequest,
        __Marshaller_ADL_Rpc_Proto_Service_PongResponse);

    static readonly grpc::Method<global::ADL.Rpc.Proto.Service.VersionRequest, global::ADL.Rpc.Proto.Service.VersionResponse> __Method_Version = new grpc::Method<global::ADL.Rpc.Proto.Service.VersionRequest, global::ADL.Rpc.Proto.Service.VersionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Version",
        __Marshaller_ADL_Rpc_Proto_Service_VersionRequest,
        __Marshaller_ADL_Rpc_Proto_Service_VersionResponse);

    static readonly grpc::Method<global::ADL.Rpc.Proto.Service.GetInfoRequest, global::ADL.Rpc.Proto.Service.GetInfoResponse> __Method_GetInfo = new grpc::Method<global::ADL.Rpc.Proto.Service.GetInfoRequest, global::ADL.Rpc.Proto.Service.GetInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfo",
        __Marshaller_ADL_Rpc_Proto_Service_GetInfoRequest,
        __Marshaller_ADL_Rpc_Proto_Service_GetInfoResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ADL.Rpc.Proto.Service.RpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RpcService</summary>
    public abstract partial class RpcServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ADL.Rpc.Proto.Service.PongResponse> Ping(global::ADL.Rpc.Proto.Service.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ADL.Rpc.Proto.Service.VersionResponse> Version(global::ADL.Rpc.Proto.Service.VersionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
      ///    rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);
      ///    rpc CreateAddress(CreateAddressRequest) returns (CreateAddressResponse);
      ///    rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
      ///    rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
      ///    rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse);
      ///    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
      ///    rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);
      ///    rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
      ///    rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
      ///    rpc BroadcastRawTransaction(BroadcastRawTransactionRequest) returns (BroadcastRawTransactionResponse);
      ///    rpc SendTo(SendToRequest) returns (SendToResponse);
      ///    rpc SendToFrom(SendToFromRequest) returns (SendToFromResponse);
      ///    rpc SendMany(SendManyRequest) returns (SendManyResponse);
      ///    rpc SendFromMany(SendFromManyRequest) returns (SendFromManyResponse);
      ///    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
      ///    rpc GetPeerList(GetPeerListRequest) returns (GetPeerListResponse);
      ///    rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse);
      ///    rpc GetConnectionCount(GetConnectionCountRequest) returns (GetConnectionCountResponse);
      ///    rpc GetDelta(GetDeltaRequest) returns (GetDeltaResponse);
      ///    rpc GetMempool(GetMempoolRequest) returns (GetMempoolResponse);
      ///    rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
      ///    rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);
      ///    rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::ADL.Rpc.Proto.Service.GetInfoResponse> GetInfo(global::ADL.Rpc.Proto.Service.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RpcService</summary>
    public partial class RpcServiceClient : grpc::ClientBase<RpcServiceClient>
    {
      /// <summary>Creates a new client for RpcService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RpcServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RpcService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RpcServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RpcServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RpcServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ADL.Rpc.Proto.Service.PongResponse Ping(global::ADL.Rpc.Proto.Service.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ADL.Rpc.Proto.Service.PongResponse Ping(global::ADL.Rpc.Proto.Service.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.PongResponse> PingAsync(global::ADL.Rpc.Proto.Service.PingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.PongResponse> PingAsync(global::ADL.Rpc.Proto.Service.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::ADL.Rpc.Proto.Service.VersionResponse Version(global::ADL.Rpc.Proto.Service.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Version(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ADL.Rpc.Proto.Service.VersionResponse Version(global::ADL.Rpc.Proto.Service.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Version, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.VersionResponse> VersionAsync(global::ADL.Rpc.Proto.Service.VersionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.VersionResponse> VersionAsync(global::ADL.Rpc.Proto.Service.VersionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Version, null, options, request);
      }
      /// <summary>
      ///    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
      ///    rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);
      ///    rpc CreateAddress(CreateAddressRequest) returns (CreateAddressResponse);
      ///    rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
      ///    rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
      ///    rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse);
      ///    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
      ///    rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);
      ///    rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
      ///    rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
      ///    rpc BroadcastRawTransaction(BroadcastRawTransactionRequest) returns (BroadcastRawTransactionResponse);
      ///    rpc SendTo(SendToRequest) returns (SendToResponse);
      ///    rpc SendToFrom(SendToFromRequest) returns (SendToFromResponse);
      ///    rpc SendMany(SendManyRequest) returns (SendManyResponse);
      ///    rpc SendFromMany(SendFromManyRequest) returns (SendFromManyResponse);
      ///    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
      ///    rpc GetPeerList(GetPeerListRequest) returns (GetPeerListResponse);
      ///    rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse);
      ///    rpc GetConnectionCount(GetConnectionCountRequest) returns (GetConnectionCountResponse);
      ///    rpc GetDelta(GetDeltaRequest) returns (GetDeltaResponse);
      ///    rpc GetMempool(GetMempoolRequest) returns (GetMempoolResponse);
      ///    rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
      ///    rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);
      ///    rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ADL.Rpc.Proto.Service.GetInfoResponse GetInfo(global::ADL.Rpc.Proto.Service.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
      ///    rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);
      ///    rpc CreateAddress(CreateAddressRequest) returns (CreateAddressResponse);
      ///    rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
      ///    rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
      ///    rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse);
      ///    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
      ///    rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);
      ///    rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
      ///    rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
      ///    rpc BroadcastRawTransaction(BroadcastRawTransactionRequest) returns (BroadcastRawTransactionResponse);
      ///    rpc SendTo(SendToRequest) returns (SendToResponse);
      ///    rpc SendToFrom(SendToFromRequest) returns (SendToFromResponse);
      ///    rpc SendMany(SendManyRequest) returns (SendManyResponse);
      ///    rpc SendFromMany(SendFromManyRequest) returns (SendFromManyResponse);
      ///    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
      ///    rpc GetPeerList(GetPeerListRequest) returns (GetPeerListResponse);
      ///    rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse);
      ///    rpc GetConnectionCount(GetConnectionCountRequest) returns (GetConnectionCountResponse);
      ///    rpc GetDelta(GetDeltaRequest) returns (GetDeltaResponse);
      ///    rpc GetMempool(GetMempoolRequest) returns (GetMempoolResponse);
      ///    rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
      ///    rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);
      ///    rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::ADL.Rpc.Proto.Service.GetInfoResponse GetInfo(global::ADL.Rpc.Proto.Service.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfo, null, options, request);
      }
      /// <summary>
      ///    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
      ///    rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);
      ///    rpc CreateAddress(CreateAddressRequest) returns (CreateAddressResponse);
      ///    rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
      ///    rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
      ///    rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse);
      ///    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
      ///    rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);
      ///    rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
      ///    rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
      ///    rpc BroadcastRawTransaction(BroadcastRawTransactionRequest) returns (BroadcastRawTransactionResponse);
      ///    rpc SendTo(SendToRequest) returns (SendToResponse);
      ///    rpc SendToFrom(SendToFromRequest) returns (SendToFromResponse);
      ///    rpc SendMany(SendManyRequest) returns (SendManyResponse);
      ///    rpc SendFromMany(SendFromManyRequest) returns (SendFromManyResponse);
      ///    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
      ///    rpc GetPeerList(GetPeerListRequest) returns (GetPeerListResponse);
      ///    rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse);
      ///    rpc GetConnectionCount(GetConnectionCountRequest) returns (GetConnectionCountResponse);
      ///    rpc GetDelta(GetDeltaRequest) returns (GetDeltaResponse);
      ///    rpc GetMempool(GetMempoolRequest) returns (GetMempoolResponse);
      ///    rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
      ///    rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);
      ///    rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.GetInfoResponse> GetInfoAsync(global::ADL.Rpc.Proto.Service.GetInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///    rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);
      ///    rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);
      ///    rpc CreateAddress(CreateAddressRequest) returns (CreateAddressResponse);
      ///    rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
      ///    rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
      ///    rpc ValidateAddress(ValidateAddressRequest) returns (ValidateAddressResponse);
      ///    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
      ///    rpc CreateRawTransaction(CreateRawTransactionRequest) returns (CreateRawTransactionResponse);
      ///    rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
      ///    rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
      ///    rpc BroadcastRawTransaction(BroadcastRawTransactionRequest) returns (BroadcastRawTransactionResponse);
      ///    rpc SendTo(SendToRequest) returns (SendToResponse);
      ///    rpc SendToFrom(SendToFromRequest) returns (SendToFromResponse);
      ///    rpc SendMany(SendManyRequest) returns (SendManyResponse);
      ///    rpc SendFromMany(SendFromManyRequest) returns (SendFromManyResponse);
      ///    rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
      ///    rpc GetPeerList(GetPeerListRequest) returns (GetPeerListResponse);
      ///    rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse);
      ///    rpc GetConnectionCount(GetConnectionCountRequest) returns (GetConnectionCountResponse);
      ///    rpc GetDelta(GetDeltaRequest) returns (GetDeltaResponse);
      ///    rpc GetMempool(GetMempoolRequest) returns (GetMempoolResponse);
      ///    rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);
      ///    rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);
      ///    rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::ADL.Rpc.Proto.Service.GetInfoResponse> GetInfoAsync(global::ADL.Rpc.Proto.Service.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfo, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RpcServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RpcServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_Version, serviceImpl.Version)
          .AddMethod(__Method_GetInfo, serviceImpl.GetInfo).Build();
    }

  }
}
#endregion
