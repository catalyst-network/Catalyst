syntax = "proto3";

package Catalyst.Protocol.Rpc.Node;

import "Rpc.proto";

service RpcServer {
    rpc Ping(Catalyst.Protocol.Rpc.Node.PingRequest) returns (Catalyst.Protocol.Rpc.Node.PongResponse);
    rpc Version(Catalyst.Protocol.Rpc.Node.VersionRequest) returns (Catalyst.Protocol.Rpc.Node.VersionResponse);
    rpc GetInfo(Catalyst.Protocol.Rpc.Node.GetInfoRequest) returns (Catalyst.Protocol.Rpc.Node.GetInfoResponse);
    rpc CreateWallet(Catalyst.Protocol.Rpc.Node.CreateWalletRequest) returns (Catalyst.Protocol.Rpc.Node.CreateWalletResponse);
    rpc ListWallet(Catalyst.Protocol.Rpc.Node.ListWalletRequest) returns (Catalyst.Protocol.Rpc.Node.ListWalletResponse);
    rpc CreateAddress(Catalyst.Protocol.Rpc.Node.CreateAddressRequest) returns (Catalyst.Protocol.Rpc.Node.CreateAddressResponse);
    rpc GetAddress(Catalyst.Protocol.Rpc.Node.GetAddressRequest) returns (Catalyst.Protocol.Rpc.Node.GetAddressResponse);
    rpc ListAddress(Catalyst.Protocol.Rpc.Node.ListAddressRequest) returns (Catalyst.Protocol.Rpc.Node.ListAddressResponse);
    rpc ValidateAddress(Catalyst.Protocol.Rpc.Node.ValidateAddressRequest) returns (Catalyst.Protocol.Rpc.Node.ValidateAddressResponse);
    rpc GetBalance(Catalyst.Protocol.Rpc.Node.GetBalanceRequest) returns (Catalyst.Protocol.Rpc.Node.GetBalanceResponse);
    rpc CreateRawTransaction(Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest) returns (Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse);
    rpc SignRawTransaction(Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest) returns (Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse);
    rpc DecodeRawTransaction(Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest) returns (Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse);
    rpc BroadcastRawTransaction(Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest) returns (Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse);
    rpc SendTo(Catalyst.Protocol.Rpc.Node.SendToRequest) returns (Catalyst.Protocol.Rpc.Node.SendToResponse);
    rpc SendToFrom(Catalyst.Protocol.Rpc.Node.SendToFromRequest) returns (Catalyst.Protocol.Rpc.Node.SendToFromResponse);
    rpc SendMany(Catalyst.Protocol.Rpc.Node.SendManyRequest) returns (Catalyst.Protocol.Rpc.Node.SendManyResponse);
    rpc SendFromMany(Catalyst.Protocol.Rpc.Node.SendFromManyRequest) returns (Catalyst.Protocol.Rpc.Node.SendFromManyResponse);
    rpc AddNode(Catalyst.Protocol.Rpc.Node.AddNodeRequest) returns (Catalyst.Protocol.Rpc.Node.AddNodeResponse);
    rpc GetPeerList(Catalyst.Protocol.Rpc.Node.GetPeerListRequest) returns (Catalyst.Protocol.Rpc.Node.GetPeerListResponse);
    rpc GetPeerInfo(Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest) returns (Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse);
    rpc GetConnectionCount(Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest) returns (Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse);
    rpc GetDelta(Catalyst.Protocol.Rpc.Node.GetDeltaRequest) returns (Catalyst.Protocol.Rpc.Node.GetDeltaResponse);
    rpc GetMempool(Catalyst.Protocol.Rpc.Node.GetMempoolRequest) returns (Catalyst.Protocol.Rpc.Node.GetMempoolResponse);
    rpc SignMessage(Catalyst.Protocol.Rpc.Node.SignMessageRequest) returns (Catalyst.Protocol.Rpc.Node.SignMessageResponse);
    rpc VerifyMessage(Catalyst.Protocol.Rpc.Node.VerifyMessageRequest) returns (Catalyst.Protocol.Rpc.Node.VerifyMessageResponse);
    rpc ServiceStatus(Catalyst.Protocol.Rpc.Node.ServiceStatusRequest) returns (Catalyst.Protocol.Rpc.Node.ServiceStatusResponse);
}
