### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext
  commentId: T:Catalyst.Abstractions.Cryptography.ICryptoContext
  id: ICryptoContext
  parent: Catalyst.Abstractions.Cryptography
  children:
  - Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  - Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey(Catalyst.Abstractions.Cryptography.IPublicKey)
  - Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey
  - Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes(System.Byte[])
  - Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes(System.Byte[])
  - Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  - Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes(System.Byte[],System.Byte[])
  - Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
  - Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
  - Catalyst.Abstractions.Cryptography.ICryptoContext.Sign(Catalyst.Abstractions.Cryptography.IPrivateKey,System.Byte[],System.Byte[])
  - Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
  - Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
  - Catalyst.Abstractions.Cryptography.ICryptoContext.Verify(Catalyst.Abstractions.Cryptography.ISignature,System.Byte[],System.Byte[])
  langs:
  - csharp
  - vb
  name: ICryptoContext
  nameWithType: ICryptoContext
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ICryptoContext
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 27
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  syntax:
    content: public interface ICryptoContext
    content.vb: Public Interface ICryptoContext
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
  commentId: P:Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
  id: PrivateKeyLength
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: PrivateKeyLength
  nameWithType: ICryptoContext.PrivateKeyLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PrivateKeyLength
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 32
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nPrivate key byte length.\n"
  example: []
  syntax:
    content: int PrivateKeyLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property PrivateKeyLength As Integer
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
  commentId: P:Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
  id: PublicKeyLength
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: PublicKeyLength
  nameWithType: ICryptoContext.PublicKeyLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PublicKeyLength
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 37
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nPublic key byte length.\n"
  example: []
  syntax:
    content: int PublicKeyLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property PublicKeyLength As Integer
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
  commentId: P:Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
  id: SignatureLength
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: SignatureLength
  nameWithType: ICryptoContext.SignatureLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: SignatureLength
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 42
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nSignature byte length.\n"
  example: []
  syntax:
    content: int SignatureLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property SignatureLength As Integer
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
  commentId: P:Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
  id: SignatureContextMaxLength
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: SignatureContextMaxLength
  nameWithType: ICryptoContext.SignatureContextMaxLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: SignatureContextMaxLength
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 47
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\n\n"
  example: []
  syntax:
    content: int SignatureContextMaxLength { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property SignatureContextMaxLength As Integer
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey
  id: GeneratePrivateKey
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: GeneratePrivateKey()
  nameWithType: ICryptoContext.GeneratePrivateKey()
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GeneratePrivateKey
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 53
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nGenerates a new private key.\n"
  example: []
  syntax:
    content: IPrivateKey GeneratePrivateKey()
    return:
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
      description: ''
    content.vb: Function GeneratePrivateKey As IPrivateKey
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey*
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  id: GetPublicKeyFromPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: GetPublicKeyFromPrivateKey(IPrivateKey)
  nameWithType: ICryptoContext.GetPublicKeyFromPrivateKey(IPrivateKey)
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetPublicKeyFromPrivateKey
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 60
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nGiven a private key returns corresponding public key.\n"
  example: []
  syntax:
    content: IPublicKey GetPublicKeyFromPrivateKey(IPrivateKey privateKey)
    parameters:
    - id: privateKey
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
      description: ''
    return:
      type: Catalyst.Abstractions.Cryptography.IPublicKey
      description: ''
    content.vb: Function GetPublicKeyFromPrivateKey(privateKey As IPrivateKey) As IPublicKey
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey*
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes(System.Byte[])
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes(System.Byte[])
  id: GetPublicKeyFromBytes(System.Byte[])
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: GetPublicKeyFromBytes(Byte[])
  nameWithType: ICryptoContext.GetPublicKeyFromBytes(Byte[])
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetPublicKeyFromBytes
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 67
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nCreates public key from public key bytes.\n"
  example: []
  syntax:
    content: IPublicKey GetPublicKeyFromBytes(byte[] publicKeyBytes)
    parameters:
    - id: publicKeyBytes
      type: System.Byte[]
      description: ''
    return:
      type: Catalyst.Abstractions.Cryptography.IPublicKey
      description: ''
    content.vb: Function GetPublicKeyFromBytes(publicKeyBytes As Byte()) As IPublicKey
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes*
  nameWithType.vb: ICryptoContext.GetPublicKeyFromBytes(Byte())
  fullName.vb: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes(System.Byte())
  name.vb: GetPublicKeyFromBytes(Byte())
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes(System.Byte[])
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes(System.Byte[])
  id: GetPrivateKeyFromBytes(System.Byte[])
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: GetPrivateKeyFromBytes(Byte[])
  nameWithType: ICryptoContext.GetPrivateKeyFromBytes(Byte[])
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetPrivateKeyFromBytes
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 74
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nCreates private key from key bytes.\n"
  example: []
  syntax:
    content: IPrivateKey GetPrivateKeyFromBytes(byte[] privateKeyBytes)
    parameters:
    - id: privateKeyBytes
      type: System.Byte[]
      description: ''
    return:
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
      description: ''
    content.vb: Function GetPrivateKeyFromBytes(privateKeyBytes As Byte()) As IPrivateKey
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes*
  nameWithType.vb: ICryptoContext.GetPrivateKeyFromBytes(Byte())
  fullName.vb: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes(System.Byte())
  name.vb: GetPrivateKeyFromBytes(Byte())
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes(System.Byte[],System.Byte[])
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes(System.Byte[],System.Byte[])
  id: GetSignatureFromBytes(System.Byte[],System.Byte[])
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: GetSignatureFromBytes(Byte[], Byte[])
  nameWithType: ICryptoContext.GetSignatureFromBytes(Byte[], Byte[])
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetSignatureFromBytes
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 82
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nTakes signature bytes and corresponding public key bytes and creates a signature.\n"
  example: []
  syntax:
    content: ISignature GetSignatureFromBytes(byte[] signatureBytes, byte[] publicKeyBytes)
    parameters:
    - id: signatureBytes
      type: System.Byte[]
      description: ''
    - id: publicKeyBytes
      type: System.Byte[]
      description: ''
    return:
      type: Catalyst.Abstractions.Cryptography.ISignature
      description: ''
    content.vb: Function GetSignatureFromBytes(signatureBytes As Byte(), publicKeyBytes As Byte()) As ISignature
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes*
  nameWithType.vb: ICryptoContext.GetSignatureFromBytes(Byte(), Byte())
  fullName.vb: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes(System.Byte(), System.Byte())
  name.vb: GetSignatureFromBytes(Byte(), Byte())
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  id: ExportPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: ExportPrivateKey(IPrivateKey)
  nameWithType: ICryptoContext.ExportPrivateKey(IPrivateKey)
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey(Catalyst.Abstractions.Cryptography.IPrivateKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ExportPrivateKey
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 89
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nReturns private key bytes.\n"
  example: []
  syntax:
    content: byte[] ExportPrivateKey(IPrivateKey privateKey)
    parameters:
    - id: privateKey
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Function ExportPrivateKey(privateKey As IPrivateKey) As Byte()
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey*
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey(Catalyst.Abstractions.Cryptography.IPublicKey)
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey(Catalyst.Abstractions.Cryptography.IPublicKey)
  id: ExportPublicKey(Catalyst.Abstractions.Cryptography.IPublicKey)
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: ExportPublicKey(IPublicKey)
  nameWithType: ICryptoContext.ExportPublicKey(IPublicKey)
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey(Catalyst.Abstractions.Cryptography.IPublicKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ExportPublicKey
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 96
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nReturns public key bytes.\n"
  example: []
  syntax:
    content: byte[] ExportPublicKey(IPublicKey publicKey)
    parameters:
    - id: publicKey
      type: Catalyst.Abstractions.Cryptography.IPublicKey
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Function ExportPublicKey(publicKey As IPublicKey) As Byte()
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey*
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign(Catalyst.Abstractions.Cryptography.IPrivateKey,System.Byte[],System.Byte[])
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.Sign(Catalyst.Abstractions.Cryptography.IPrivateKey,System.Byte[],System.Byte[])
  id: Sign(Catalyst.Abstractions.Cryptography.IPrivateKey,System.Byte[],System.Byte[])
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: Sign(IPrivateKey, Byte[], Byte[])
  nameWithType: ICryptoContext.Sign(IPrivateKey, Byte[], Byte[])
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign(Catalyst.Abstractions.Cryptography.IPrivateKey, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Sign
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 105
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  summary: "\nSigns message using provided private key and returns the signature.\n"
  example: []
  syntax:
    content: ISignature Sign(IPrivateKey privateKey, byte[] message, byte[] context)
    parameters:
    - id: privateKey
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
      description: ''
    - id: message
      type: System.Byte[]
      description: ''
    - id: context
      type: System.Byte[]
      description: ''
    return:
      type: Catalyst.Abstractions.Cryptography.ISignature
      description: ''
    content.vb: Function Sign(privateKey As IPrivateKey, message As Byte(), context As Byte()) As ISignature
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign*
  nameWithType.vb: ICryptoContext.Sign(IPrivateKey, Byte(), Byte())
  fullName.vb: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign(Catalyst.Abstractions.Cryptography.IPrivateKey, System.Byte(), System.Byte())
  name.vb: Sign(IPrivateKey, Byte(), Byte())
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify(Catalyst.Abstractions.Cryptography.ISignature,System.Byte[],System.Byte[])
  commentId: M:Catalyst.Abstractions.Cryptography.ICryptoContext.Verify(Catalyst.Abstractions.Cryptography.ISignature,System.Byte[],System.Byte[])
  id: Verify(Catalyst.Abstractions.Cryptography.ISignature,System.Byte[],System.Byte[])
  parent: Catalyst.Abstractions.Cryptography.ICryptoContext
  langs:
  - csharp
  - vb
  name: Verify(ISignature, Byte[], Byte[])
  nameWithType: ICryptoContext.Verify(ISignature, Byte[], Byte[])
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify(Catalyst.Abstractions.Cryptography.ISignature, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Verify
    path: ../src/Catalyst.Abstractions/Cryptography/ICryptoContext.cs
    startLine: 107
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  syntax:
    content: bool Verify(ISignature signature, byte[] message, byte[] context)
    parameters:
    - id: signature
      type: Catalyst.Abstractions.Cryptography.ISignature
    - id: message
      type: System.Byte[]
    - id: context
      type: System.Byte[]
    return:
      type: System.Boolean
    content.vb: Function Verify(signature As ISignature, message As Byte(), context As Byte()) As Boolean
  overload: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify*
  nameWithType.vb: ICryptoContext.Verify(ISignature, Byte(), Byte())
  fullName.vb: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify(Catalyst.Abstractions.Cryptography.ISignature, System.Byte(), System.Byte())
  name.vb: Verify(ISignature, Byte(), Byte())
references:
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
  name: PrivateKeyLength
  nameWithType: ICryptoContext.PrivateKeyLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.PrivateKeyLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
  name: PublicKeyLength
  nameWithType: ICryptoContext.PublicKeyLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.PublicKeyLength
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
  name: SignatureLength
  nameWithType: ICryptoContext.SignatureLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureLength
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
  name: SignatureContextMaxLength
  nameWithType: ICryptoContext.SignatureContextMaxLength
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.SignatureContextMaxLength
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey
  name: GeneratePrivateKey
  nameWithType: ICryptoContext.GeneratePrivateKey
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GeneratePrivateKey
- uid: Catalyst.Abstractions.Cryptography.IPrivateKey
  commentId: T:Catalyst.Abstractions.Cryptography.IPrivateKey
  parent: Catalyst.Abstractions.Cryptography
  name: IPrivateKey
  nameWithType: IPrivateKey
  fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey
  name: GetPublicKeyFromPrivateKey
  nameWithType: ICryptoContext.GetPublicKeyFromPrivateKey
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromPrivateKey
- uid: Catalyst.Abstractions.Cryptography.IPublicKey
  commentId: T:Catalyst.Abstractions.Cryptography.IPublicKey
  parent: Catalyst.Abstractions.Cryptography
  name: IPublicKey
  nameWithType: IPublicKey
  fullName: Catalyst.Abstractions.Cryptography.IPublicKey
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes
  name: GetPublicKeyFromBytes
  nameWithType: ICryptoContext.GetPublicKeyFromBytes
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPublicKeyFromBytes
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes
  name: GetPrivateKeyFromBytes
  nameWithType: ICryptoContext.GetPrivateKeyFromBytes
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetPrivateKeyFromBytes
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes
  name: GetSignatureFromBytes
  nameWithType: ICryptoContext.GetSignatureFromBytes
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.GetSignatureFromBytes
- uid: Catalyst.Abstractions.Cryptography.ISignature
  commentId: T:Catalyst.Abstractions.Cryptography.ISignature
  parent: Catalyst.Abstractions.Cryptography
  name: ISignature
  nameWithType: ISignature
  fullName: Catalyst.Abstractions.Cryptography.ISignature
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey
  name: ExportPrivateKey
  nameWithType: ICryptoContext.ExportPrivateKey
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPrivateKey
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey
  name: ExportPublicKey
  nameWithType: ICryptoContext.ExportPublicKey
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.ExportPublicKey
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.Sign
  name: Sign
  nameWithType: ICryptoContext.Sign
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.Sign
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify*
  commentId: Overload:Catalyst.Abstractions.Cryptography.ICryptoContext.Verify
  name: Verify
  nameWithType: ICryptoContext.Verify
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext.Verify
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
