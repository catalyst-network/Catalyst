### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Registry.RegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.RegistryBase`2
  id: RegistryBase`2
  parent: Catalyst.Abstractions.Registry
  children:
  - Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  - Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  - Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  - Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  - Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  - Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  langs:
  - csharp
  - vb
  name: RegistryBase<TKey, TValue>
  nameWithType: RegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RegistryBase
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 30
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: 'public abstract class RegistryBase<TKey, TValue> : IRegistryBase<TKey, TValue>, IDisposable where TKey : Enumeration where TValue : class'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public MustInherit Class RegistryBase(Of TKey As Enumeration, TValue As Class)

          Implements IRegistryBase(Of TKey, TValue), IDisposable
  inheritance:
  - System.Object
  implements:
  - Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RegistryBase(Of TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue)
  name.vb: RegistryBase(Of TKey, TValue)
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  commentId: P:Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  id: Registry
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: Registry
  nameWithType: RegistryBase<TKey, TValue>.Registry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.Registry
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Registry
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 34
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: protected IDictionary<TKey, TValue> Registry { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Protected Property Registry As IDictionary(Of TKey, TValue)
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.Registry*
  nameWithType.vb: RegistryBase(Of TKey, TValue).Registry
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).Registry
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  id: AddItemToRegistry(`0,`1)
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: RegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddItemToRegistry
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 36
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: public bool AddItemToRegistry(TKey identifier, TValue item)
    parameters:
    - id: identifier
      type: '{TKey}'
    - id: item
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function AddItemToRegistry(identifier As TKey, item As TValue) As Boolean
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry*
  implements:
  - Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.AddItemToRegistry({TKey},{TValue})
  nameWithType.vb: RegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  id: GetItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: GetItemFromRegistry(TKey)
  nameWithType: RegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetItemFromRegistry
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 42
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: public TValue GetItemFromRegistry(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Function GetItemFromRegistry(identifier As TKey) As TValue
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry*
  implements:
  - Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.GetItemFromRegistry({TKey})
  nameWithType.vb: RegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  id: RegistryContainsKey(`0)
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: RegistryContainsKey(TKey)
  nameWithType: RegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RegistryContainsKey
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 48
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: public bool RegistryContainsKey(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function RegistryContainsKey(identifier As TKey) As Boolean
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey*
  implements:
  - Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.RegistryContainsKey({TKey})
  nameWithType.vb: RegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  id: RemoveItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: RemoveItemFromRegistry(TKey)
  nameWithType: RegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RemoveItemFromRegistry
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 50
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: public bool RemoveItemFromRegistry(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function RemoveItemFromRegistry(identifier As TKey) As Boolean
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry*
  implements:
  - Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.RemoveItemFromRegistry({TKey})
  nameWithType.vb: RegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: Catalyst.Abstractions.Registry.RegistryBase`2
  langs:
  - csharp
  - vb
  name: IDisposable.Dispose()
  nameWithType: RegistryBase<TKey, TValue>.IDisposable.Dispose()
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.System.IDisposable.Dispose()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/RegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: System.IDisposable.Dispose
    path: ../src/Catalyst.Abstractions/Registry/RegistryBase.cs
    startLine: 55
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: void IDisposable.Dispose()
    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose
  overload: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: RegistryBase(Of TKey, TValue).System.IDisposable.Dispose()
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).System.IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
references:
- uid: Catalyst.Abstractions.Registry
  commentId: N:Catalyst.Abstractions.Registry
  name: Catalyst.Abstractions.Registry
  nameWithType: Catalyst.Abstractions.Registry
  fullName: Catalyst.Abstractions.Registry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase{`0,`1}
  parent: Catalyst.Abstractions.Registry
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.Registry*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  name: Registry
  nameWithType: RegistryBase<TKey, TValue>.Registry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.Registry
  nameWithType.vb: RegistryBase(Of TKey, TValue).Registry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).Registry
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry
  name: AddItemToRegistry
  nameWithType: RegistryBase<TKey, TValue>.AddItemToRegistry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.AddItemToRegistry
  nameWithType.vb: RegistryBase(Of TKey, TValue).AddItemToRegistry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).AddItemToRegistry
- uid: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.AddItemToRegistry({TKey},{TValue})
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{`0,`1}.AddItemToRegistry(`0,`1)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry
  name: GetItemFromRegistry
  nameWithType: RegistryBase<TKey, TValue>.GetItemFromRegistry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.GetItemFromRegistry
  nameWithType.vb: RegistryBase(Of TKey, TValue).GetItemFromRegistry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).GetItemFromRegistry
- uid: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.GetItemFromRegistry({TKey})
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{`0,`1}.GetItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey
  name: RegistryContainsKey
  nameWithType: RegistryBase<TKey, TValue>.RegistryContainsKey
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RegistryContainsKey
  nameWithType.vb: RegistryBase(Of TKey, TValue).RegistryContainsKey
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RegistryContainsKey
- uid: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.RegistryContainsKey({TKey})
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{`0,`1}.RegistryContainsKey(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of TKey, TValue).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of TKey, TValue).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry
  name: RemoveItemFromRegistry
  nameWithType: RegistryBase<TKey, TValue>.RemoveItemFromRegistry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RemoveItemFromRegistry
  nameWithType.vb: RegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RemoveItemFromRegistry
- uid: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}.RemoveItemFromRegistry({TKey})
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{`0,`1}.RemoveItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{{TKey},{TValue}}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose*
  commentId: Overload:Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  name: IDisposable.Dispose
  nameWithType: RegistryBase<TKey, TValue>.IDisposable.Dispose
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.System.IDisposable.Dispose
  nameWithType.vb: RegistryBase(Of TKey, TValue).System.IDisposable.Dispose
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).System.IDisposable.Dispose
  name.vb: System.IDisposable.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
