### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  commentId: T:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  id: IDeltaHashProvider
  parent: Catalyst.Abstractions.Consensus.Deltas
  children:
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash(System.Nullable{System.DateTime})
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  langs:
  - csharp
  - vb
  name: IDeltaHashProvider
  nameWithType: IDeltaHashProvider
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IDeltaHashProvider
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
    startLine: 34
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nThis service should be used by components which need to access the history of ledger state updates as\nthey get confirmed and appear on the Dfs, it provides access to a chronology of updates, as well as a\nlive stream of the updates.\n"
  example: []
  syntax:
    content: public interface IDeltaHashProvider
    content.vb: Public Interface IDeltaHashProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  id: TryUpdateLatestHash(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  langs:
  - csharp
  - vb
  name: TryUpdateLatestHash(MultiHash, MultiHash)
  nameWithType: IDeltaHashProvider.TryUpdateLatestHash(MultiHash, MultiHash)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash(TheDotNetLeague.MultiFormats.MultiHash.MultiHash, TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: TryUpdateLatestHash
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
    startLine: 49
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nCall this method to try and update the latest hash on the cache. This adds the new hash in memory, and if the cache is full,\nalso evicts the oldest hash from the cache.\n"
  example: []
  syntax:
    content: bool TryUpdateLatestHash(MultiHash previousHash, MultiHash newHash)
    parameters:
    - id: previousHash
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: The hash that is supposed to chronologically precede the new one.
    - id: newHash
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: The new and latest hash, which should replace <see cref="!:previousHash"></see>.
    return:
      type: System.Boolean
      description: >-
        <see>

        <cref>true</cref>

        </see>

        if the update was successful, <see>

        <cref>false</cref>

        </see>

        otherwise.
    content.vb: Function TryUpdateLatestHash(previousHash As MultiHash, newHash As MultiHash) As Boolean
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash*
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash(System.Nullable{System.DateTime})
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash(System.Nullable{System.DateTime})
  id: GetLatestDeltaHash(System.Nullable{System.DateTime})
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  langs:
  - csharp
  - vb
  name: GetLatestDeltaHash(Nullable<DateTime>)
  nameWithType: IDeltaHashProvider.GetLatestDeltaHash(Nullable<DateTime>)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash(System.Nullable<System.DateTime>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetLatestDeltaHash
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
    startLine: 56
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nRetrieve the latest ledger update, as seen from an optional point in time in the past.\n"
  example: []
  syntax:
    content: MultiHash GetLatestDeltaHash(DateTime? asOf = default(DateTime? ))
    parameters:
    - id: asOf
      type: System.Nullable{System.DateTime}
      description: An optional point in time in the past, if not provided, it will use <xref href="Catalyst.Abstractions.Consensus.IDateTimeProvider.UtcNow" data-throw-if-not-resolved="false"></xref>
    return:
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: The hash, or address on the DFS, of the latest ledger state update as a string, as returned in <xref href="Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream%2cSystem.String%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>
    content.vb: Function GetLatestDeltaHash(asOf As Date? = Nothing) As MultiHash
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash*
  nameWithType.vb: IDeltaHashProvider.GetLatestDeltaHash(Nullable(Of DateTime))
  fullName.vb: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash(System.Nullable(Of System.DateTime))
  name.vb: GetLatestDeltaHash(Nullable(Of DateTime))
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
  commentId: P:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
  id: DeltaHashUpdates
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider
  langs:
  - csharp
  - vb
  name: DeltaHashUpdates
  nameWithType: IDeltaHashProvider.DeltaHashUpdates
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DeltaHashUpdates
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaHashProvider.cs
    startLine: 61
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nSubscribe to these updates to get live notifications for the hashes of new deltas as they get published on the Dfs.\n"
  example: []
  syntax:
    content: IObservable<MultiHash> DeltaHashUpdates { get; }
    parameters: []
    return:
      type: System.IObservable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
    content.vb: ReadOnly Property DeltaHashUpdates As IObservable(Of MultiHash)
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Catalyst.Abstractions.Consensus.Deltas
  commentId: N:Catalyst.Abstractions.Consensus.Deltas
  name: Catalyst.Abstractions.Consensus.Deltas
  nameWithType: Catalyst.Abstractions.Consensus.Deltas
  fullName: Catalyst.Abstractions.Consensus.Deltas
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash
  name: TryUpdateLatestHash
  nameWithType: IDeltaHashProvider.TryUpdateLatestHash
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.TryUpdateLatestHash
- uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  commentId: T:TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  parent: TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: MultiHash
  nameWithType: MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TheDotNetLeague.MultiFormats.MultiHash
  commentId: N:TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: TheDotNetLeague.MultiFormats.MultiHash
  nameWithType: TheDotNetLeague.MultiFormats.MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Consensus.IDateTimeProvider.UtcNow
  commentId: P:Catalyst.Abstractions.Consensus.IDateTimeProvider.UtcNow
  isExternal: true
- uid: Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  isExternal: true
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash
  name: GetLatestDeltaHash
  nameWithType: IDeltaHashProvider.GetLatestDeltaHash
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.GetLatestDeltaHash
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
  name: DeltaHashUpdates
  nameWithType: IDeltaHashProvider.DeltaHashUpdates
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaHashProvider.DeltaHashUpdates
- uid: System.IObservable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
  commentId: T:System.IObservable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
  parent: System
  definition: System.IObservable`1
  name: IObservable<MultiHash>
  nameWithType: IObservable<MultiHash>
  fullName: System.IObservable<TheDotNetLeague.MultiFormats.MultiHash.MultiHash>
  nameWithType.vb: IObservable(Of MultiHash)
  fullName.vb: System.IObservable(Of TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  name.vb: IObservable(Of MultiHash)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    name: MultiHash
    nameWithType: MultiHash
    fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    name: MultiHash
    nameWithType: MultiHash
    fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
