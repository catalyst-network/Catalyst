### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader
  commentId: T:Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader
  id: IDeltaDfsReader
  parent: Catalyst.Abstractions.Consensus.Deltas
  children:
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs(LibP2P.Cid,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDeltaDfsReader
  nameWithType: IDeltaDfsReader
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaDfsReader.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IDeltaDfsReader
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaDfsReader.cs
    startLine: 32
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nProvides convenience method to read Delta from the Dfs.\n"
  example: []
  syntax:
    content: public interface IDeltaDfsReader
    content.vb: Public Interface IDeltaDfsReader
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs(LibP2P.Cid,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs(LibP2P.Cid,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  id: TryReadDeltaFromDfs(LibP2P.Cid,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader
  langs:
  - csharp
  - vb
  name: TryReadDeltaFromDfs(Cid, out Delta, CancellationToken)
  nameWithType: IDeltaDfsReader.TryReadDeltaFromDfs(Cid, out Delta, CancellationToken)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs(LibP2P.Cid, out Catalyst.Protocol.Deltas.Delta, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaDfsReader.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: TryReadDeltaFromDfs
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaDfsReader.cs
    startLine: 47
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nAsynchronously retrieves the content at the hash/address on the Dfs, and tries to parse it as a Delta.\n"
  example: []
  syntax:
    content: bool TryReadDeltaFromDfs(Cid cid, out Delta delta, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cid
      type: LibP2P.Cid
      description: The Cid or address of the delta on the Dfs.
    - id: delta
      type: Catalyst.Protocol.Deltas.Delta
      description: The retrieved delta.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token which can be used to interrupt the tasks.
    return:
      type: System.Boolean
      description: >-
        <see>

        <cref>true</cref>

        </see>

        if the retrieval was successful, <see>

        <cref>false</cref>

        </see>

        otherwise.
    content.vb: Function TryReadDeltaFromDfs(cid As Cid, ByRef delta As Delta, cancellationToken As CancellationToken = Nothing) As Boolean
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs*
  nameWithType.vb: IDeltaDfsReader.TryReadDeltaFromDfs(Cid, ByRef Delta, CancellationToken)
  fullName.vb: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs(LibP2P.Cid, ByRef Catalyst.Protocol.Deltas.Delta, System.Threading.CancellationToken)
  name.vb: TryReadDeltaFromDfs(Cid, ByRef Delta, CancellationToken)
references:
- uid: Catalyst.Abstractions.Consensus.Deltas
  commentId: N:Catalyst.Abstractions.Consensus.Deltas
  name: Catalyst.Abstractions.Consensus.Deltas
  nameWithType: Catalyst.Abstractions.Consensus.Deltas
  fullName: Catalyst.Abstractions.Consensus.Deltas
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs
  name: TryReadDeltaFromDfs
  nameWithType: IDeltaDfsReader.TryReadDeltaFromDfs
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaDfsReader.TryReadDeltaFromDfs
- uid: LibP2P.Cid
  commentId: T:LibP2P.Cid
  parent: LibP2P
  isExternal: true
  name: Cid
  nameWithType: Cid
  fullName: LibP2P.Cid
- uid: Catalyst.Protocol.Deltas.Delta
  commentId: T:Catalyst.Protocol.Deltas.Delta
  parent: Catalyst.Protocol.Deltas
  name: Delta
  nameWithType: Delta
  fullName: Catalyst.Protocol.Deltas.Delta
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: LibP2P
  commentId: N:LibP2P
  isExternal: true
  name: LibP2P
  nameWithType: LibP2P
  fullName: LibP2P
- uid: Catalyst.Protocol.Deltas
  commentId: N:Catalyst.Protocol.Deltas
  name: Catalyst.Protocol.Deltas
  nameWithType: Catalyst.Protocol.Deltas
  fullName: Catalyst.Protocol.Deltas
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
