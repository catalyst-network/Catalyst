### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Enumerator.Enumeration
  commentId: T:Catalyst.Abstractions.Enumerator.Enumeration
  id: Enumeration
  parent: Catalyst.Abstractions.Enumerator
  children:
  - Catalyst.Abstractions.Enumerator.Enumeration.#ctor(System.Int32,System.String)
  - Catalyst.Abstractions.Enumerator.Enumeration.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  - Catalyst.Abstractions.Enumerator.Enumeration.Equals(System.Object)
  - Catalyst.Abstractions.Enumerator.Enumeration.GetAll``1
  - Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode
  - Catalyst.Abstractions.Enumerator.Enumeration.Id
  - Catalyst.Abstractions.Enumerator.Enumeration.Name
  - Catalyst.Abstractions.Enumerator.Enumeration.op_Equality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  - Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit(Catalyst.Abstractions.Enumerator.Enumeration)~System.Int32
  - Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  - Catalyst.Abstractions.Enumerator.Enumeration.Parse``1(System.String,System.StringComparison)
  - Catalyst.Abstractions.Enumerator.Enumeration.ToString
  - Catalyst.Abstractions.Enumerator.Enumeration.TryParse``1(System.String,``0@,System.StringComparison)
  langs:
  - csharp
  - vb
  name: Enumeration
  nameWithType: Enumeration
  fullName: Catalyst.Abstractions.Enumerator.Enumeration
  type: Class
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Enumeration
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 35
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\">https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types</a>\n"
  example: []
  syntax:
    content: 'public class Enumeration : IEnumeration, IEquatable<Enumeration>'
    content.vb: >-
      Public Class Enumeration

          Implements IEnumeration, IEquatable(Of Enumeration)
  inheritance:
  - System.Object
  derivedClasses:
  - Catalyst.Abstractions.Types.AccountTypes
  - Catalyst.Abstractions.Types.FileTransferResponseCodeTypes
  - Catalyst.Abstractions.Types.KeyRegistryTypes
  - Catalyst.Abstractions.Types.MessageTypes
  - Catalyst.Abstractions.Types.ModuleTypes
  - Catalyst.Abstractions.Types.NeighbourStateTypes
  - Catalyst.Abstractions.Types.NetworkTypes
  - Catalyst.Abstractions.Types.PasswordRegistryTypes
  - Catalyst.Abstractions.Types.PeerMessageTypes
  - Catalyst.Abstractions.Types.ReputationEventType
  - Catalyst.Abstractions.Types.RpcMessages
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration
  - System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Catalyst.Abstractions.Enumerator.Enumeration.#ctor(System.Int32,System.String)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Enumeration(Int32, String)
  nameWithType: Enumeration.Enumeration(Int32, String)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Enumeration(System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 43
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n\n"
  example: []
  syntax:
    content: protected Enumeration(int id, string name)
    parameters:
    - id: id
      type: System.Int32
      description: ''
    - id: name
      type: System.String
      description: ''
    content.vb: Protected Sub New(id As Integer, name As String)
  overload: Catalyst.Abstractions.Enumerator.Enumeration.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Name
  commentId: P:Catalyst.Abstractions.Enumerator.Enumeration.Name
  id: Name
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Enumeration.Name
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Name
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Name
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 51
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Catalyst.Abstractions.Enumerator.Enumeration.Name*
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Id
  commentId: P:Catalyst.Abstractions.Enumerator.Enumeration.Id
  id: Id
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Enumeration.Id
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Id
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Id
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 52
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public int Id { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Id As Integer
  overload: Catalyst.Abstractions.Enumerator.Enumeration.Id*
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration.Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Catalyst.Abstractions.Enumerator.Enumeration.ToString
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.ToString
  id: ToString
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Enumeration.ToString()
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.ToString()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ToString
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 53
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Catalyst.Abstractions.Enumerator.Enumeration.ToString*
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Catalyst.Abstractions.Enumerator.Enumeration.TryParse``1(System.String,``0@,System.StringComparison)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.TryParse``1(System.String,``0@,System.StringComparison)
  id: TryParse``1(System.String,``0@,System.StringComparison)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: TryParse<T>(String, out T, StringComparison)
  nameWithType: Enumeration.TryParse<T>(String, out T, StringComparison)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.TryParse<T>(System.String, out T, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: TryParse
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 63
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public static bool TryParse<T>(string value, out T parsed, StringComparison comparison = StringComparison.InvariantCultureIgnoreCase)

          where T : Enumeration
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: parsed
      type: '{T}'
      description: ''
    - id: comparison
      type: System.StringComparison
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function TryParse(Of T As Enumeration)(value As String, ByRef parsed As T, comparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As Boolean
  overload: Catalyst.Abstractions.Enumerator.Enumeration.TryParse*
  nameWithType.vb: Enumeration.TryParse(Of T)(String, ByRef T, StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Abstractions.Enumerator.Enumeration.TryParse(Of T)(System.String, ByRef T, System.StringComparison)
  name.vb: TryParse(Of T)(String, ByRef T, StringComparison)
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Parse``1(System.String,System.StringComparison)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.Parse``1(System.String,System.StringComparison)
  id: Parse``1(System.String,System.StringComparison)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Parse<T>(String, StringComparison)
  nameWithType: Enumeration.Parse<T>(String, StringComparison)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Parse<T>(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Parse
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 85
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public static T Parse<T>(string value, StringComparison comparison = StringComparison.InvariantCultureIgnoreCase)

          where T : Enumeration
    parameters:
    - id: value
      type: System.String
      description: ''
    - id: comparison
      type: System.StringComparison
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function Parse(Of T As Enumeration)(value As String, comparison As StringComparison = StringComparison.InvariantCultureIgnoreCase) As T
  overload: Catalyst.Abstractions.Enumerator.Enumeration.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
  nameWithType.vb: Enumeration.Parse(Of T)(String, StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Abstractions.Enumerator.Enumeration.Parse(Of T)(System.String, System.StringComparison)
  name.vb: Parse(Of T)(String, StringComparison)
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit(Catalyst.Abstractions.Enumerator.Enumeration)~System.Int32
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit(Catalyst.Abstractions.Enumerator.Enumeration)~System.Int32
  id: op_Explicit(Catalyst.Abstractions.Enumerator.Enumeration)~System.Int32
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Explicit(Enumeration to Int32)
  nameWithType: Enumeration.Explicit(Enumeration to Int32)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Explicit(Catalyst.Abstractions.Enumerator.Enumeration to System.Int32)
  type: Operator
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: op_Explicit
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 106
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n\n"
  example: []
  syntax:
    content: public static explicit operator int (Enumeration enumeration)
    parameters:
    - id: enumeration
      type: Catalyst.Abstractions.Enumerator.Enumeration
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Shared Narrowing Operator CType(enumeration As Enumeration) As Integer
  overload: Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit*
  nameWithType.vb: Enumeration.Narrowing(Enumeration to Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Abstractions.Enumerator.Enumeration.Narrowing(Catalyst.Abstractions.Enumerator.Enumeration to System.Int32)
  name.vb: Narrowing(Enumeration to Int32)
- uid: Catalyst.Abstractions.Enumerator.Enumeration.GetAll``1
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.GetAll``1
  id: GetAll``1
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: GetAll<T>()
  nameWithType: Enumeration.GetAll<T>()
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.GetAll<T>()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetAll
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 116
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<T> GetAll<T>()

          where T : IEnumeration
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    content.vb: Public Shared Function GetAll(Of T As IEnumeration) As IEnumerable(Of T)
  overload: Catalyst.Abstractions.Enumerator.Enumeration.GetAll*
  nameWithType.vb: Enumeration.GetAll(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Abstractions.Enumerator.Enumeration.GetAll(Of T)()
  name.vb: GetAll(Of T)()
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  id: Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Equals(Enumeration)
  nameWithType: Enumeration.Equals(Enumeration)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Equals
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 127
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public bool Equals(Enumeration other)
    parameters:
    - id: other
      type: Catalyst.Abstractions.Enumerator.Enumeration
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Enumeration) As Boolean
  overload: Catalyst.Abstractions.Enumerator.Enumeration.Equals*
  implements:
  - System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Equals(System.Object)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.Equals(System.Object)
  id: Equals(System.Object)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Enumeration.Equals(Object)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Equals
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 129
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Catalyst.Abstractions.Enumerator.Enumeration.Equals*
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode
  id: GetHashCode
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Enumeration.GetHashCode()
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetHashCode
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 149
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode*
  implements:
  - Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Equality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.op_Equality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  id: op_Equality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Equality(Enumeration, Enumeration)
  nameWithType: Enumeration.Equality(Enumeration, Enumeration)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Equality(Catalyst.Abstractions.Enumerator.Enumeration, Catalyst.Abstractions.Enumerator.Enumeration)
  type: Operator
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: op_Equality
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 150
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public static bool operator ==(Enumeration left, Enumeration right)
    parameters:
    - id: left
      type: Catalyst.Abstractions.Enumerator.Enumeration
    - id: right
      type: Catalyst.Abstractions.Enumerator.Enumeration
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Enumeration, right As Enumeration) As Boolean
  overload: Catalyst.Abstractions.Enumerator.Enumeration.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  commentId: M:Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  id: op_Inequality(Catalyst.Abstractions.Enumerator.Enumeration,Catalyst.Abstractions.Enumerator.Enumeration)
  parent: Catalyst.Abstractions.Enumerator.Enumeration
  langs:
  - csharp
  - vb
  name: Inequality(Enumeration, Enumeration)
  nameWithType: Enumeration.Inequality(Enumeration, Enumeration)
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Inequality(Catalyst.Abstractions.Enumerator.Enumeration, Catalyst.Abstractions.Enumerator.Enumeration)
  type: Operator
  source:
    remote:
      path: src/Catalyst.Abstractions/Enumerator/Enumeration.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: op_Inequality
    path: ../src/Catalyst.Abstractions/Enumerator/Enumeration.cs
    startLine: 151
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Enumerator
  syntax:
    content: public static bool operator !=(Enumeration left, Enumeration right)
    parameters:
    - id: left
      type: Catalyst.Abstractions.Enumerator.Enumeration
    - id: right
      type: Catalyst.Abstractions.Enumerator.Enumeration
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Enumeration, right As Enumeration) As Boolean
  overload: Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Catalyst.Abstractions.Enumerator
  commentId: N:Catalyst.Abstractions.Enumerator
  name: Catalyst.Abstractions.Enumerator
  nameWithType: Catalyst.Abstractions.Enumerator
  fullName: Catalyst.Abstractions.Enumerator
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Enumerator.IEnumeration
  commentId: T:Catalyst.Abstractions.Enumerator.IEnumeration
  parent: Catalyst.Abstractions.Enumerator
  name: IEnumeration
  nameWithType: IEnumeration
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration
- uid: System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}
  commentId: T:System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Enumeration>
  nameWithType: IEquatable<Enumeration>
  fullName: System.IEquatable<Catalyst.Abstractions.Enumerator.Enumeration>
  nameWithType.vb: IEquatable(Of Enumeration)
  fullName.vb: System.IEquatable(Of Catalyst.Abstractions.Enumerator.Enumeration)
  name.vb: IEquatable(Of Enumeration)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Enumerator.Enumeration
    name: Enumeration
    nameWithType: Enumeration
    fullName: Catalyst.Abstractions.Enumerator.Enumeration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Enumerator.Enumeration
    name: Enumeration
    nameWithType: Enumeration
    fullName: Catalyst.Abstractions.Enumerator.Enumeration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.Enumeration.#ctor*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.#ctor
  name: Enumeration
  nameWithType: Enumeration.Enumeration
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Enumeration
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Name*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.Name
  name: Name
  nameWithType: Enumeration.Name
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Name
- uid: Catalyst.Abstractions.Enumerator.IEnumeration.Name
  commentId: P:Catalyst.Abstractions.Enumerator.IEnumeration.Name
  parent: Catalyst.Abstractions.Enumerator.IEnumeration
  name: Name
  nameWithType: IEnumeration.Name
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration.Name
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Id*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.Id
  name: Id
  nameWithType: Enumeration.Id
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Id
- uid: Catalyst.Abstractions.Enumerator.IEnumeration.Id
  commentId: P:Catalyst.Abstractions.Enumerator.IEnumeration.Id
  parent: Catalyst.Abstractions.Enumerator.IEnumeration
  name: Id
  nameWithType: IEnumeration.Id
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration.Id
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.Enumeration.ToString*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.ToString
  name: ToString
  nameWithType: Enumeration.ToString
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.ToString
- uid: Catalyst.Abstractions.Enumerator.IEnumeration.ToString
  commentId: M:Catalyst.Abstractions.Enumerator.IEnumeration.ToString
  parent: Catalyst.Abstractions.Enumerator.IEnumeration
  name: ToString()
  nameWithType: IEnumeration.ToString()
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration.ToString()
  spec.csharp:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.ToString
    name: ToString
    nameWithType: IEnumeration.ToString
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.ToString
    name: ToString
    nameWithType: IEnumeration.ToString
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.Enumeration.TryParse*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.TryParse
  name: TryParse
  nameWithType: Enumeration.TryParse
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.TryParse
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.FormatException
  commentId: T:System.FormatException
  isExternal: true
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Parse*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.Parse
  name: Parse
  nameWithType: Enumeration.Parse
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Parse
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.op_Explicit
  name: Explicit
  nameWithType: Enumeration.Explicit
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Explicit
  nameWithType.vb: Enumeration.Narrowing
  fullName.vb: Catalyst.Abstractions.Enumerator.Enumeration.Narrowing
  name.vb: Narrowing
- uid: Catalyst.Abstractions.Enumerator.Enumeration
  commentId: T:Catalyst.Abstractions.Enumerator.Enumeration
  parent: Catalyst.Abstractions.Enumerator
  name: Enumeration
  nameWithType: Enumeration
  fullName: Catalyst.Abstractions.Enumerator.Enumeration
- uid: Catalyst.Abstractions.Enumerator.Enumeration.GetAll*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.GetAll
  name: GetAll
  nameWithType: Enumeration.GetAll
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.GetAll
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Catalyst.Abstractions.Enumerator.Enumeration.Equals*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.Equals
  name: Equals
  nameWithType: Enumeration.Equals
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Equals
- uid: System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  commentId: M:System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  parent: System.IEquatable{Catalyst.Abstractions.Enumerator.Enumeration}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Enumeration)
  nameWithType: IEquatable<Enumeration>.Equals(Enumeration)
  fullName: System.IEquatable<Catalyst.Abstractions.Enumerator.Enumeration>.Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  nameWithType.vb: IEquatable(Of Enumeration).Equals(Enumeration)
  fullName.vb: System.IEquatable(Of Catalyst.Abstractions.Enumerator.Enumeration).Equals(Catalyst.Abstractions.Enumerator.Enumeration)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Enumeration>.Equals
    fullName: System.IEquatable<Catalyst.Abstractions.Enumerator.Enumeration>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Enumerator.Enumeration
    name: Enumeration
    nameWithType: Enumeration
    fullName: Catalyst.Abstractions.Enumerator.Enumeration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Enumeration).Equals
    fullName: System.IEquatable(Of Catalyst.Abstractions.Enumerator.Enumeration).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Enumerator.Enumeration
    name: Enumeration
    nameWithType: Enumeration
    fullName: Catalyst.Abstractions.Enumerator.Enumeration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
  commentId: M:Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
  parent: Catalyst.Abstractions.Enumerator.IEnumeration
  isExternal: true
  name: Equals(Object)
  nameWithType: IEnumeration.Equals(Object)
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
  spec.csharp:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
    name: Equals
    nameWithType: IEnumeration.Equals
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.Equals(System.Object)
    name: Equals
    nameWithType: IEnumeration.Equals
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode
  name: GetHashCode
  nameWithType: Enumeration.GetHashCode
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.GetHashCode
- uid: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
  commentId: M:Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
  parent: Catalyst.Abstractions.Enumerator.IEnumeration
  name: GetHashCode()
  nameWithType: IEnumeration.GetHashCode()
  fullName: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode()
  spec.csharp:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
    name: GetHashCode
    nameWithType: IEnumeration.GetHashCode
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
    name: GetHashCode
    nameWithType: IEnumeration.GetHashCode
    fullName: Catalyst.Abstractions.Enumerator.IEnumeration.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Equality*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.op_Equality
  name: Equality
  nameWithType: Enumeration.Equality
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Equality
- uid: Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality*
  commentId: Overload:Catalyst.Abstractions.Enumerator.Enumeration.op_Inequality
  name: Inequality
  nameWithType: Enumeration.Inequality
  fullName: Catalyst.Abstractions.Enumerator.Enumeration.Inequality
