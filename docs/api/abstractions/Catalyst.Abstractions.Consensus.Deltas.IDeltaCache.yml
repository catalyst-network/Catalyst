### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  commentId: T:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  id: IDeltaCache
  parent: Catalyst.Abstractions.Consensus.Deltas
  children:
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta)
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta@)
  - Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDeltaCache
  nameWithType: IDeltaCache
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IDeltaCache
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 33
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nThis service should be used to retrieve and cache Delta from the Dfs\n"
  example: []
  syntax:
    content: public interface IDeltaCache
    content.vb: Public Interface IDeltaCache
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  id: TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,Catalyst.Protocol.Deltas.Delta@,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  langs:
  - csharp
  - vb
  name: TryGetOrAddConfirmedDelta(MultiHash, out Delta, CancellationToken)
  nameWithType: IDeltaCache.TryGetOrAddConfirmedDelta(MultiHash, out Delta, CancellationToken)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash, out Catalyst.Protocol.Deltas.Delta, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: TryGetOrAddConfirmedDelta
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 45
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nAttempts to retrieve a delta which has already been confirmed by other producers\nfrom the local cache first, then, if the delta was not found there,\nthe retrieval is done from the Dfs and the delta is added to the local cache for\nlater use.\n"
  example: []
  syntax:
    content: bool TryGetOrAddConfirmedDelta(MultiHash hash, out Delta delta, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: hash
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: The hash or address of the delta on the Dfs.
    - id: delta
      type: Catalyst.Protocol.Deltas.Delta
      description: The delta retrieved on the Dfs.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A token allowing to cancel the task before it ends.
    return:
      type: System.Boolean
      description: <code>true</code> if the retrieval was successful, <code>false</code> otherwise.
    content.vb: Function TryGetOrAddConfirmedDelta(hash As MultiHash, ByRef delta As Delta, cancellationToken As CancellationToken = Nothing) As Boolean
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta*
  nameWithType.vb: IDeltaCache.TryGetOrAddConfirmedDelta(MultiHash, ByRef Delta, CancellationToken)
  fullName.vb: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta(TheDotNetLeague.MultiFormats.MultiHash.MultiHash, ByRef Catalyst.Protocol.Deltas.Delta, System.Threading.CancellationToken)
  name.vb: TryGetOrAddConfirmedDelta(MultiHash, ByRef Delta, CancellationToken)
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta@)
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta@)
  id: TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta@)
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  langs:
  - csharp
  - vb
  name: TryGetLocalDelta(CandidateDeltaBroadcast, out Delta)
  nameWithType: IDeltaCache.TryGetLocalDelta(CandidateDeltaBroadcast, out Delta)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast, out Catalyst.Protocol.Deltas.Delta)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: TryGetLocalDelta
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 57
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nAttempts to retrieve a local delta which was locally produced and stored in\ncache in case it was elected in a later phase of the cycle. If the delta is not found\nit is because the confirmed delta was not locally produced.\n"
  example: []
  syntax:
    content: bool TryGetLocalDelta(CandidateDeltaBroadcast candidate, out Delta delta)
    parameters:
    - id: candidate
      type: Catalyst.Protocol.Wire.CandidateDeltaBroadcast
      description: The candidate for which we want too retrieve the full content.
    - id: delta
      type: Catalyst.Protocol.Deltas.Delta
      description: The full delta content retrieved expected to be found on cache.
    return:
      type: System.Boolean
      description: <code>true</code> if the retrieval was successful, <code>false</code> otherwise.
    content.vb: Function TryGetLocalDelta(candidate As CandidateDeltaBroadcast, ByRef delta As Delta) As Boolean
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta*
  nameWithType.vb: IDeltaCache.TryGetLocalDelta(CandidateDeltaBroadcast, ByRef Delta)
  fullName.vb: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast, ByRef Catalyst.Protocol.Deltas.Delta)
  name.vb: TryGetLocalDelta(CandidateDeltaBroadcast, ByRef Delta)
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta)
  commentId: M:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta)
  id: AddLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast,Catalyst.Protocol.Deltas.Delta)
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  langs:
  - csharp
  - vb
  name: AddLocalDelta(CandidateDeltaBroadcast, Delta)
  nameWithType: IDeltaCache.AddLocalDelta(CandidateDeltaBroadcast, Delta)
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta(Catalyst.Protocol.Wire.CandidateDeltaBroadcast, Catalyst.Protocol.Deltas.Delta)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddLocalDelta
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 66
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nStores a locally produced delta, with Hash of the corresponding candidate as a key.\nThis allows for later retrieval of the full content of the delta if the candidate gets\nconfirmed.\n"
  example: []
  syntax:
    content: void AddLocalDelta(CandidateDeltaBroadcast localCandidate, Delta delta)
    parameters:
    - id: localCandidate
      type: Catalyst.Protocol.Wire.CandidateDeltaBroadcast
      description: The candidate produced locally (<see cref="!:IDeltaBuilder.BuildCandidateDelta(byte[])"></see>>)
    - id: delta
      type: Catalyst.Protocol.Deltas.Delta
      description: The full content of the produced delta.
    content.vb: Sub AddLocalDelta(localCandidate As CandidateDeltaBroadcast, delta As Delta)
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta*
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
  commentId: P:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
  id: GenesisHash
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  langs:
  - csharp
  - vb
  name: GenesisHash
  nameWithType: IDeltaCache.GenesisHash
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GenesisHash
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 71
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  summary: "\nDfs address of the content for the very first delta.\n"
  example: []
  syntax:
    content: MultiHash GenesisHash { get; set; }
    parameters: []
    return:
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    content.vb: Property GenesisHash As MultiHash
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash*
  modifiers.csharp:
  - get
  - set
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
  commentId: P:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
  id: GenesisAddress
  parent: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  langs:
  - csharp
  - vb
  name: GenesisAddress
  nameWithType: IDeltaCache.GenesisAddress
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GenesisAddress
    path: ../src/Catalyst.Abstractions/Consensus/Deltas/IDeltaCache.cs
    startLine: 73
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Consensus.Deltas
  syntax:
    content: string GenesisAddress { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property GenesisAddress As String
  overload: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Catalyst.Abstractions.Consensus.Deltas
  commentId: N:Catalyst.Abstractions.Consensus.Deltas
  name: Catalyst.Abstractions.Consensus.Deltas
  nameWithType: Catalyst.Abstractions.Consensus.Deltas
  fullName: Catalyst.Abstractions.Consensus.Deltas
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta
  name: TryGetOrAddConfirmedDelta
  nameWithType: IDeltaCache.TryGetOrAddConfirmedDelta
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetOrAddConfirmedDelta
- uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  commentId: T:TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  parent: TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: MultiHash
  nameWithType: MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
- uid: Catalyst.Protocol.Deltas.Delta
  commentId: T:Catalyst.Protocol.Deltas.Delta
  parent: Catalyst.Protocol.Deltas
  name: Delta
  nameWithType: Delta
  fullName: Catalyst.Protocol.Deltas.Delta
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TheDotNetLeague.MultiFormats.MultiHash
  commentId: N:TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: TheDotNetLeague.MultiFormats.MultiHash
  nameWithType: TheDotNetLeague.MultiFormats.MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash
- uid: Catalyst.Protocol.Deltas
  commentId: N:Catalyst.Protocol.Deltas
  name: Catalyst.Protocol.Deltas
  nameWithType: Catalyst.Protocol.Deltas
  fullName: Catalyst.Protocol.Deltas
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta
  name: TryGetLocalDelta
  nameWithType: IDeltaCache.TryGetLocalDelta
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.TryGetLocalDelta
- uid: Catalyst.Protocol.Wire.CandidateDeltaBroadcast
  commentId: T:Catalyst.Protocol.Wire.CandidateDeltaBroadcast
  parent: Catalyst.Protocol.Wire
  name: CandidateDeltaBroadcast
  nameWithType: CandidateDeltaBroadcast
  fullName: Catalyst.Protocol.Wire.CandidateDeltaBroadcast
- uid: Catalyst.Protocol.Wire
  commentId: N:Catalyst.Protocol.Wire
  name: Catalyst.Protocol.Wire
  nameWithType: Catalyst.Protocol.Wire
  fullName: Catalyst.Protocol.Wire
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta
  name: AddLocalDelta
  nameWithType: IDeltaCache.AddLocalDelta
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.AddLocalDelta
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
  name: GenesisHash
  nameWithType: IDeltaCache.GenesisHash
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisHash
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress*
  commentId: Overload:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
  name: GenesisAddress
  nameWithType: IDeltaCache.GenesisAddress
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache.GenesisAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
