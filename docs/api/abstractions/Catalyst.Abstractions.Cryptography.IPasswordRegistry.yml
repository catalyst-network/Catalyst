### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Cryptography.IPasswordRegistry
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordRegistry
  id: IPasswordRegistry
  parent: Catalyst.Abstractions.Cryptography
  children: []
  langs:
  - csharp
  - vb
  name: IPasswordRegistry
  nameWithType: IPasswordRegistry
  fullName: Catalyst.Abstractions.Cryptography.IPasswordRegistry
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Cryptography/IPasswordRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IPasswordRegistry
    path: ../src/Catalyst.Abstractions/Cryptography/IPasswordRegistry.cs
    startLine: 29
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Cryptography
  syntax:
    content: 'public interface IPasswordRegistry : IRegistryBase<PasswordRegistryTypes, SecureString>, IDisposable'
    content.vb: >-
      Public Interface IPasswordRegistry

          Inherits IRegistryBase(Of PasswordRegistryTypes, SecureString)
  inheritedMembers:
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
references:
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(PasswordRegistryTypes, SecureString)
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.AddItemToRegistry(PasswordRegistryTypes, SecureString)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString).AddItemToRegistry(PasswordRegistryTypes, SecureString)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of PasswordRegistryTypes, SecureString).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(PasswordRegistryTypes)
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.GetItemFromRegistry(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString).GetItemFromRegistry(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of PasswordRegistryTypes, SecureString).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(PasswordRegistryTypes)
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.RegistryContainsKey(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString).RegistryContainsKey(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of PasswordRegistryTypes, SecureString).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(PasswordRegistryTypes)
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.RemoveItemFromRegistry(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString).RemoveItemFromRegistry(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of PasswordRegistryTypes, SecureString).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  parent: Catalyst.Abstractions.Registry
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<PasswordRegistryTypes, SecureString>
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  name.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of TKey, TValue).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry
  commentId: N:Catalyst.Abstractions.Registry
  name: Catalyst.Abstractions.Registry
  nameWithType: Catalyst.Abstractions.Registry
  fullName: Catalyst.Abstractions.Registry
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
