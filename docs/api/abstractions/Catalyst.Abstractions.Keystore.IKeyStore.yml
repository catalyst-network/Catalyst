### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Keystore.IKeyStore
  commentId: T:Catalyst.Abstractions.Keystore.IKeyStore
  id: IKeyStore
  parent: Catalyst.Abstractions.Keystore
  children:
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  langs:
  - csharp
  - vb
  name: IKeyStore
  nameWithType: IKeyStore
  fullName: Catalyst.Abstractions.Keystore.IKeyStore
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeystore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IKeyStore
    path: ../src/Catalyst.Abstractions/Keystore/IKeystore.cs
    startLine: 29
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  syntax:
    content: public interface IKeyStore
    content.vb: Public Interface IKeyStore
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreDecrypt(KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreDecrypt(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeystore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreDecrypt
    path: ../src/Catalyst.Abstractions/Keystore/IKeystore.cs
    startLine: 31
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  syntax:
    content: IPrivateKey KeyStoreDecrypt(KeyRegistryTypes keyIdentifier)
    parameters:
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
    content.vb: Function KeyStoreDecrypt(keyIdentifier As KeyRegistryTypes) As IPrivateKey
  overload: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt*
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreGenerate(KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreGenerate(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeystore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreGenerate
    path: ../src/Catalyst.Abstractions/Keystore/IKeystore.cs
    startLine: 33
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  syntax:
    content: Task<IPrivateKey> KeyStoreGenerate(KeyRegistryTypes keyIdentifier)
    parameters:
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
    content.vb: Function KeyStoreGenerate(keyIdentifier As KeyRegistryTypes) As Task(Of IPrivateKey)
  overload: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate*
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey, Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeystore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreEncryptAsync
    path: ../src/Catalyst.Abstractions/Keystore/IKeystore.cs
    startLine: 35
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  syntax:
    content: Task KeyStoreEncryptAsync(IPrivateKey privateKey, KeyRegistryTypes keyIdentifier)
    parameters:
    - id: privateKey
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function KeyStoreEncryptAsync(privateKey As IPrivateKey, keyIdentifier As KeyRegistryTypes) As Task
  overload: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync*
references:
- uid: Catalyst.Abstractions.Keystore
  commentId: N:Catalyst.Abstractions.Keystore
  name: Catalyst.Abstractions.Keystore
  nameWithType: Catalyst.Abstractions.Keystore
  fullName: Catalyst.Abstractions.Keystore
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt*
  commentId: Overload:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt
  name: KeyStoreDecrypt
  nameWithType: IKeyStore.KeyStoreDecrypt
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt
- uid: Catalyst.Abstractions.Types.KeyRegistryTypes
  commentId: T:Catalyst.Abstractions.Types.KeyRegistryTypes
  parent: Catalyst.Abstractions.Types
  name: KeyRegistryTypes
  nameWithType: KeyRegistryTypes
  fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
- uid: Catalyst.Abstractions.Cryptography.IPrivateKey
  commentId: T:Catalyst.Abstractions.Cryptography.IPrivateKey
  parent: Catalyst.Abstractions.Cryptography
  name: IPrivateKey
  nameWithType: IPrivateKey
  fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
- uid: Catalyst.Abstractions.Types
  commentId: N:Catalyst.Abstractions.Types
  name: Catalyst.Abstractions.Types
  nameWithType: Catalyst.Abstractions.Types
  fullName: Catalyst.Abstractions.Types
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate*
  commentId: Overload:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate
  name: KeyStoreGenerate
  nameWithType: IKeyStore.KeyStoreGenerate
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate
- uid: System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
  commentId: T:System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPrivateKey>
  nameWithType: Task<IPrivateKey>
  fullName: System.Threading.Tasks.Task<Catalyst.Abstractions.Cryptography.IPrivateKey>
  nameWithType.vb: Task(Of IPrivateKey)
  fullName.vb: System.Threading.Tasks.Task(Of Catalyst.Abstractions.Cryptography.IPrivateKey)
  name.vb: Task(Of IPrivateKey)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync*
  commentId: Overload:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync
  name: KeyStoreEncryptAsync
  nameWithType: IKeyStore.KeyStoreEncryptAsync
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
