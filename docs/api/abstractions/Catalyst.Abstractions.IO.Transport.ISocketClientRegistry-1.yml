### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  commentId: T:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  id: ISocketClientRegistry`1
  parent: Catalyst.Abstractions.IO.Transport
  children:
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry(System.Int32,`0)
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode(System.Net.IPEndPoint)
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry(System.Int32)
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry
  - Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry(System.Int32)
  langs:
  - csharp
  - vb
  name: ISocketClientRegistry<TSocketChannel>
  nameWithType: ISocketClientRegistry<TSocketChannel>
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ISocketClientRegistry
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 30
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  syntax:
    content: >-
      public interface ISocketClientRegistry<TSocketChannel>

          where TSocketChannel : class, ISocketClient
    typeParameters:
    - id: TSocketChannel
    content.vb: Public Interface ISocketClientRegistry(Of TSocketChannel As {Class, ISocketClient})
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel)
  name.vb: ISocketClientRegistry(Of TSocketChannel)
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream
  commentId: P:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream
  id: EventStream
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: EventStream
  nameWithType: ISocketClientRegistry<TSocketChannel>.EventStream
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.EventStream
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: EventStream
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 32
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  syntax:
    content: IObservable<ISocketClientRegistryEvent> EventStream { get; }
    parameters: []
    return:
      type: System.IObservable{Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent}
    content.vb: ReadOnly Property EventStream As IObservable(Of ISocketClientRegistryEvent)
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).EventStream
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).EventStream
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry
  commentId: P:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry
  id: Registry
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: Registry
  nameWithType: ISocketClientRegistry<TSocketChannel>.Registry
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.Registry
  type: Property
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Registry
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 34
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  syntax:
    content: IDictionary<int, TSocketChannel> Registry { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Int32,{TSocketChannel}}
    content.vb: ReadOnly Property Registry As IDictionary(Of Integer, TSocketChannel)
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).Registry
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).Registry
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode(System.Net.IPEndPoint)
  commentId: M:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode(System.Net.IPEndPoint)
  id: GenerateClientHashCode(System.Net.IPEndPoint)
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: GenerateClientHashCode(IPEndPoint)
  nameWithType: ISocketClientRegistry<TSocketChannel>.GenerateClientHashCode(IPEndPoint)
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GenerateClientHashCode(System.Net.IPEndPoint)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GenerateClientHashCode
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 41
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  summary: "\nGenerates a hashcode from the socket endpoint so we can find it in dict.\n"
  example: []
  syntax:
    content: int GenerateClientHashCode(IPEndPoint socketEndpoint)
    parameters:
    - id: socketEndpoint
      type: System.Net.IPEndPoint
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Function GenerateClientHashCode(socketEndpoint As IPEndPoint) As Integer
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GenerateClientHashCode(IPEndPoint)
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GenerateClientHashCode(System.Net.IPEndPoint)
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry(System.Int32,`0)
  commentId: M:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry(System.Int32,`0)
  id: AddClientToRegistry(System.Int32,`0)
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: AddClientToRegistry(Int32, TSocketChannel)
  nameWithType: ISocketClientRegistry<TSocketChannel>.AddClientToRegistry(Int32, TSocketChannel)
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.AddClientToRegistry(System.Int32, TSocketChannel)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddClientToRegistry
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 49
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  summary: "\nAdds an active ISocketClient to the registry.\n"
  example: []
  syntax:
    content: bool AddClientToRegistry(int socketHashCode, TSocketChannel socket)
    parameters:
    - id: socketHashCode
      type: System.Int32
      description: ''
    - id: socket
      type: '{TSocketChannel}'
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function AddClientToRegistry(socketHashCode As Integer, socket As TSocketChannel) As Boolean
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).AddClientToRegistry(Int32, TSocketChannel)
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).AddClientToRegistry(System.Int32, TSocketChannel)
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry(System.Int32)
  commentId: M:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry(System.Int32)
  id: GetClientFromRegistry(System.Int32)
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: GetClientFromRegistry(Int32)
  nameWithType: ISocketClientRegistry<TSocketChannel>.GetClientFromRegistry(Int32)
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GetClientFromRegistry(System.Int32)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetClientFromRegistry
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 57
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  summary: "\nTries to get a socket client from registry.\n"
  example: []
  syntax:
    content: TSocketChannel GetClientFromRegistry(int socketHashCode)
    parameters:
    - id: socketHashCode
      type: System.Int32
      description: ''
    return:
      type: '{TSocketChannel}'
      description: ''
    content.vb: Function GetClientFromRegistry(socketHashCode As Integer) As TSocketChannel
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GetClientFromRegistry(Int32)
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GetClientFromRegistry(System.Int32)
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry(System.Int32)
  commentId: M:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry(System.Int32)
  id: RemoveClientFromRegistry(System.Int32)
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: RemoveClientFromRegistry(Int32)
  nameWithType: ISocketClientRegistry<TSocketChannel>.RemoveClientFromRegistry(Int32)
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.RemoveClientFromRegistry(System.Int32)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RemoveClientFromRegistry
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 64
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  summary: "\nRemoves a ISocketClient from registry.\n"
  example: []
  syntax:
    content: bool RemoveClientFromRegistry(int socketHashCode)
    parameters:
    - id: socketHashCode
      type: System.Int32
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function RemoveClientFromRegistry(socketHashCode As Integer) As Boolean
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).RemoveClientFromRegistry(Int32)
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).RemoveClientFromRegistry(System.Int32)
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType
  commentId: M:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType
  id: GetRegistryType
  parent: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1
  langs:
  - csharp
  - vb
  name: GetRegistryType()
  nameWithType: ISocketClientRegistry<TSocketChannel>.GetRegistryType()
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GetRegistryType()
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetRegistryType
    path: ../src/Catalyst.Abstractions/IO/Transport/ISocketClientRegistry.cs
    startLine: 66
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.IO.Transport
  syntax:
    content: string GetRegistryType()
    return:
      type: System.String
    content.vb: Function GetRegistryType As String
  overload: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType*
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GetRegistryType()
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GetRegistryType()
references:
- uid: Catalyst.Abstractions.IO.Transport
  commentId: N:Catalyst.Abstractions.IO.Transport
  name: Catalyst.Abstractions.IO.Transport
  nameWithType: Catalyst.Abstractions.IO.Transport
  fullName: Catalyst.Abstractions.IO.Transport
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.EventStream
  name: EventStream
  nameWithType: ISocketClientRegistry<TSocketChannel>.EventStream
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.EventStream
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).EventStream
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).EventStream
- uid: System.IObservable{Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent}
  commentId: T:System.IObservable{Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent}
  parent: System
  definition: System.IObservable`1
  name: IObservable<ISocketClientRegistryEvent>
  nameWithType: IObservable<ISocketClientRegistryEvent>
  fullName: System.IObservable<Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent>
  nameWithType.vb: IObservable(Of ISocketClientRegistryEvent)
  fullName.vb: System.IObservable(Of Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent)
  name.vb: IObservable(Of ISocketClientRegistryEvent)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent
    name: ISocketClientRegistryEvent
    nameWithType: ISocketClientRegistryEvent
    fullName: Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent
    name: ISocketClientRegistryEvent
    nameWithType: ISocketClientRegistryEvent
    fullName: Catalyst.Abstractions.IO.Events.ISocketClientRegistryEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.Registry
  name: Registry
  nameWithType: ISocketClientRegistry<TSocketChannel>.Registry
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.Registry
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).Registry
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).Registry
- uid: System.Collections.Generic.IDictionary{System.Int32,{TSocketChannel}}
  commentId: T:System.Collections.Generic.IDictionary{System.Int32,`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Int32, TSocketChannel>
  nameWithType: IDictionary<Int32, TSocketChannel>
  fullName: System.Collections.Generic.IDictionary<System.Int32, TSocketChannel>
  nameWithType.vb: IDictionary(Of Int32, TSocketChannel)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.Int32, TSocketChannel)
  name.vb: IDictionary(Of Int32, TSocketChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSocketChannel
    nameWithType: TSocketChannel
    fullName: TSocketChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSocketChannel
    nameWithType: TSocketChannel
    fullName: TSocketChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GenerateClientHashCode
  name: GenerateClientHashCode
  nameWithType: ISocketClientRegistry<TSocketChannel>.GenerateClientHashCode
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GenerateClientHashCode
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GenerateClientHashCode
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GenerateClientHashCode
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.AddClientToRegistry
  name: AddClientToRegistry
  nameWithType: ISocketClientRegistry<TSocketChannel>.AddClientToRegistry
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.AddClientToRegistry
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).AddClientToRegistry
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).AddClientToRegistry
- uid: '{TSocketChannel}'
  commentId: '!:TSocketChannel'
  definition: TSocketChannel
  name: TSocketChannel
  nameWithType: TSocketChannel
  fullName: TSocketChannel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TSocketChannel
  name: TSocketChannel
  nameWithType: TSocketChannel
  fullName: TSocketChannel
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetClientFromRegistry
  name: GetClientFromRegistry
  nameWithType: ISocketClientRegistry<TSocketChannel>.GetClientFromRegistry
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GetClientFromRegistry
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GetClientFromRegistry
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GetClientFromRegistry
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.RemoveClientFromRegistry
  name: RemoveClientFromRegistry
  nameWithType: ISocketClientRegistry<TSocketChannel>.RemoveClientFromRegistry
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.RemoveClientFromRegistry
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).RemoveClientFromRegistry
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).RemoveClientFromRegistry
- uid: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType*
  commentId: Overload:Catalyst.Abstractions.IO.Transport.ISocketClientRegistry`1.GetRegistryType
  name: GetRegistryType
  nameWithType: ISocketClientRegistry<TSocketChannel>.GetRegistryType
  fullName: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry<TSocketChannel>.GetRegistryType
  nameWithType.vb: ISocketClientRegistry(Of TSocketChannel).GetRegistryType
  fullName.vb: Catalyst.Abstractions.IO.Transport.ISocketClientRegistry(Of TSocketChannel).GetRegistryType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
