### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase`2
  id: IRegistryBase`2
  parent: Catalyst.Abstractions.Registry
  children:
  - Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  - Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  - Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  - Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  langs:
  - csharp
  - vb
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/IRegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IRegistryBase
    path: ../src/Catalyst.Abstractions/Registry/IRegistryBase.cs
    startLine: 27
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: 'public interface IRegistryBase<in TKey, TValue> : IDisposable'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public Interface IRegistryBase(Of In TKey, TValue)

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  id: AddItemToRegistry(`0,`1)
  parent: Catalyst.Abstractions.Registry.IRegistryBase`2
  langs:
  - csharp
  - vb
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/IRegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddItemToRegistry
    path: ../src/Catalyst.Abstractions/Registry/IRegistryBase.cs
    startLine: 29
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: bool AddItemToRegistry(TKey identifier, TValue item)
    parameters:
    - id: identifier
      type: '{TKey}'
    - id: item
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Function AddItemToRegistry(identifier As TKey, item As TValue) As Boolean
  overload: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry*
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  id: GetItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase`2
  langs:
  - csharp
  - vb
  name: GetItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/IRegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetItemFromRegistry
    path: ../src/Catalyst.Abstractions/Registry/IRegistryBase.cs
    startLine: 31
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: TValue GetItemFromRegistry(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Function GetItemFromRegistry(identifier As TKey) As TValue
  overload: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry*
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  id: RegistryContainsKey(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase`2
  langs:
  - csharp
  - vb
  name: RegistryContainsKey(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/IRegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RegistryContainsKey
    path: ../src/Catalyst.Abstractions/Registry/IRegistryBase.cs
    startLine: 33
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: bool RegistryContainsKey(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Function RegistryContainsKey(identifier As TKey) As Boolean
  overload: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey*
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  id: RemoveItemFromRegistry(`0)
  parent: Catalyst.Abstractions.Registry.IRegistryBase`2
  langs:
  - csharp
  - vb
  name: RemoveItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Registry/IRegistryBase.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RemoveItemFromRegistry
    path: ../src/Catalyst.Abstractions/Registry/IRegistryBase.cs
    startLine: 35
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Registry
  syntax:
    content: bool RemoveItemFromRegistry(TKey identifier)
    parameters:
    - id: identifier
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Function RemoveItemFromRegistry(identifier As TKey) As Boolean
  overload: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry*
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
references:
- uid: Catalyst.Abstractions.Registry
  commentId: N:Catalyst.Abstractions.Registry
  name: Catalyst.Abstractions.Registry
  nameWithType: Catalyst.Abstractions.Registry
  fullName: Catalyst.Abstractions.Registry
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry
  name: AddItemToRegistry
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry
  name: GetItemFromRegistry
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey*
  commentId: Overload:Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey
  name: RegistryContainsKey
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry*
  commentId: Overload:Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry
  name: RemoveItemFromRegistry
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
