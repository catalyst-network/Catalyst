### YamlMime:ManagedReference
items:
- uid: Catalyst.Abstractions.Keystore.IKeyRegistry
  commentId: T:Catalyst.Abstractions.Keystore.IKeyRegistry
  id: IKeyRegistry
  parent: Catalyst.Abstractions.Keystore
  children:
  - Catalyst.Abstractions.Keystore.IKeyRegistry.Contains(System.Byte[])
  langs:
  - csharp
  - vb
  name: IKeyRegistry
  nameWithType: IKeyRegistry
  fullName: Catalyst.Abstractions.Keystore.IKeyRegistry
  type: Interface
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeyRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IKeyRegistry
    path: ../src/Catalyst.Abstractions/Keystore/IKeyRegistry.cs
    startLine: 29
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  syntax:
    content: 'public interface IKeyRegistry : IRegistryBase<KeyRegistryTypes, IPrivateKey>, IDisposable'
    content.vb: >-
      Public Interface IKeyRegistry

          Inherits IRegistryBase(Of KeyRegistryTypes, IPrivateKey)
  inheritedMembers:
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.AddItemToRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.GetItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RegistryContainsKey(Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains(System.Byte[])
  commentId: M:Catalyst.Abstractions.Keystore.IKeyRegistry.Contains(System.Byte[])
  id: Contains(System.Byte[])
  parent: Catalyst.Abstractions.Keystore.IKeyRegistry
  langs:
  - csharp
  - vb
  name: Contains(Byte[])
  nameWithType: IKeyRegistry.Contains(Byte[])
  fullName: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Catalyst.Abstractions/Keystore/IKeyRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Contains
    path: ../src/Catalyst.Abstractions/Keystore/IKeyRegistry.cs
    startLine: 33
  assemblies:
  - Catalyst.Abstractions
  namespace: Catalyst.Abstractions.Keystore
  summary: Determines whether this instance contains the public key.
  example: []
  syntax:
    content: bool Contains(byte[] publicKeyBytes)
    parameters:
    - id: publicKeyBytes
      type: System.Byte[]
    return:
      type: System.Boolean
      description: <code>true</code> if [contains] [the specified public key]; otherwise, <code>false</code>.
    content.vb: Function Contains(publicKeyBytes As Byte()) As Boolean
  overload: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains*
  nameWithType.vb: IKeyRegistry.Contains(Byte())
  fullName.vb: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains(System.Byte())
  name.vb: Contains(Byte())
references:
- uid: Catalyst.Abstractions.Keystore
  commentId: N:Catalyst.Abstractions.Keystore
  name: Catalyst.Abstractions.Keystore
  nameWithType: Catalyst.Abstractions.Keystore
  fullName: Catalyst.Abstractions.Keystore
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.AddItemToRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.AddItemToRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(KeyRegistryTypes, IPrivateKey)
  nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.AddItemToRegistry(KeyRegistryTypes, IPrivateKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.AddItemToRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey)
  nameWithType.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).AddItemToRegistry(KeyRegistryTypes, IPrivateKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).AddItemToRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.GetItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.GetItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(KeyRegistryTypes)
  nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.GetItemFromRegistry(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.GetItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  nameWithType.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).GetItemFromRegistry(KeyRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).GetItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RegistryContainsKey(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RegistryContainsKey(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(KeyRegistryTypes)
  nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.RegistryContainsKey(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.RegistryContainsKey(Catalyst.Abstractions.Types.KeyRegistryTypes)
  nameWithType.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).RegistryContainsKey(KeyRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).RegistryContainsKey(Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(KeyRegistryTypes)
  nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.RemoveItemFromRegistry(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.RemoveItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  nameWithType.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).RemoveItemFromRegistry(KeyRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).RemoveItemFromRegistry(Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of KeyRegistryTypes, IPrivateKey).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase<TKey, TValue>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.KeyRegistryTypes,Catalyst.Abstractions.Cryptography.IPrivateKey}
  parent: Catalyst.Abstractions.Registry
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<KeyRegistryTypes, IPrivateKey>
  nameWithType: IRegistryBase<KeyRegistryTypes, IPrivateKey>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey>
  nameWithType.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.KeyRegistryTypes, Catalyst.Abstractions.Cryptography.IPrivateKey)
  name.vb: IRegistryBase(Of KeyRegistryTypes, IPrivateKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase<TKey, TValue>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: IRegistryBase(Of TKey, TValue).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(TKey)
  nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  nameWithType.vb: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry
  commentId: N:Catalyst.Abstractions.Registry
  name: Catalyst.Abstractions.Registry
  nameWithType: Catalyst.Abstractions.Registry
  fullName: Catalyst.Abstractions.Registry
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains*
  commentId: Overload:Catalyst.Abstractions.Keystore.IKeyRegistry.Contains
  name: Contains
  nameWithType: IKeyRegistry.Contains
  fullName: Catalyst.Abstractions.Keystore.IKeyRegistry.Contains
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
