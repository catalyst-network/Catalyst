### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Dfs.DevDfs
  commentId: T:Catalyst.Core.Modules.Dfs.DevDfs
  id: DevDfs
  parent: Catalyst.Core.Modules.Dfs
  children:
  - Catalyst.Core.Modules.Dfs.DevDfs.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,System.String)
  - Catalyst.Core.Modules.Dfs.DevDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  - Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  - Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  - Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: DevDfs
  nameWithType: DevDfs
  fullName: Catalyst.Core.Modules.Dfs.DevDfs
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DevDfs
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 48
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  summary: "\nA very naive implementation of the IDfs interface that simply relies on the file system.\nThis can only result in a &apos;Distributed&apos; file system if the <xref href=\"Catalyst.Core.Modules.Dfs.DevDfs._baseFolder\" data-throw-if-not-resolved=\"false\"></xref> happens\nto be shared network path. Otherwise, this can be used in integration tests, to ensure\nthe tests can be run locally and offline.\n"
  remarks: "\nThe hashing algorithm is also a simple one (<see cref=\"!:BLAKE2B_32\"></see>>) to save time\nin integration tests\n"
  example: []
  syntax:
    content: 'public class DevDfs : IDfs'
    content.vb: >-
      Public Class DevDfs

          Implements IDfs
  inheritance:
  - System.Object
  implements:
  - Catalyst.Abstractions.Dfs.IDfs
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Catalyst.Core.Modules.Dfs.DevDfs.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,System.String)
  commentId: M:Catalyst.Core.Modules.Dfs.DevDfs.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,System.String)
  id: '#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,System.String)'
  parent: Catalyst.Core.Modules.Dfs.DevDfs
  langs:
  - csharp
  - vb
  name: DevDfs(IFileSystem, IHashProvider, String)
  nameWithType: DevDfs.DevDfs(IFileSystem, IHashProvider, String)
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.DevDfs(Catalyst.Abstractions.FileSystem.IFileSystem, Catalyst.Abstractions.Hashing.IHashProvider, System.String)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 54
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  syntax:
    content: public DevDfs(IFileSystem fileSystem, IHashProvider hashProvider, string baseFolder = null)
    parameters:
    - id: fileSystem
      type: Catalyst.Abstractions.FileSystem.IFileSystem
    - id: hashProvider
      type: Catalyst.Abstractions.Hashing.IHashProvider
    - id: baseFolder
      type: System.String
    content.vb: Public Sub New(fileSystem As IFileSystem, hashProvider As IHashProvider, baseFolder As String = Nothing)
  overload: Catalyst.Core.Modules.Dfs.DevDfs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  id: AddTextAsync(System.String,System.Threading.CancellationToken)
  parent: Catalyst.Core.Modules.Dfs.DevDfs
  langs:
  - csharp
  - vb
  name: AddTextAsync(String, CancellationToken)
  nameWithType: DevDfs.AddTextAsync(String, CancellationToken)
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddTextAsync
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 77
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  example: []
  syntax:
    content: public Task<Cid> AddTextAsync(string utf8Content, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: utf8Content
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LibP2P.Cid}
    content.vb: Public Function AddTextAsync(utf8Content As String, cancellationToken As CancellationToken = Nothing) As Task(Of Cid)
  overload: Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync*
  implements:
  - Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  id: ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  parent: Catalyst.Core.Modules.Dfs.DevDfs
  langs:
  - csharp
  - vb
  name: ReadTextAsync(Cid, CancellationToken)
  nameWithType: DevDfs.ReadTextAsync(Cid, CancellationToken)
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync(LibP2P.Cid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ReadTextAsync
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 90
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  example: []
  syntax:
    content: public Task<string> ReadTextAsync(Cid cid, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cid
      type: LibP2P.Cid
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function ReadTextAsync(cid As Cid, cancellationToken As CancellationToken = Nothing) As Task(Of String)
  overload: Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync*
  implements:
  - Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Dfs.DevDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Modules.Dfs.DevDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  id: AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  parent: Catalyst.Core.Modules.Dfs.DevDfs
  langs:
  - csharp
  - vb
  name: AddAsync(Stream, String, CancellationToken)
  nameWithType: DevDfs.AddAsync(Stream, String, CancellationToken)
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.AddAsync(System.IO.Stream, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddAsync
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 98
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  example: []
  syntax:
    content: public Task<Cid> AddAsync(Stream content, string name = "", CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: content
      type: System.IO.Stream
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{LibP2P.Cid}
    content.vb: Public Function AddAsync(content As Stream, name As String = "", cancellationToken As CancellationToken = Nothing) As Task(Of Cid)
  overload: Catalyst.Core.Modules.Dfs.DevDfs.AddAsync*
  implements:
  - Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  id: ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  parent: Catalyst.Core.Modules.Dfs.DevDfs
  langs:
  - csharp
  - vb
  name: ReadAsync(Cid, CancellationToken)
  nameWithType: DevDfs.ReadAsync(Cid, CancellationToken)
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync(LibP2P.Cid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Dfs/DevDfs.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ReadAsync
    path: ../src/Catalyst.Core.Modules.Dfs/DevDfs.cs
    startLine: 115
  assemblies:
  - Catalyst.Core.Modules.Dfs
  namespace: Catalyst.Core.Modules.Dfs
  example: []
  syntax:
    content: public Task<Stream> ReadAsync(Cid cid, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cid
      type: LibP2P.Cid
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
    content.vb: Public Function ReadAsync(cid As Cid, cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
  overload: Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync*
  implements:
  - Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Catalyst.Core.Modules.Dfs.DevDfs._baseFolder
  commentId: F:Catalyst.Core.Modules.Dfs.DevDfs._baseFolder
  isExternal: true
- uid: Catalyst.Core.Modules.Dfs
  commentId: N:Catalyst.Core.Modules.Dfs
  name: Catalyst.Core.Modules.Dfs
  nameWithType: Catalyst.Core.Modules.Dfs
  fullName: Catalyst.Core.Modules.Dfs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Dfs.IDfs
  commentId: T:Catalyst.Abstractions.Dfs.IDfs
  parent: Catalyst.Abstractions.Dfs
  name: IDfs
  nameWithType: IDfs
  fullName: Catalyst.Abstractions.Dfs.IDfs
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Dfs
  commentId: N:Catalyst.Abstractions.Dfs
  name: Catalyst.Abstractions.Dfs
  nameWithType: Catalyst.Abstractions.Dfs
  fullName: Catalyst.Abstractions.Dfs
- uid: Catalyst.Core.Modules.Dfs.DevDfs.#ctor*
  commentId: Overload:Catalyst.Core.Modules.Dfs.DevDfs.#ctor
  name: DevDfs
  nameWithType: DevDfs.DevDfs
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.DevDfs
- uid: Catalyst.Abstractions.FileSystem.IFileSystem
  commentId: T:Catalyst.Abstractions.FileSystem.IFileSystem
  parent: Catalyst.Abstractions.FileSystem
  name: IFileSystem
  nameWithType: IFileSystem
  fullName: Catalyst.Abstractions.FileSystem.IFileSystem
- uid: Catalyst.Abstractions.Hashing.IHashProvider
  commentId: T:Catalyst.Abstractions.Hashing.IHashProvider
  parent: Catalyst.Abstractions.Hashing
  name: IHashProvider
  nameWithType: IHashProvider
  fullName: Catalyst.Abstractions.Hashing.IHashProvider
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Catalyst.Abstractions.FileSystem
  commentId: N:Catalyst.Abstractions.FileSystem
  name: Catalyst.Abstractions.FileSystem
  nameWithType: Catalyst.Abstractions.FileSystem
  fullName: Catalyst.Abstractions.FileSystem
- uid: Catalyst.Abstractions.Hashing
  commentId: N:Catalyst.Abstractions.Hashing
  name: Catalyst.Abstractions.Hashing
  nameWithType: Catalyst.Abstractions.Hashing
  fullName: Catalyst.Abstractions.Hashing
- uid: Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync*
  commentId: Overload:Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync
  name: AddTextAsync
  nameWithType: DevDfs.AddTextAsync
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.AddTextAsync
- uid: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Dfs.IDfs
  isExternal: true
  name: AddTextAsync(String, CancellationToken)
  nameWithType: IDfs.AddTextAsync(String, CancellationToken)
  fullName: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
    name: AddTextAsync
    nameWithType: IDfs.AddTextAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync(System.String,System.Threading.CancellationToken)
    name: AddTextAsync
    nameWithType: IDfs.AddTextAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.AddTextAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{LibP2P.Cid}
  commentId: T:System.Threading.Tasks.Task{LibP2P.Cid}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Cid>
  nameWithType: Task<Cid>
  fullName: System.Threading.Tasks.Task<LibP2P.Cid>
  nameWithType.vb: Task(Of Cid)
  fullName.vb: System.Threading.Tasks.Task(Of LibP2P.Cid)
  name.vb: Task(Of Cid)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync*
  commentId: Overload:Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync
  name: ReadTextAsync
  nameWithType: DevDfs.ReadTextAsync
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.ReadTextAsync
- uid: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Dfs.IDfs
  isExternal: true
  name: ReadTextAsync(Cid, CancellationToken)
  nameWithType: IDfs.ReadTextAsync(Cid, CancellationToken)
  fullName: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
    name: ReadTextAsync
    nameWithType: IDfs.ReadTextAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync(LibP2P.Cid,System.Threading.CancellationToken)
    name: ReadTextAsync
    nameWithType: IDfs.ReadTextAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.ReadTextAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LibP2P.Cid
  commentId: T:LibP2P.Cid
  parent: LibP2P
  isExternal: true
  name: Cid
  nameWithType: Cid
  fullName: LibP2P.Cid
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: LibP2P
  commentId: N:LibP2P
  isExternal: true
  name: LibP2P
  nameWithType: LibP2P
  fullName: LibP2P
- uid: Catalyst.Core.Modules.Dfs.DevDfs.AddAsync*
  commentId: Overload:Catalyst.Core.Modules.Dfs.DevDfs.AddAsync
  name: AddAsync
  nameWithType: DevDfs.AddAsync
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.AddAsync
- uid: Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Dfs.IDfs
  isExternal: true
  name: AddAsync(Stream, String, CancellationToken)
  nameWithType: IDfs.AddAsync(Stream, String, CancellationToken)
  fullName: Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
    name: AddAsync
    nameWithType: IDfs.AddAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.AddAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Dfs.IDfs.AddAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)
    name: AddAsync
    nameWithType: IDfs.AddAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.AddAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync*
  commentId: Overload:Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync
  name: ReadAsync
  nameWithType: DevDfs.ReadAsync
  fullName: Catalyst.Core.Modules.Dfs.DevDfs.ReadAsync
- uid: Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.Dfs.IDfs
  isExternal: true
  name: ReadAsync(Cid, CancellationToken)
  nameWithType: IDfs.ReadAsync(Cid, CancellationToken)
  fullName: Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: IDfs.ReadAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Dfs.IDfs.ReadAsync(LibP2P.Cid,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: IDfs.ReadAsync
    fullName: Catalyst.Abstractions.Dfs.IDfs.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: LibP2P.Cid
    name: Cid
    nameWithType: Cid
    fullName: LibP2P.Cid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
