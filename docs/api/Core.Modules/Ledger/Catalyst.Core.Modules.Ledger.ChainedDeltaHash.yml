### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  commentId: T:Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  id: ChainedDeltaHash
  parent: Catalyst.Core.Modules.Ledger
  children:
  - Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor(System.Byte[],System.Byte[],System.Byte[])
  - Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
  - Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
  langs:
  - csharp
  - vb
  name: ChainedDeltaHash
  nameWithType: ChainedDeltaHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ChainedDeltaHash
    path: ../src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
    startLine: 29
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  summary: "\nA delta which is linked both ways, to its predecessor (like all normal deltas), but also to its\nsuccessor. This is meant to be used during re-synchronisation of the ledger.\n"
  example: []
  syntax:
    content: public class ChainedDeltaHash
    content.vb: Public Class ChainedDeltaHash
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor(System.Byte[],System.Byte[],System.Byte[])
  commentId: M:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor(System.Byte[],System.Byte[],System.Byte[])
  id: '#ctor(System.Byte[],System.Byte[],System.Byte[])'
  parent: Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  langs:
  - csharp
  - vb
  name: ChainedDeltaHash(Byte[], Byte[], Byte[])
  nameWithType: ChainedDeltaHash.ChainedDeltaHash(Byte[], Byte[], Byte[])
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.ChainedDeltaHash(System.Byte[], System.Byte[], System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
    startLine: 31
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  syntax:
    content: public ChainedDeltaHash(byte[] previousDfsHash, byte[] dfsHash, byte[] nextDeltaDfsHash)
    parameters:
    - id: previousDfsHash
      type: System.Byte[]
    - id: dfsHash
      type: System.Byte[]
    - id: nextDeltaDfsHash
      type: System.Byte[]
    content.vb: Public Sub New(previousDfsHash As Byte(), dfsHash As Byte(), nextDeltaDfsHash As Byte())
  overload: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor*
  nameWithType.vb: ChainedDeltaHash.ChainedDeltaHash(Byte(), Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.ChainedDeltaHash(System.Byte(), System.Byte(), System.Byte())
  name.vb: ChainedDeltaHash(Byte(), Byte(), Byte())
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
  commentId: P:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
  id: PreviousDfsHash
  parent: Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  langs:
  - csharp
  - vb
  name: PreviousDfsHash
  nameWithType: ChainedDeltaHash.PreviousDfsHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PreviousDfsHash
    path: ../src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
    startLine: 41
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  summary: "\nThe hash or address of the predecessor of this delta on the Dfs.\n"
  example: []
  syntax:
    content: public byte[] PreviousDfsHash { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property PreviousDfsHash As Byte()
  overload: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
  commentId: P:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
  id: DfsHash
  parent: Catalyst.Core.Modules.Ledger.ChainedDeltaHash
  langs:
  - csharp
  - vb
  name: DfsHash
  nameWithType: ChainedDeltaHash.DfsHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DfsHash
    path: ../src/Catalyst.Core.Modules.Ledger/LinkedDelta.cs
    startLine: 46
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  summary: "\nThe hash or address of this delta on the Dfs.\n"
  example: []
  syntax:
    content: public byte[] DfsHash { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public ReadOnly Property DfsHash As Byte()
  overload: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Catalyst.Core.Modules.Ledger
  commentId: N:Catalyst.Core.Modules.Ledger
  name: Catalyst.Core.Modules.Ledger
  nameWithType: Catalyst.Core.Modules.Ledger
  fullName: Catalyst.Core.Modules.Ledger
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor*
  commentId: Overload:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.#ctor
  name: ChainedDeltaHash
  nameWithType: ChainedDeltaHash.ChainedDeltaHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.ChainedDeltaHash
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash*
  commentId: Overload:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
  name: PreviousDfsHash
  nameWithType: ChainedDeltaHash.PreviousDfsHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.PreviousDfsHash
- uid: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash*
  commentId: Overload:Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
  name: DfsHash
  nameWithType: ChainedDeltaHash.DfsHash
  fullName: Catalyst.Core.Modules.Ledger.ChainedDeltaHash.DfsHash
