### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Ledger.Repository.AccountRepository
  commentId: T:Catalyst.Core.Modules.Ledger.Repository.AccountRepository
  id: AccountRepository
  parent: Catalyst.Core.Modules.Ledger.Repository
  children:
  - Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor(SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String})
  langs:
  - csharp
  - vb
  name: AccountRepository
  nameWithType: AccountRepository
  fullName: Catalyst.Core.Modules.Ledger.Repository.AccountRepository
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/Repository/AccountRepository.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AccountRepository
    path: ../src/Catalyst.Core.Modules.Ledger/Repository/AccountRepository.cs
    startLine: 29
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger.Repository
  syntax:
    content: 'public class AccountRepository : RepositoryWrapper<Account>, IAccountRepository, IRepositoryWrapper<Account>, IRepository<Account, string>, ICrudRepository<Account, string>, IRepositoryBase<Account>, ICanAdd<Account>, ICanUpdate<Account>, ICanBatch<Account>, IRepositoryQueryable<Account>, ICanFind<Account>, IDisposable, IRepositoryAggregates<Account>'
    content.vb: >-
      Public Class AccountRepository

          Inherits RepositoryWrapper(Of Account)

          Implements IAccountRepository, IRepositoryWrapper(Of Account), IRepository(Of Account, String), ICrudRepository(Of Account, String), IRepositoryBase(Of Account), ICanAdd(Of Account), ICanUpdate(Of Account), ICanBatch(Of Account), IRepositoryQueryable(Of Account), ICanFind(Of Account), IDisposable, IRepositoryAggregates(Of Account)
  inheritance:
  - System.Object
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  implements:
  - Catalyst.Core.Modules.Ledger.Repository.IAccountRepository
  - Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  - SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Modules.Ledger.Models.Account}
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Modules.Ledger.Models.Account}
  - System.IDisposable
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Modules.Ledger.Models.Account}
  inheritedMembers:
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Repository
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Conventions
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.EntityType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.KeyType
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingStrategy
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingEnabled
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CacheUsed
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TraceInfo
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GenerateKeyOnAdd
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(Catalyst.Core.Modules.Ledger.Models.Account)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.AsQueryable
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.BeginBatch
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.ClearCache
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(Catalyst.Core.Modules.Ledger.Models.Account)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.DisableCaching
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Dispose
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.String[])
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetPrimaryKey(Catalyst.Core.Modules.Ledger.Models.Account)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TInner},{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},Catalyst.Core.Modules.Ledger.Models.Account@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet(System.String,Catalyst.Core.Modules.Ledger.Models.Account@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(Catalyst.Core.Modules.Ledger.Models.Account)
  - Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor(SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String})
  commentId: M:Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor(SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String})
  id: '#ctor(SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String})'
  parent: Catalyst.Core.Modules.Ledger.Repository.AccountRepository
  langs:
  - csharp
  - vb
  name: AccountRepository(IRepository<Account, String>)
  nameWithType: AccountRepository.AccountRepository(IRepository<Account, String>)
  fullName: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.AccountRepository(SharpRepository.Repository.IRepository<Catalyst.Core.Modules.Ledger.Models.Account, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/Repository/AccountRepository.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Modules.Ledger/Repository/AccountRepository.cs
    startLine: 31
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger.Repository
  syntax:
    content: public AccountRepository(IRepository<Account, string> repository)
    parameters:
    - id: repository
      type: SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
    content.vb: Public Sub New(repository As IRepository(Of Account, String))
  overload: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor*
  nameWithType.vb: AccountRepository.AccountRepository(IRepository(Of Account, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.AccountRepository(SharpRepository.Repository.IRepository(Of Catalyst.Core.Modules.Ledger.Models.Account, System.String))
  name.vb: AccountRepository(IRepository(Of Account, String))
references:
- uid: Catalyst.Core.Modules.Ledger.Repository
  commentId: N:Catalyst.Core.Modules.Ledger.Repository
  name: Catalyst.Core.Modules.Ledger.Repository
  nameWithType: Catalyst.Core.Modules.Ledger.Repository
  fullName: Catalyst.Core.Modules.Ledger.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: Catalyst.Core.Lib.Repository
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  name: RepositoryWrapper<Account>
  nameWithType: RepositoryWrapper<Account>
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: RepositoryWrapper(Of Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: RepositoryWrapper(Of Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Modules.Ledger.Repository.IAccountRepository
  commentId: T:Catalyst.Core.Modules.Ledger.Repository.IAccountRepository
  parent: Catalyst.Core.Modules.Ledger.Repository
  name: IAccountRepository
  nameWithType: IAccountRepository
  fullName: Catalyst.Core.Modules.Ledger.Repository.IAccountRepository
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:Catalyst.Abstractions.Repository.IRepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: Catalyst.Abstractions.Repository
  definition: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  name: IRepositoryWrapper<Account>
  nameWithType: IRepositoryWrapper<Account>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: IRepositoryWrapper(Of Account)
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: IRepositoryWrapper(Of Account)
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  commentId: T:SharpRepository.Repository.IRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepository`2
  name: IRepository<Account, String>
  nameWithType: IRepository<Account, String>
  fullName: SharpRepository.Repository.IRepository<Catalyst.Core.Modules.Ledger.Models.Account, System.String>
  nameWithType.vb: IRepository(Of Account, String)
  fullName.vb: SharpRepository.Repository.IRepository(Of Catalyst.Core.Modules.Ledger.Models.Account, System.String)
  name.vb: IRepository(Of Account, String)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  commentId: T:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Modules.Ledger.Models.Account,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.ICrudRepository`2
  name: ICrudRepository<Account, String>
  nameWithType: ICrudRepository<Account, String>
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Modules.Ledger.Models.Account, System.String>
  nameWithType.vb: ICrudRepository(Of Account, String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Modules.Ledger.Models.Account, System.String)
  name.vb: ICrudRepository(Of Account, String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryBase`1
  name: IRepositoryBase<Account>
  nameWithType: IRepositoryBase<Account>
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: IRepositoryBase(Of Account)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: IRepositoryBase(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanAdd`1
  name: ICanAdd<Account>
  nameWithType: ICanAdd<Account>
  fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: ICanAdd(Of Account)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: ICanAdd(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanUpdate`1
  name: ICanUpdate<Account>
  nameWithType: ICanUpdate<Account>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: ICanUpdate(Of Account)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: ICanUpdate(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanBatch`1
  name: ICanBatch<Account>
  nameWithType: ICanBatch<Account>
  fullName: SharpRepository.Repository.Traits.ICanBatch<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: ICanBatch(Of Account)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: ICanBatch(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryQueryable`1
  name: IRepositoryQueryable<Account>
  nameWithType: IRepositoryQueryable<Account>
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: IRepositoryQueryable(Of Account)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: IRepositoryQueryable(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanFind`1
  name: ICanFind<Account>
  nameWithType: ICanFind<Account>
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: ICanFind(Of Account)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: ICanFind(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Modules.Ledger.Models.Account}
  commentId: T:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Modules.Ledger.Models.Account}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryAggregates`1
  name: IRepositoryAggregates<Account>
  nameWithType: IRepositoryAggregates<Account>
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Modules.Ledger.Models.Account>
  nameWithType.vb: IRepositoryAggregates(Of Account)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: IRepositoryAggregates(Of Account)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Repository
  commentId: F:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Repository
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  name: Repository
  nameWithType: RepositoryWrapper<Account>.Repository
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Repository
  nameWithType.vb: RepositoryWrapper(Of Account).Repository
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Repository
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Conventions
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Conventions
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  name: Conventions
  nameWithType: RepositoryWrapper<Account>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Conventions
  nameWithType.vb: RepositoryWrapper(Of Account).Conventions
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Conventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.EntityType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.EntityType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  name: EntityType
  nameWithType: RepositoryWrapper<Account>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.EntityType
  nameWithType.vb: RepositoryWrapper(Of Account).EntityType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).EntityType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.KeyType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.KeyType
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  name: KeyType
  nameWithType: RepositoryWrapper<Account>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.KeyType
  nameWithType.vb: RepositoryWrapper(Of Account).KeyType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingStrategy
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingStrategy
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryWrapper<Account>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.CachingStrategy
  nameWithType.vb: RepositoryWrapper(Of Account).CachingStrategy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).CachingStrategy
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingEnabled
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CachingEnabled
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryWrapper<Account>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.CachingEnabled
  nameWithType.vb: RepositoryWrapper(Of Account).CachingEnabled
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).CachingEnabled
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CacheUsed
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.CacheUsed
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryWrapper<Account>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.CacheUsed
  nameWithType.vb: RepositoryWrapper(Of Account).CacheUsed
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TraceInfo
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TraceInfo
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryWrapper<Account>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TraceInfo
  nameWithType.vb: RepositoryWrapper(Of Account).TraceInfo
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TraceInfo
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GenerateKeyOnAdd
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GenerateKeyOnAdd
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<Account>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryWrapper(Of Account).GenerateKeyOnAdd
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(Catalyst.Core.Modules.Ledger.Models.Account)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(Catalyst.Core.Modules.Ledger.Models.Account)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  name: Add(Account)
  nameWithType: RepositoryWrapper<Account>.Add(Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Add(Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).Add(Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Add(Catalyst.Core.Modules.Ledger.Models.Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper<Account>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper(Of Account).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<Account>)
  nameWithType: RepositoryWrapper<Account>.Add(IEnumerable<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Add(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Add(IEnumerable(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Add(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Add(IEnumerable(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper<Account>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper(Of Account).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.AsQueryable
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.AsQueryable
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  name: AsQueryable()
  nameWithType: RepositoryWrapper<Account>.AsQueryable()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.AsQueryable()
  nameWithType.vb: RepositoryWrapper(Of Account).AsQueryable()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).AsQueryable()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper<Account>.AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper(Of Account).AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Average(Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Average(Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Average(Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Average(Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(ISpecification<Account>, Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Average(ISpecification<Account>, Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Average(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<Account>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of Account).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.BeginBatch
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.BeginBatch
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  name: BeginBatch()
  nameWithType: RepositoryWrapper<Account>.BeginBatch()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.BeginBatch()
  nameWithType.vb: RepositoryWrapper(Of Account).BeginBatch()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).BeginBatch()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper<Account>.BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper(Of Account).BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.ClearCache
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.ClearCache
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  name: ClearCache()
  nameWithType: RepositoryWrapper<Account>.ClearCache()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.ClearCache()
  nameWithType.vb: RepositoryWrapper(Of Account).ClearCache()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).ClearCache()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper<Account>.ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper(Of Account).ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  name: Count()
  nameWithType: RepositoryWrapper<Account>.Count()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count()
  nameWithType.vb: RepositoryWrapper(Of Account).Count()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper<Account>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper(Of Account).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Count(ISpecification<Account>)
  nameWithType: RepositoryWrapper<Account>.Count(ISpecification<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Count(ISpecification(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Count(ISpecification(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper<Account>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper(Of Account).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<Account, Boolean>>)
  nameWithType: RepositoryWrapper<Account>.Count(Expression<Func<Account, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Count(Expression(Of Func(Of Account, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of Account, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper<Account>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper(Of Account).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  name: Delete(String)
  nameWithType: RepositoryWrapper<Account>.Delete(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(System.String)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryWrapper<Account>.Delete(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  name: Delete(String[])
  nameWithType: RepositoryWrapper<Account>.Delete(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(Catalyst.Core.Modules.Ledger.Models.Account)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(Catalyst.Core.Modules.Ledger.Models.Account)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  name: Delete(Account)
  nameWithType: RepositoryWrapper<Account>.Delete(Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(Catalyst.Core.Modules.Ledger.Models.Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  name: Delete(IEnumerable<Account>)
  nameWithType: RepositoryWrapper<Account>.Delete(IEnumerable<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(IEnumerable(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Delete(IEnumerable(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<Account, Boolean>>)
  nameWithType: RepositoryWrapper<Account>.Delete(Expression<Func<Account, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(Expression(Of Func(Of Account, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of Account, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Delete(ISpecification<Account>)
  nameWithType: RepositoryWrapper<Account>.Delete(ISpecification<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Delete(ISpecification(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Delete(ISpecification(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper<Account>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of Account).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.DisableCaching
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.DisableCaching
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  name: DisableCaching()
  nameWithType: RepositoryWrapper<Account>.DisableCaching()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.DisableCaching()
  nameWithType.vb: RepositoryWrapper(Of Account).DisableCaching()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).DisableCaching()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper<Account>.DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper(Of Account).DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Dispose
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Dispose
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  name: Dispose()
  nameWithType: RepositoryWrapper<Account>.Dispose()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Dispose()
  nameWithType.vb: RepositoryWrapper(Of Account).Dispose()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Dispose()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper<Account>.Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper(Of Account).Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  name: Exists(String)
  nameWithType: RepositoryWrapper<Account>.Exists(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists(System.String)
  nameWithType.vb: RepositoryWrapper(Of Account).Exists(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper<Account>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper(Of Account).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exists(Expression<Func<Account, Boolean>>)
  nameWithType: RepositoryWrapper<Account>.Exists(Expression<Func<Account, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Exists(Expression(Of Func(Of Account, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of Account, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper<Account>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper(Of Account).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Exists(ISpecification<Account>)
  nameWithType: RepositoryWrapper<Account>.Exists(ISpecification<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Exists(ISpecification(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Exists(ISpecification(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper<Account>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper(Of Account).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(Expression<Func<Account, Boolean>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.Find(Expression<Func<Account, Boolean>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Find(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Find(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<Account>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of Account).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.Find<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Find(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Find(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<Account>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(ISpecification<Account>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.Find(ISpecification<Account>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Find(ISpecification(Of Account), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Find(ISpecification(Of Account), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<Account>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of Account).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.Find<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Find(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Find(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<Account>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(Expression<Func<Account, Boolean>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.FindAll(Expression<Func<Account, Boolean>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).FindAll(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: FindAll(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<Account>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of Account).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.FindAll<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).FindAll(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<Account>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(ISpecification<Account>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.FindAll(ISpecification<Account>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).FindAll(ISpecification(Of Account), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: FindAll(ISpecification(Of Account), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<Account>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of Account).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.FindAll<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).FindAll(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: FindAll(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<Account>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  name: Get(String)
  nameWithType: RepositoryWrapper<Account>.Get(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get(System.String)
  nameWithType.vb: RepositoryWrapper(Of Account).Get(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper<Account>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper(Of Account).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get(String, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.Get(String, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Get(String, IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Get(String, IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper<Account>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper(Of Account).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  name: Get(String, String[])
  nameWithType: RepositoryWrapper<Account>.Get(String, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get(System.String, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).Get(String, String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper<Account>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper(Of Account).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get(String, Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.Get(String, Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).Get(String, Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper<Account>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper(Of Account).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Get<TResult>(String, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Get<TResult>(String, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<Account>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get<TResult>(String, Expression<Func<Account, TResult>>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.Get<TResult>(String, Expression<Func<Account, TResult>>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<Account>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get<TResult>(String, Expression<Func<Account, TResult>>, Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.Get<TResult>(String, Expression<Func<Account, TResult>>, Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<Account>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: Get<TResult>(String, Expression<Func<Account, TResult>>, String[])
  nameWithType: RepositoryWrapper<Account>.Get<TResult>(String, Expression<Func<Account, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of Account, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<Account>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  name: GetAll()
  nameWithType: RepositoryWrapper<Account>.GetAll()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll()
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll(IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  name: GetAll(String[])
  nameWithType: RepositoryWrapper<Account>.GetAll(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.GetAll(Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll(IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll(IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IQueryOptions<Account>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll(IQueryOptions<Account>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(IQueryOptions(Of Account), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(IQueryOptions(Of Account), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll(IQueryOptions<Account>, String[])
  nameWithType: RepositoryWrapper<Account>.GetAll(IQueryOptions<Account>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(IQueryOptions(Of Account), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), System.String())
  name.vb: GetAll(IQueryOptions(Of Account), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(IQueryOptions<Account>, Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.GetAll(IQueryOptions<Account>, Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(IQueryOptions(Of Account), Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: GetAll(IQueryOptions(Of Account), Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<Account>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of Account).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetAll<TResult>(Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, String[])
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, String[])
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Object}}[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, Expression<Func<Account, Object>>[])
  nameWithType: RepositoryWrapper<Account>.GetAll<TResult>(Expression<Func<Account, TResult>>, IQueryOptions<Account>, Expression<Func<Account, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), Expression(Of Func(Of Account, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), Expression(Of Func(Of Account, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<Account>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  name: GetMany(String[])
  nameWithType: RepositoryWrapper<Account>.GetMany(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany(System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetMany(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper<Account>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper(Of Account).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryWrapper<Account>.GetMany(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetMany(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper<Account>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper(Of Account).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetMany(IEnumerable<String>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetMany(IEnumerable<String>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetMany(IEnumerable(Of String), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper<Account>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper(Of Account).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetMany<TResult>(Expression<Func<Account, TResult>>, String[])
  nameWithType: RepositoryWrapper<Account>.GetMany<TResult>(Expression<Func<Account, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetMany(Of TResult)(Expression(Of Func(Of Account, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of Account, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<Account>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.GetMany<TResult>(IEnumerable<String>, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<Account>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.String[])
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary(System.String[])
  nameWithType.vb: RepositoryWrapper(Of Account).GetManyAsDictionary(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of Account).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of Account).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<Account>)
  nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<Account>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of Account).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetPrimaryKey(Catalyst.Core.Modules.Ledger.Models.Account)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GetPrimaryKey(Catalyst.Core.Modules.Ledger.Models.Account)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  name: GetPrimaryKey(Account)
  nameWithType: RepositoryWrapper<Account>.GetPrimaryKey(Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetPrimaryKey(Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).GetPrimaryKey(Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetPrimaryKey(Catalyst.Core.Modules.Ledger.Models.Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper<Account>.GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper(Of Account).GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Ledger.Models.Account},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>(Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Ledger.Models.Account},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Modules.Ledger.Models.Account},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Modules.Ledger.Models.Account},``1}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, Account>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Modules.Ledger.Models.Account), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, Account), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<Account>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of Account).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>(Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)(Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>(Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>(ISpecification<Account>, Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of Account), Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TGroupKey}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>)
  nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<Account>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of Account).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TInner},{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``1,``2}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<Account, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<Account, TInner, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<Account, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<Account, TInner, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TInner, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of Account, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of Account, TInner, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of Account, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of Account, TInner, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryWrapper<Account>.Join<TJoinKey, TInner, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Join<TJoinKey, TInner, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryWrapper(Of Account).Join(Of TJoinKey, TInner, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Join(Of TJoinKey, TInner, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  name: LongCount()
  nameWithType: RepositoryWrapper<Account>.LongCount()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount()
  nameWithType.vb: RepositoryWrapper(Of Account).LongCount()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper<Account>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper(Of Account).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: LongCount(ISpecification<Account>)
  nameWithType: RepositoryWrapper<Account>.LongCount(ISpecification<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).LongCount(ISpecification(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: LongCount(ISpecification(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper<Account>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper(Of Account).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<Account, Boolean>>)
  nameWithType: RepositoryWrapper<Account>.LongCount(Expression<Func<Account, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of Account).LongCount(Expression(Of Func(Of Account, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of Account, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper<Account>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper(Of Account).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Max<TResult>(Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Max(Of TResult)(Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<Account>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Max<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Max(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<Account>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Max<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Max(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<Account>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Min<TResult>(Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Min(Of TResult)(Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<Account>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Min<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Min(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<Account>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>)
  nameWithType: RepositoryWrapper<Account>.Min<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Min(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<Account>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int32}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int32>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int32}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Int64}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int64>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Int64}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Decimal}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Decimal>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Decimal}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Sum(Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Double}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Double>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Double)))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Double}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Sum(Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Single}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Single>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Single)))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(ISpecification<Account>, Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of Account), Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Nullable{System.Single}}})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<Account>.Sum(Expression<Func<Account, Boolean>>, Expression<Func<Account, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of Account).Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<Account>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of Account).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},Catalyst.Core.Modules.Ledger.Models.Account@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},Catalyst.Core.Modules.Ledger.Models.Account@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  name: TryFind(Expression<Func<Account, Boolean>>, Account)
  nameWithType: RepositoryWrapper<Account>.TryFind(Expression<Func<Account, Boolean>>, Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Expression(Of Func(Of Account, Boolean)), Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: TryFind(Expression(Of Func(Of Account, Boolean)), Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<Account>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of Account).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(Expression<Func<Account, Boolean>>, IQueryOptions<Account>, Account)
  nameWithType: RepositoryWrapper<Account>.TryFind(Expression<Func<Account, Boolean>>, IQueryOptions<Account>, Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account), Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: TryFind(Expression(Of Func(Of Account, Boolean)), IQueryOptions(Of Account), Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<Account>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of Account).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, TResult)
  nameWithType: RepositoryWrapper<Account>.TryFind<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<Account>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>, TResult)
  nameWithType: RepositoryWrapper<Account>.TryFind<TResult>(Expression<Func<Account, Boolean>>, Expression<Func<Account, TResult>>, IQueryOptions<Account>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, TResult)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of Account, Boolean)), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<Account>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  name: TryFind(ISpecification<Account>, Account)
  nameWithType: RepositoryWrapper<Account>.TryFind(ISpecification<Account>, Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(ISpecification(Of Account), Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: TryFind(ISpecification(Of Account), Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<Account>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of Account).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},Catalyst.Core.Modules.Ledger.Models.Account@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(ISpecification<Account>, IQueryOptions<Account>, Account)
  nameWithType: RepositoryWrapper<Account>.TryFind(ISpecification<Account>, IQueryOptions<Account>, Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(ISpecification(Of Account), IQueryOptions(Of Account), Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), Catalyst.Core.Modules.Ledger.Models.Account)
  name.vb: TryFind(ISpecification(Of Account), IQueryOptions(Of Account), Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<Account>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of Account).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, TResult)
  nameWithType: RepositoryWrapper<Account>.TryFind<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<Account>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Modules.Ledger.Models.Account},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Modules.Ledger.Models.Account},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>, TResult)
  nameWithType: RepositoryWrapper<Account>.TryFind<TResult>(ISpecification<Account>, Expression<Func<Account, TResult>>, IQueryOptions<Account>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Modules.Ledger.Models.Account>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Modules.Ledger.Models.Account>, TResult)
  nameWithType.vb: RepositoryWrapper(Of Account).TryFind(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Modules.Ledger.Models.Account), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Modules.Ledger.Models.Account), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of Account), Expression(Of Func(Of Account, TResult)), IQueryOptions(Of Account), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<Account>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet(System.String,Catalyst.Core.Modules.Ledger.Models.Account@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet(System.String,Catalyst.Core.Modules.Ledger.Models.Account@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  name: TryGet(String, Account)
  nameWithType: RepositoryWrapper<Account>.TryGet(String, Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryGet(System.String, Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).TryGet(String, Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryGet(System.String, Catalyst.Core.Modules.Ledger.Models.Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper<Account>.TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper(Of Account).TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,{TResult}}},{TResult}@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Modules.Ledger.Models.Account,``0}},``0@)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryGet<TResult>(String, Expression<Func<Account, TResult>>, TResult)
  nameWithType: RepositoryWrapper<Account>.TryGet<TResult>(String, Expression<Func<Account, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Modules.Ledger.Models.Account, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of Account).TryGet(Of TResult)(String, Expression(Of Func(Of Account, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Modules.Ledger.Models.Account, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of Account, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryWrapper<Account>.TryGet<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.TryGet<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryWrapper(Of Account).TryGet(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).TryGet(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(Catalyst.Core.Modules.Ledger.Models.Account)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(Catalyst.Core.Modules.Ledger.Models.Account)
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  name: Update(Account)
  nameWithType: RepositoryWrapper<Account>.Update(Account)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Update(Catalyst.Core.Modules.Ledger.Models.Account)
  nameWithType.vb: RepositoryWrapper(Of Account).Update(Account)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Update(Catalyst.Core.Modules.Ledger.Models.Account)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper<Account>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper(Of Account).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Modules.Ledger.Models.Account})
  parent: Catalyst.Core.Lib.Repository.RepositoryWrapper{Catalyst.Core.Modules.Ledger.Models.Account}
  definition: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  name: Update(IEnumerable<Account>)
  nameWithType: RepositoryWrapper<Account>.Update(IEnumerable<Account>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Update(System.Collections.Generic.IEnumerable<Catalyst.Core.Modules.Ledger.Models.Account>)
  nameWithType.vb: RepositoryWrapper(Of Account).Update(IEnumerable(Of Account))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Update(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Modules.Ledger.Models.Account))
  name.vb: Update(IEnumerable(Of Account))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper<Account>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<Catalyst.Core.Modules.Ledger.Models.Account>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper(Of Account).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of Catalyst.Core.Modules.Ledger.Models.Account).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Modules.Ledger.Models.Account
    name: Account
    nameWithType: Account
    fullName: Catalyst.Core.Modules.Ledger.Models.Account
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  commentId: T:Catalyst.Core.Lib.Repository.RepositoryWrapper`1
  name: RepositoryWrapper<T>
  nameWithType: RepositoryWrapper<T>
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>
  nameWithType.vb: RepositoryWrapper(Of T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T)
  name.vb: RepositoryWrapper(Of T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1
    name: RepositoryWrapper
    nameWithType: RepositoryWrapper
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository
  commentId: N:Catalyst.Core.Lib.Repository
  name: Catalyst.Core.Lib.Repository
  nameWithType: Catalyst.Core.Lib.Repository
  fullName: Catalyst.Core.Lib.Repository
- uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  commentId: T:Catalyst.Abstractions.Repository.IRepositoryWrapper`1
  name: IRepositoryWrapper<T>
  nameWithType: IRepositoryWrapper<T>
  fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper<T>
  nameWithType.vb: IRepositoryWrapper(Of T)
  fullName.vb: Catalyst.Abstractions.Repository.IRepositoryWrapper(Of T)
  name.vb: IRepositoryWrapper(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Repository.IRepositoryWrapper`1
    name: IRepositoryWrapper
    nameWithType: IRepositoryWrapper
    fullName: Catalyst.Abstractions.Repository.IRepositoryWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Repository
  commentId: N:Catalyst.Abstractions.Repository
  name: Catalyst.Abstractions.Repository
  nameWithType: Catalyst.Abstractions.Repository
  fullName: Catalyst.Abstractions.Repository
- uid: SharpRepository.Repository.IRepository`2
  commentId: T:SharpRepository.Repository.IRepository`2
  isExternal: true
  name: IRepository<T, TKey>
  nameWithType: IRepository<T, TKey>
  fullName: SharpRepository.Repository.IRepository<T, TKey>
  nameWithType.vb: IRepository(Of T, TKey)
  fullName.vb: SharpRepository.Repository.IRepository(Of T, TKey)
  name.vb: IRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository
  commentId: N:SharpRepository.Repository
  isExternal: true
  name: SharpRepository.Repository
  nameWithType: SharpRepository.Repository
  fullName: SharpRepository.Repository
- uid: SharpRepository.Repository.ICrudRepository`2
  commentId: T:SharpRepository.Repository.ICrudRepository`2
  isExternal: true
  name: ICrudRepository<T, TKey>
  nameWithType: ICrudRepository<T, TKey>
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>
  nameWithType.vb: ICrudRepository(Of T, TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey)
  name.vb: ICrudRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase`1
  commentId: T:SharpRepository.Repository.IRepositoryBase`1
  isExternal: true
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: SharpRepository.Repository.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd`1
  commentId: T:SharpRepository.Repository.Traits.ICanAdd`1
  isExternal: true
  name: ICanAdd<T>
  nameWithType: ICanAdd<T>
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>
  nameWithType.vb: ICanAdd(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T)
  name.vb: ICanAdd(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits
  commentId: N:SharpRepository.Repository.Traits
  isExternal: true
  name: SharpRepository.Repository.Traits
  nameWithType: SharpRepository.Repository.Traits
  fullName: SharpRepository.Repository.Traits
- uid: SharpRepository.Repository.Traits.ICanUpdate`1
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate`1
  isExternal: true
  name: ICanUpdate<T>
  nameWithType: ICanUpdate<T>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>
  nameWithType.vb: ICanUpdate(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T)
  name.vb: ICanUpdate(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch`1
  commentId: T:SharpRepository.Repository.Traits.ICanBatch`1
  isExternal: true
  name: ICanBatch<T>
  nameWithType: ICanBatch<T>
  fullName: SharpRepository.Repository.Traits.ICanBatch<T>
  nameWithType.vb: ICanBatch(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of T)
  name.vb: ICanBatch(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1
  commentId: T:SharpRepository.Repository.IRepositoryQueryable`1
  isExternal: true
  name: IRepositoryQueryable<T>
  nameWithType: IRepositoryQueryable<T>
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>
  nameWithType.vb: IRepositoryQueryable(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T)
  name.vb: IRepositoryQueryable(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1
  commentId: T:SharpRepository.Repository.Traits.ICanFind`1
  isExternal: true
  name: ICanFind<T>
  nameWithType: ICanFind<T>
  fullName: SharpRepository.Repository.Traits.ICanFind<T>
  nameWithType.vb: ICanFind(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T)
  name.vb: ICanFind(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1
  commentId: T:SharpRepository.Repository.IRepositoryAggregates`1
  isExternal: true
  name: IRepositoryAggregates<T>
  nameWithType: IRepositoryAggregates<T>
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>
  nameWithType.vb: IRepositoryAggregates(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T)
  name.vb: IRepositoryAggregates(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  commentId: F:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Repository
  name: Repository
  nameWithType: RepositoryWrapper<T>.Repository
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Repository
  nameWithType.vb: RepositoryWrapper(Of T).Repository
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Repository
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Conventions
  name: Conventions
  nameWithType: RepositoryWrapper<T>.Conventions
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Conventions
  nameWithType.vb: RepositoryWrapper(Of T).Conventions
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Conventions
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.EntityType
  name: EntityType
  nameWithType: RepositoryWrapper<T>.EntityType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.EntityType
  nameWithType.vb: RepositoryWrapper(Of T).EntityType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).EntityType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.KeyType
  name: KeyType
  nameWithType: RepositoryWrapper<T>.KeyType
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.KeyType
  nameWithType.vb: RepositoryWrapper(Of T).KeyType
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).KeyType
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryWrapper<T>.CachingStrategy
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingStrategy
  nameWithType.vb: RepositoryWrapper(Of T).CachingStrategy
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingStrategy
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryWrapper<T>.CachingEnabled
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CachingEnabled
  nameWithType.vb: RepositoryWrapper(Of T).CachingEnabled
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CachingEnabled
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryWrapper<T>.CacheUsed
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.CacheUsed
  nameWithType.vb: RepositoryWrapper(Of T).CacheUsed
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).CacheUsed
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryWrapper<T>.TraceInfo
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TraceInfo
  nameWithType.vb: RepositoryWrapper(Of T).TraceInfo
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TraceInfo
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  commentId: P:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryWrapper<T>.GenerateKeyOnAdd
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryWrapper(Of T).GenerateKeyOnAdd
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
  name: Add(T)
  nameWithType: RepositoryWrapper<T>.Add(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(T)
  nameWithType.vb: RepositoryWrapper(Of T).Add(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper<T>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(`0)
    name: Add
    nameWithType: RepositoryWrapper(Of T).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Add(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Add(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper<T>.Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryWrapper(Of T).Add
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
  name: AsQueryable()
  nameWithType: RepositoryWrapper<T>.AsQueryable()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable()
  nameWithType.vb: RepositoryWrapper(Of T).AsQueryable()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper<T>.AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryWrapper(Of T).AsQueryable
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper<T>.Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryWrapper(Of T).Average
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Average
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
  name: BeginBatch()
  nameWithType: RepositoryWrapper<T>.BeginBatch()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch()
  nameWithType.vb: RepositoryWrapper(Of T).BeginBatch()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper<T>.BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryWrapper(Of T).BeginBatch
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).BeginBatch
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
  name: ClearCache()
  nameWithType: RepositoryWrapper<T>.ClearCache()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache()
  nameWithType.vb: RepositoryWrapper(Of T).ClearCache()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper<T>.ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.ClearCache
    name: ClearCache
    nameWithType: RepositoryWrapper(Of T).ClearCache
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).ClearCache
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
  name: Count()
  nameWithType: RepositoryWrapper<T>.Count()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count()
  nameWithType.vb: RepositoryWrapper(Of T).Count()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Count(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Count(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Count(ISpecification(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Count(ISpecification(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Count(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Count(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper<T>.Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryWrapper(Of T).Count
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
  isExternal: true
  name: Delete(String)
  nameWithType: RepositoryWrapper<T>.Delete(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{System.String})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
  isExternal: true
  name: Delete(String[])
  nameWithType: RepositoryWrapper<T>.Delete(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Delete(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.String[])
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
  name: Delete(T)
  nameWithType: RepositoryWrapper<T>.Delete(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(T)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(`0)
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Delete(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Delete(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Delete(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Delete(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Delete(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Delete(ISpecification(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Delete(ISpecification(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper<T>.Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryWrapper(Of T).Delete
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
  name: DisableCaching()
  nameWithType: RepositoryWrapper<T>.DisableCaching()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching()
  nameWithType.vb: RepositoryWrapper(Of T).DisableCaching()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper<T>.DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryWrapper(Of T).DisableCaching
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).DisableCaching
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
  name: Dispose()
  nameWithType: RepositoryWrapper<T>.Dispose()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose()
  nameWithType.vb: RepositoryWrapper(Of T).Dispose()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper<T>.Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Dispose
    name: Dispose
    nameWithType: RepositoryWrapper(Of T).Dispose
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
  isExternal: true
  name: Exists(String)
  nameWithType: RepositoryWrapper<T>.Exists(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.String)
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.Exists(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Exists(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.Exists(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Exists(ISpecification(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Exists(ISpecification(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper<T>.Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryWrapper(Of T).Exists
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Exists
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<T>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of T).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<T>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find(ISpecification<T>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper<T>.Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryWrapper(Of T).Find
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryWrapper<T>.Find<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Find<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Find(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Find(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<T>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of T).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<T>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll(ISpecification<T>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper<T>.FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryWrapper(Of T).FindAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryWrapper<T>.FindAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.FindAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).FindAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).FindAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
  isExternal: true
  name: Get(String)
  nameWithType: RepositoryWrapper<T>.Get(String)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String)
  nameWithType.vb: RepositoryWrapper(Of T).Get(String)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String)
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get(String, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.Get(String, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
  isExternal: true
  name: Get(String, String[])
  nameWithType: RepositoryWrapper<T>.Get(String, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.String[])
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get(String, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get(String, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get(System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(String, Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper<T>.Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryWrapper(Of T).Get
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryWrapper<T>.Get<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Get<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Get(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Get(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
  name: GetAll()
  nameWithType: RepositoryWrapper<T>.GetAll()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll()
  nameWithType.vb: RepositoryWrapper(Of T).GetAll()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
  isExternal: true
  name: GetAll(String[])
  nameWithType: RepositoryWrapper<T>.GetAll(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(IQueryOptions(Of T), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper<T>.GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryWrapper(Of T).GetAll
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryWrapper<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryWrapper(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryWrapper<T>.GetAll<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetAll<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetAll(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetAll(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
  isExternal: true
  name: GetMany(String[])
  nameWithType: RepositoryWrapper<T>.GetMany(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.String[])
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String})
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetMany(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetMany(IEnumerable<String>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper<T>.GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryWrapper(Of T).GetMany
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<T>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryWrapper<T>.GetMany<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetMany<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryWrapper(Of T).GetMany(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetMany(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
  isExternal: true
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(String[])
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.String[])
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(String())
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.String[])
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryWrapper<T>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryWrapper(Of T).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper<T>.GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryWrapper(Of T).GetManyAsDictionary
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetManyAsDictionary
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
  name: GetPrimaryKey(T)
  nameWithType: RepositoryWrapper<T>.GetPrimaryKey(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey(T)
  nameWithType.vb: RepositoryWrapper(Of T).GetPrimaryKey(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper<T>.GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryWrapper(Of T).GetPrimaryKey
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GetPrimaryKey
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupBy<TGroupKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupBy(Of TGroupKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryWrapper<T>.GroupLongCount<TGroupKey>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.GroupLongCount<TGroupKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).GroupLongCount(Of TGroupKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  isExternal: true
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Join<TJoinKey, TInner, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Join(Of TJoinKey, TInner, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
  name: LongCount()
  nameWithType: RepositoryWrapper<T>.LongCount()
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount()
  nameWithType.vb: RepositoryWrapper(Of T).LongCount()
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount()
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: LongCount(ISpecification<T>)
  nameWithType: RepositoryWrapper<T>.LongCount(ISpecification<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(ISpecification(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: LongCount(ISpecification(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryWrapper<T>.LongCount(Expression<Func<T, Boolean>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryWrapper(Of T).LongCount(Expression(Of Func(Of T, Boolean)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper<T>.LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryWrapper(Of T).LongCount
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).LongCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryWrapper<T>.Max<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Max<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Max(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Max(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryWrapper<T>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryWrapper(Of T).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryWrapper<T>.Min<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Min<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryWrapper(Of T).Min(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Min(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryWrapper<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryWrapper(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper<T>.Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryWrapper(Of T).Sum
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Sum
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<T>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of T), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), T)
  name.vb: TryFind(ISpecification(Of T), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, IQueryOptions<T>, T)
  nameWithType: RepositoryWrapper<T>.TryFind(ISpecification<T>, IQueryOptions<T>, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper<T>.TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryWrapper(Of T).TryFind
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryWrapper<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryWrapper<T>.TryFind<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryFind<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryFind(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryFind(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
  isExternal: true
  name: TryGet(String, T)
  nameWithType: RepositoryWrapper<T>.TryGet(String, T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet(System.String, T)
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(String, T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(System.String, T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper<T>.TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet(System.String,`0@)
    name: TryGet
    nameWithType: RepositoryWrapper(Of T).TryGet
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryWrapper<T>.TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryWrapper(Of T).TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryWrapper<T>.TryGet<TResult>
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.TryGet<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryWrapper(Of T).TryGet(Of TResult)
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).TryGet(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
  name: Update(T)
  nameWithType: RepositoryWrapper<T>.Update(T)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(T)
  nameWithType.vb: RepositoryWrapper(Of T).Update(T)
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper<T>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(`0)
    name: Update
    nameWithType: RepositoryWrapper(Of T).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Update(IEnumerable<T>)
  nameWithType: RepositoryWrapper<T>.Update(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryWrapper(Of T).Update(IEnumerable(Of T))
  fullName.vb: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper<T>.Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.Repository.RepositoryWrapper`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryWrapper(Of T).Update
    fullName: Catalyst.Core.Lib.Repository.RepositoryWrapper(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor*
  commentId: Overload:Catalyst.Core.Modules.Ledger.Repository.AccountRepository.#ctor
  name: AccountRepository
  nameWithType: AccountRepository.AccountRepository
  fullName: Catalyst.Core.Modules.Ledger.Repository.AccountRepository.AccountRepository
