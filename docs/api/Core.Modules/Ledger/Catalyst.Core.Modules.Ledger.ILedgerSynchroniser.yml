### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser
  commentId: T:Catalyst.Core.Modules.Ledger.ILedgerSynchroniser
  id: ILedgerSynchroniser
  parent: Catalyst.Core.Modules.Ledger
  children:
  - Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash,System.Threading.CancellationToken)
  - Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
  langs:
  - csharp
  - vb
  name: ILedgerSynchroniser
  nameWithType: ILedgerSynchroniser
  fullName: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser
  type: Interface
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ILedgerSynchroniser
    path: ../src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  syntax:
    content: public interface ILedgerSynchroniser
    content.vb: Public Interface ILedgerSynchroniser
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash,System.Threading.CancellationToken)
  id: CacheDeltasBetween(TheDotNetLeague.MultiFormats.MultiHash.MultiHash,TheDotNetLeague.MultiFormats.MultiHash.MultiHash,System.Threading.CancellationToken)
  parent: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser
  langs:
  - csharp
  - vb
  name: CacheDeltasBetween(MultiHash, MultiHash, CancellationToken)
  nameWithType: ILedgerSynchroniser.CacheDeltasBetween(MultiHash, MultiHash, CancellationToken)
  fullName: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween(TheDotNetLeague.MultiFormats.MultiHash.MultiHash, TheDotNetLeague.MultiFormats.MultiHash.MultiHash, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: CacheDeltasBetween
    path: ../src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
    startLine: 40
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  summary: "\nStarts a process that retrieves the deltas between the <seealso cref=\"!:latestKnownDeltaHash\"></seealso>\nand the <seealso cref=\"!:targetDeltaHash\"></seealso>, and adds them to the cache.\n"
  example: []
  syntax:
    content: IEnumerable<MultiHash> CacheDeltasBetween(MultiHash latestKnownDeltaHash, MultiHash targetDeltaHash, CancellationToken cancellationToken)
    parameters:
    - id: latestKnownDeltaHash
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: >-
        Hash of the latest known Delta seen on the protocol,

        from the point of view of this node.
    - id: targetDeltaHash
      type: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
      description: The hash of the delta up to which we want to synchronise the ledger.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Provides a way to cancel the synchronisation task before it ends.
    return:
      type: System.Collections.Generic.IEnumerable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
    content.vb: Function CacheDeltasBetween(latestKnownDeltaHash As MultiHash, targetDeltaHash As MultiHash, cancellationToken As CancellationToken) As IEnumerable(Of MultiHash)
  overload: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween*
- uid: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
  commentId: P:Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
  id: DeltaCache
  parent: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser
  langs:
  - csharp
  - vb
  name: DeltaCache
  nameWithType: ILedgerSynchroniser.DeltaCache
  fullName: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DeltaCache
    path: ../src/Catalyst.Core.Modules.Ledger/ILedgerSynchroniser.cs
    startLine: 45
  assemblies:
  - Catalyst.Core.Modules.Ledger
  namespace: Catalyst.Core.Modules.Ledger
  summary: "\nA cache used to store the full Delta object when a synchronisation is triggered.\n"
  example: []
  syntax:
    content: IDeltaCache DeltaCache { get; }
    parameters: []
    return:
      type: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
    content.vb: ReadOnly Property DeltaCache As IDeltaCache
  overload: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Catalyst.Core.Modules.Ledger
  commentId: N:Catalyst.Core.Modules.Ledger
  name: Catalyst.Core.Modules.Ledger
  nameWithType: Catalyst.Core.Modules.Ledger
  fullName: Catalyst.Core.Modules.Ledger
- uid: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween*
  commentId: Overload:Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween
  name: CacheDeltasBetween
  nameWithType: ILedgerSynchroniser.CacheDeltasBetween
  fullName: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.CacheDeltasBetween
- uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  commentId: T:TheDotNetLeague.MultiFormats.MultiHash.MultiHash
  parent: TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: MultiHash
  nameWithType: MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Collections.Generic.IEnumerable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
  commentId: T:System.Collections.Generic.IEnumerable{TheDotNetLeague.MultiFormats.MultiHash.MultiHash}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MultiHash>
  nameWithType: IEnumerable<MultiHash>
  fullName: System.Collections.Generic.IEnumerable<TheDotNetLeague.MultiFormats.MultiHash.MultiHash>
  nameWithType.vb: IEnumerable(Of MultiHash)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TheDotNetLeague.MultiFormats.MultiHash.MultiHash)
  name.vb: IEnumerable(Of MultiHash)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    name: MultiHash
    nameWithType: MultiHash
    fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    name: MultiHash
    nameWithType: MultiHash
    fullName: TheDotNetLeague.MultiFormats.MultiHash.MultiHash
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TheDotNetLeague.MultiFormats.MultiHash
  commentId: N:TheDotNetLeague.MultiFormats.MultiHash
  isExternal: true
  name: TheDotNetLeague.MultiFormats.MultiHash
  nameWithType: TheDotNetLeague.MultiFormats.MultiHash
  fullName: TheDotNetLeague.MultiFormats.MultiHash
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache*
  commentId: Overload:Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
  name: DeltaCache
  nameWithType: ILedgerSynchroniser.DeltaCache
  fullName: Catalyst.Core.Modules.Ledger.ILedgerSynchroniser.DeltaCache
- uid: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  commentId: T:Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
  parent: Catalyst.Abstractions.Consensus.Deltas
  name: IDeltaCache
  nameWithType: IDeltaCache
  fullName: Catalyst.Abstractions.Consensus.Deltas.IDeltaCache
- uid: Catalyst.Abstractions.Consensus.Deltas
  commentId: N:Catalyst.Abstractions.Consensus.Deltas
  name: Catalyst.Abstractions.Consensus.Deltas
  nameWithType: Catalyst.Abstractions.Consensus.Deltas
  fullName: Catalyst.Abstractions.Consensus.Deltas
