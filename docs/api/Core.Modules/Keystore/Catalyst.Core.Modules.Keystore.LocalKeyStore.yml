### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore
  commentId: T:Catalyst.Core.Modules.Keystore.LocalKeyStore
  id: LocalKeyStore
  parent: Catalyst.Core.Modules.Keystore
  children:
  - Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor(Catalyst.Abstractions.Cryptography.IPasswordManager,Catalyst.Abstractions.Cryptography.ICryptoContext,Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,Catalyst.Abstractions.P2P.IPeerSettings,Serilog.ILogger)
  - Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  - Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  langs:
  - csharp
  - vb
  name: LocalKeyStore
  nameWithType: LocalKeyStore
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: LocalKeyStore
    path: ../src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
    startLine: 45
  assemblies:
  - Catalyst.Core.Modules.Keystore
  namespace: Catalyst.Core.Modules.Keystore
  syntax:
    content: 'public sealed class LocalKeyStore : KeyStoreService, IKeyStore'
    content.vb: >-
      Public NotInheritable Class LocalKeyStore

          Inherits KeyStoreService

          Implements IKeyStore
  inheritance:
  - System.Object
  - Nethereum.KeyStore.KeyStoreService
  implements:
  - Catalyst.Abstractions.Keystore.IKeyStore
  inheritedMembers:
  - Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
  - Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
  - Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String,System.String)
  - Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String,System.Byte[],System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor(Catalyst.Abstractions.Cryptography.IPasswordManager,Catalyst.Abstractions.Cryptography.ICryptoContext,Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,Catalyst.Abstractions.P2P.IPeerSettings,Serilog.ILogger)
  commentId: M:Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor(Catalyst.Abstractions.Cryptography.IPasswordManager,Catalyst.Abstractions.Cryptography.ICryptoContext,Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,Catalyst.Abstractions.P2P.IPeerSettings,Serilog.ILogger)
  id: '#ctor(Catalyst.Abstractions.Cryptography.IPasswordManager,Catalyst.Abstractions.Cryptography.ICryptoContext,Catalyst.Abstractions.FileSystem.IFileSystem,Catalyst.Abstractions.Hashing.IHashProvider,Catalyst.Abstractions.P2P.IPeerSettings,Serilog.ILogger)'
  parent: Catalyst.Core.Modules.Keystore.LocalKeyStore
  langs:
  - csharp
  - vb
  name: LocalKeyStore(IPasswordManager, ICryptoContext, IFileSystem, IHashProvider, IPeerSettings, ILogger)
  nameWithType: LocalKeyStore.LocalKeyStore(IPasswordManager, ICryptoContext, IFileSystem, IHashProvider, IPeerSettings, ILogger)
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.LocalKeyStore(Catalyst.Abstractions.Cryptography.IPasswordManager, Catalyst.Abstractions.Cryptography.ICryptoContext, Catalyst.Abstractions.FileSystem.IFileSystem, Catalyst.Abstractions.Hashing.IHashProvider, Catalyst.Abstractions.P2P.IPeerSettings, Serilog.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
    startLine: 57
  assemblies:
  - Catalyst.Core.Modules.Keystore
  namespace: Catalyst.Core.Modules.Keystore
  syntax:
    content: public LocalKeyStore(IPasswordManager passwordManager, ICryptoContext cryptoContext, IFileSystem fileSystem, IHashProvider hashProvider, IPeerSettings peerSettings, ILogger logger)
    parameters:
    - id: passwordManager
      type: Catalyst.Abstractions.Cryptography.IPasswordManager
    - id: cryptoContext
      type: Catalyst.Abstractions.Cryptography.ICryptoContext
    - id: fileSystem
      type: Catalyst.Abstractions.FileSystem.IFileSystem
    - id: hashProvider
      type: Catalyst.Abstractions.Hashing.IHashProvider
    - id: peerSettings
      type: Catalyst.Abstractions.P2P.IPeerSettings
    - id: logger
      type: Serilog.ILogger
    content.vb: Public Sub New(passwordManager As IPasswordManager, cryptoContext As ICryptoContext, fileSystem As IFileSystem, hashProvider As IHashProvider, peerSettings As IPeerSettings, logger As ILogger)
  overload: Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Core.Modules.Keystore.LocalKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreDecrypt(KeyRegistryTypes)
  nameWithType: LocalKeyStore.KeyStoreDecrypt(KeyRegistryTypes)
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreDecrypt
    path: ../src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
    startLine: 72
  assemblies:
  - Catalyst.Core.Modules.Keystore
  namespace: Catalyst.Core.Modules.Keystore
  syntax:
    content: public IPrivateKey KeyStoreDecrypt(KeyRegistryTypes keyIdentifier)
    parameters:
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
    content.vb: Public Function KeyStoreDecrypt(keyIdentifier As KeyRegistryTypes) As IPrivateKey
  overload: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt*
  implements:
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Core.Modules.Keystore.LocalKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreGenerate(KeyRegistryTypes)
  nameWithType: LocalKeyStore.KeyStoreGenerate(KeyRegistryTypes)
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreGenerate
    path: ../src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
    startLine: 127
  assemblies:
  - Catalyst.Core.Modules.Keystore
  namespace: Catalyst.Core.Modules.Keystore
  syntax:
    content: public Task<IPrivateKey> KeyStoreGenerate(KeyRegistryTypes keyIdentifier)
    parameters:
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
    content.vb: Public Function KeyStoreGenerate(keyIdentifier As KeyRegistryTypes) As Task(Of IPrivateKey)
  overload: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate*
  implements:
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  id: KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Core.Modules.Keystore.LocalKeyStore
  langs:
  - csharp
  - vb
  name: KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  nameWithType: LocalKeyStore.KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey, Catalyst.Abstractions.Types.KeyRegistryTypes)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: KeyStoreEncryptAsync
    path: ../src/Catalyst.Core.Modules.Keystore/LocalKeyStore.cs
    startLine: 136
  assemblies:
  - Catalyst.Core.Modules.Keystore
  namespace: Catalyst.Core.Modules.Keystore
  syntax:
    content: public Task KeyStoreEncryptAsync(IPrivateKey privateKey, KeyRegistryTypes keyIdentifier)
    parameters:
    - id: privateKey
      type: Catalyst.Abstractions.Cryptography.IPrivateKey
    - id: keyIdentifier
      type: Catalyst.Abstractions.Types.KeyRegistryTypes
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function KeyStoreEncryptAsync(privateKey As IPrivateKey, keyIdentifier As KeyRegistryTypes) As Task
  overload: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync*
  implements:
  - Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Catalyst.Core.Modules.Keystore
  commentId: N:Catalyst.Core.Modules.Keystore
  name: Catalyst.Core.Modules.Keystore
  nameWithType: Catalyst.Core.Modules.Keystore
  fullName: Catalyst.Core.Modules.Keystore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Nethereum.KeyStore.KeyStoreService
  commentId: T:Nethereum.KeyStore.KeyStoreService
  parent: Nethereum.KeyStore
  isExternal: true
  name: KeyStoreService
  nameWithType: KeyStoreService
  fullName: Nethereum.KeyStore.KeyStoreService
- uid: Catalyst.Abstractions.Keystore.IKeyStore
  commentId: T:Catalyst.Abstractions.Keystore.IKeyStore
  parent: Catalyst.Abstractions.Keystore
  name: IKeyStore
  nameWithType: IKeyStore
  fullName: Catalyst.Abstractions.Keystore.IKeyStore
- uid: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
  commentId: M:Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
  parent: Nethereum.KeyStore.KeyStoreService
  isExternal: true
  name: GetAddressFromKeyStore(String)
  nameWithType: KeyStoreService.GetAddressFromKeyStore(String)
  fullName: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
  spec.csharp:
  - uid: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
    name: GetAddressFromKeyStore
    nameWithType: KeyStoreService.GetAddressFromKeyStore
    fullName: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore(System.String)
    name: GetAddressFromKeyStore
    nameWithType: KeyStoreService.GetAddressFromKeyStore
    fullName: Nethereum.KeyStore.KeyStoreService.GetAddressFromKeyStore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
  commentId: M:Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
  parent: Nethereum.KeyStore.KeyStoreService
  isExternal: true
  name: GenerateUTCFileName(String)
  nameWithType: KeyStoreService.GenerateUTCFileName(String)
  fullName: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
  spec.csharp:
  - uid: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
    name: GenerateUTCFileName
    nameWithType: KeyStoreService.GenerateUTCFileName
    fullName: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName(System.String)
    name: GenerateUTCFileName
    nameWithType: KeyStoreService.GenerateUTCFileName
    fullName: Nethereum.KeyStore.KeyStoreService.GenerateUTCFileName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String,System.String)
  commentId: M:Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String,System.String)
  parent: Nethereum.KeyStore.KeyStoreService
  isExternal: true
  name: DecryptKeyStoreFromJson(String, String)
  nameWithType: KeyStoreService.DecryptKeyStoreFromJson(String, String)
  fullName: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String, System.String)
  spec.csharp:
  - uid: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String,System.String)
    name: DecryptKeyStoreFromJson
    nameWithType: KeyStoreService.DecryptKeyStoreFromJson
    fullName: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson(System.String,System.String)
    name: DecryptKeyStoreFromJson
    nameWithType: KeyStoreService.DecryptKeyStoreFromJson
    fullName: Nethereum.KeyStore.KeyStoreService.DecryptKeyStoreFromJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String,System.Byte[],System.String)
  commentId: M:Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String,System.Byte[],System.String)
  parent: Nethereum.KeyStore.KeyStoreService
  isExternal: true
  name: EncryptAndGenerateDefaultKeyStoreAsJson(String, Byte[], String)
  nameWithType: KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(String, Byte[], String)
  fullName: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String, System.Byte[], System.String)
  nameWithType.vb: KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(String, Byte(), String)
  fullName.vb: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String, System.Byte(), System.String)
  name.vb: EncryptAndGenerateDefaultKeyStoreAsJson(String, Byte(), String)
  spec.csharp:
  - uid: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String,System.Byte[],System.String)
    name: EncryptAndGenerateDefaultKeyStoreAsJson
    nameWithType: KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson
    fullName: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson(System.String,System.Byte[],System.String)
    name: EncryptAndGenerateDefaultKeyStoreAsJson
    nameWithType: KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson
    fullName: Nethereum.KeyStore.KeyStoreService.EncryptAndGenerateDefaultKeyStoreAsJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Nethereum.KeyStore
  commentId: N:Nethereum.KeyStore
  isExternal: true
  name: Nethereum.KeyStore
  nameWithType: Nethereum.KeyStore
  fullName: Nethereum.KeyStore
- uid: Catalyst.Abstractions.Keystore
  commentId: N:Catalyst.Abstractions.Keystore
  name: Catalyst.Abstractions.Keystore
  nameWithType: Catalyst.Abstractions.Keystore
  fullName: Catalyst.Abstractions.Keystore
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor*
  commentId: Overload:Catalyst.Core.Modules.Keystore.LocalKeyStore.#ctor
  name: LocalKeyStore
  nameWithType: LocalKeyStore.LocalKeyStore
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.LocalKeyStore
- uid: Catalyst.Abstractions.Cryptography.IPasswordManager
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordManager
  parent: Catalyst.Abstractions.Cryptography
  name: IPasswordManager
  nameWithType: IPasswordManager
  fullName: Catalyst.Abstractions.Cryptography.IPasswordManager
- uid: Catalyst.Abstractions.Cryptography.ICryptoContext
  commentId: T:Catalyst.Abstractions.Cryptography.ICryptoContext
  parent: Catalyst.Abstractions.Cryptography
  name: ICryptoContext
  nameWithType: ICryptoContext
  fullName: Catalyst.Abstractions.Cryptography.ICryptoContext
- uid: Catalyst.Abstractions.FileSystem.IFileSystem
  commentId: T:Catalyst.Abstractions.FileSystem.IFileSystem
  parent: Catalyst.Abstractions.FileSystem
  name: IFileSystem
  nameWithType: IFileSystem
  fullName: Catalyst.Abstractions.FileSystem.IFileSystem
- uid: Catalyst.Abstractions.Hashing.IHashProvider
  commentId: T:Catalyst.Abstractions.Hashing.IHashProvider
  parent: Catalyst.Abstractions.Hashing
  name: IHashProvider
  nameWithType: IHashProvider
  fullName: Catalyst.Abstractions.Hashing.IHashProvider
- uid: Catalyst.Abstractions.P2P.IPeerSettings
  commentId: T:Catalyst.Abstractions.P2P.IPeerSettings
  parent: Catalyst.Abstractions.P2P
  name: IPeerSettings
  nameWithType: IPeerSettings
  fullName: Catalyst.Abstractions.P2P.IPeerSettings
- uid: Serilog.ILogger
  commentId: T:Serilog.ILogger
  parent: Serilog
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Serilog.ILogger
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Abstractions.FileSystem
  commentId: N:Catalyst.Abstractions.FileSystem
  name: Catalyst.Abstractions.FileSystem
  nameWithType: Catalyst.Abstractions.FileSystem
  fullName: Catalyst.Abstractions.FileSystem
- uid: Catalyst.Abstractions.Hashing
  commentId: N:Catalyst.Abstractions.Hashing
  name: Catalyst.Abstractions.Hashing
  nameWithType: Catalyst.Abstractions.Hashing
  fullName: Catalyst.Abstractions.Hashing
- uid: Catalyst.Abstractions.P2P
  commentId: N:Catalyst.Abstractions.P2P
  name: Catalyst.Abstractions.P2P
  nameWithType: Catalyst.Abstractions.P2P
  fullName: Catalyst.Abstractions.P2P
- uid: Serilog
  commentId: N:Serilog
  isExternal: true
  name: Serilog
  nameWithType: Serilog
  fullName: Serilog
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt*
  commentId: Overload:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt
  name: KeyStoreDecrypt
  nameWithType: LocalKeyStore.KeyStoreDecrypt
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreDecrypt
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  name: KeyStoreDecrypt(KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreDecrypt(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreDecrypt
    nameWithType: IKeyStore.KeyStoreDecrypt
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt(Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreDecrypt
    nameWithType: IKeyStore.KeyStoreDecrypt
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreDecrypt
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Types.KeyRegistryTypes
  commentId: T:Catalyst.Abstractions.Types.KeyRegistryTypes
  parent: Catalyst.Abstractions.Types
  name: KeyRegistryTypes
  nameWithType: KeyRegistryTypes
  fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
- uid: Catalyst.Abstractions.Cryptography.IPrivateKey
  commentId: T:Catalyst.Abstractions.Cryptography.IPrivateKey
  parent: Catalyst.Abstractions.Cryptography
  name: IPrivateKey
  nameWithType: IPrivateKey
  fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
- uid: Catalyst.Abstractions.Types
  commentId: N:Catalyst.Abstractions.Types
  name: Catalyst.Abstractions.Types
  nameWithType: Catalyst.Abstractions.Types
  fullName: Catalyst.Abstractions.Types
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate*
  commentId: Overload:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate
  name: KeyStoreGenerate
  nameWithType: LocalKeyStore.KeyStoreGenerate
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreGenerate
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  name: KeyStoreGenerate(KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreGenerate(KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreGenerate
    nameWithType: IKeyStore.KeyStoreGenerate
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate(Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreGenerate
    nameWithType: IKeyStore.KeyStoreGenerate
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreGenerate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
  commentId: T:System.Threading.Tasks.Task{Catalyst.Abstractions.Cryptography.IPrivateKey}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPrivateKey>
  nameWithType: Task<IPrivateKey>
  fullName: System.Threading.Tasks.Task<Catalyst.Abstractions.Cryptography.IPrivateKey>
  nameWithType.vb: Task(Of IPrivateKey)
  fullName.vb: System.Threading.Tasks.Task(Of Catalyst.Abstractions.Cryptography.IPrivateKey)
  name.vb: Task(Of IPrivateKey)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync*
  commentId: Overload:Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync
  name: KeyStoreEncryptAsync
  nameWithType: LocalKeyStore.KeyStoreEncryptAsync
  fullName: Catalyst.Core.Modules.Keystore.LocalKeyStore.KeyStoreEncryptAsync
- uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  commentId: M:Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
  parent: Catalyst.Abstractions.Keystore.IKeyStore
  name: KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  nameWithType: IKeyStore.KeyStoreEncryptAsync(IPrivateKey, KeyRegistryTypes)
  fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey, Catalyst.Abstractions.Types.KeyRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreEncryptAsync
    nameWithType: IKeyStore.KeyStoreEncryptAsync
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync(Catalyst.Abstractions.Cryptography.IPrivateKey,Catalyst.Abstractions.Types.KeyRegistryTypes)
    name: KeyStoreEncryptAsync
    nameWithType: IKeyStore.KeyStoreEncryptAsync
    fullName: Catalyst.Abstractions.Keystore.IKeyStore.KeyStoreEncryptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Cryptography.IPrivateKey
    name: IPrivateKey
    nameWithType: IPrivateKey
    fullName: Catalyst.Abstractions.Cryptography.IPrivateKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Abstractions.Types.KeyRegistryTypes
    name: KeyRegistryTypes
    nameWithType: KeyRegistryTypes
    fullName: Catalyst.Abstractions.Types.KeyRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
