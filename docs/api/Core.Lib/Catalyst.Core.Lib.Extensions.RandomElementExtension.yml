### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension
  commentId: T:Catalyst.Core.Lib.Extensions.RandomElementExtension
  id: RandomElementExtension
  parent: Catalyst.Core.Lib.Extensions
  children:
  - Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement``1(System.Collections.Generic.IEnumerable{``0})
  - Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: RandomElementExtension
  nameWithType: RandomElementExtension
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RandomElementExtension
    path: ../src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  syntax:
    content: public static class RandomElementExtension
    content.vb: Public Module RandomElementExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: RandomSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Extensions.RandomElementExtension
  langs:
  - csharp
  - vb
  name: RandomSample<T>(IEnumerable<T>, Int32)
  nameWithType: RandomElementExtension.RandomSample<T>(IEnumerable<T>, Int32)
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RandomSample
    path: ../src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
    startLine: 41
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  summary: "\nTakes a random sample from list, must have more than 3 items in list, to take a sample of at least 2\n"
  example: []
  syntax:
    content: public static IList<T> RandomSample<T>(this IEnumerable<T> list, int sampleSize)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: sampleSize
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IList{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RandomSample(Of T)(list As IEnumerable(Of T), sampleSize As Integer) As IList(Of T)
  overload: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample*
  nameWithType.vb: RandomElementExtension.RandomSample(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: RandomSample(Of T)(IEnumerable(Of T), Int32)
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement``1(System.Collections.Generic.IEnumerable{``0})
  id: RandomElement``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Extensions.RandomElementExtension
  langs:
  - csharp
  - vb
  name: RandomElement<T>(IEnumerable<T>)
  nameWithType: RandomElementExtension.RandomElement<T>(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RandomElement
    path: ../src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
    startLine: 56
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  summary: "\nTakes a random element\n"
  example: []
  syntax:
    content: public static T RandomElement<T>(this IEnumerable<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RandomElement(Of T)(list As IEnumerable(Of T)) As T
  overload: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement*
  nameWithType.vb: RandomElementExtension.RandomElement(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: RandomElement(Of T)(IEnumerable(Of T))
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  id: Shuffle``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Extensions.RandomElementExtension
  langs:
  - csharp
  - vb
  name: Shuffle<T>(IEnumerable<T>)
  nameWithType: RandomElementExtension.Shuffle<T>(IEnumerable<T>)
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Shuffle
    path: ../src/Catalyst.Core.Lib/Extensions/RandomElementExtension.cs
    startLine: 70
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  summary: "\nRandomises order of list\n"
  example: []
  syntax:
    content: public static IList<T> Shuffle<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IList{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Shuffle(Of T)(source As IEnumerable(Of T)) As IList(Of T)
  overload: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle*
  nameWithType.vb: RandomElementExtension.Shuffle(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Shuffle(Of T)(IEnumerable(Of T))
references:
- uid: Catalyst.Core.Lib.Extensions
  commentId: N:Catalyst.Core.Lib.Extensions
  name: Catalyst.Core.Lib.Extensions
  nameWithType: Catalyst.Core.Lib.Extensions
  fullName: Catalyst.Core.Lib.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample*
  commentId: Overload:Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample
  name: RandomSample
  nameWithType: RandomElementExtension.RandomSample
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomSample
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement*
  commentId: Overload:Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement
  name: RandomElement
  nameWithType: RandomElementExtension.RandomElement
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.RandomElement
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle*
  commentId: Overload:Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle
  name: Shuffle
  nameWithType: RandomElementExtension.Shuffle
  fullName: Catalyst.Core.Lib.Extensions.RandomElementExtension.Shuffle
