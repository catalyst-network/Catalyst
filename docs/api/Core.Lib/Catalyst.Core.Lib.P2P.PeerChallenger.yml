### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.P2P.PeerChallenger
  commentId: T:Catalyst.Core.Lib.P2P.PeerChallenger
  id: PeerChallenger
  parent: Catalyst.Core.Lib.P2P
  children:
  - Catalyst.Core.Lib.P2P.PeerChallenger.#ctor(Serilog.ILogger,Catalyst.Abstractions.P2P.IPeerClient,Catalyst.Abstractions.P2P.IPeerSettings,System.Int32,System.Reactive.Concurrency.IScheduler)
  - Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  - Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
  - Catalyst.Core.Lib.P2P.PeerChallenger.Dispose
  langs:
  - csharp
  - vb
  name: PeerChallenger
  nameWithType: PeerChallenger
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PeerChallenger
    path: ../src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
    startLine: 41
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P
  syntax:
    content: 'public sealed class PeerChallenger : IPeerChallenger, IDisposable'
    content.vb: >-
      Public NotInheritable Class PeerChallenger

          Implements IPeerChallenger, IDisposable
  inheritance:
  - System.Object
  implements:
  - Catalyst.Abstractions.P2P.IPeerChallenger
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
  commentId: P:Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
  id: ChallengeResponseMessageStreamer
  parent: Catalyst.Core.Lib.P2P.PeerChallenger
  langs:
  - csharp
  - vb
  name: ChallengeResponseMessageStreamer
  nameWithType: PeerChallenger.ChallengeResponseMessageStreamer
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ChallengeResponseMessageStreamer
    path: ../src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
    startLine: 48
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P
  syntax:
    content: public ReplaySubject<IPeerChallengeResponse> ChallengeResponseMessageStreamer { get; }
    parameters: []
    return:
      type: System.Reactive.Subjects.ReplaySubject{Catalyst.Abstractions.P2P.IPeerChallengeResponse}
    content.vb: Public ReadOnly Property ChallengeResponseMessageStreamer As ReplaySubject(Of IPeerChallengeResponse)
  overload: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer*
  implements:
  - Catalyst.Abstractions.P2P.IPeerChallenger.ChallengeResponseMessageStreamer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.#ctor(Serilog.ILogger,Catalyst.Abstractions.P2P.IPeerClient,Catalyst.Abstractions.P2P.IPeerSettings,System.Int32,System.Reactive.Concurrency.IScheduler)
  commentId: M:Catalyst.Core.Lib.P2P.PeerChallenger.#ctor(Serilog.ILogger,Catalyst.Abstractions.P2P.IPeerClient,Catalyst.Abstractions.P2P.IPeerSettings,System.Int32,System.Reactive.Concurrency.IScheduler)
  id: '#ctor(Serilog.ILogger,Catalyst.Abstractions.P2P.IPeerClient,Catalyst.Abstractions.P2P.IPeerSettings,System.Int32,System.Reactive.Concurrency.IScheduler)'
  parent: Catalyst.Core.Lib.P2P.PeerChallenger
  langs:
  - csharp
  - vb
  name: PeerChallenger(ILogger, IPeerClient, IPeerSettings, Int32, IScheduler)
  nameWithType: PeerChallenger.PeerChallenger(ILogger, IPeerClient, IPeerSettings, Int32, IScheduler)
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.PeerChallenger(Serilog.ILogger, Catalyst.Abstractions.P2P.IPeerClient, Catalyst.Abstractions.P2P.IPeerSettings, System.Int32, System.Reactive.Concurrency.IScheduler)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
    startLine: 50
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P
  syntax:
    content: public PeerChallenger(ILogger logger, IPeerClient peerClient, IPeerSettings peerSettings, int peerChallengeWaitTimeSeconds, IScheduler scheduler = null)
    parameters:
    - id: logger
      type: Serilog.ILogger
    - id: peerClient
      type: Catalyst.Abstractions.P2P.IPeerClient
    - id: peerSettings
      type: Catalyst.Abstractions.P2P.IPeerSettings
    - id: peerChallengeWaitTimeSeconds
      type: System.Int32
    - id: scheduler
      type: System.Reactive.Concurrency.IScheduler
    content.vb: Public Sub New(logger As ILogger, peerClient As IPeerClient, peerSettings As IPeerSettings, peerChallengeWaitTimeSeconds As Integer, scheduler As IScheduler = Nothing)
  overload: Catalyst.Core.Lib.P2P.PeerChallenger.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  commentId: M:Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  id: ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  parent: Catalyst.Core.Lib.P2P.PeerChallenger
  langs:
  - csharp
  - vb
  name: ChallengePeerAsync(PeerId)
  nameWithType: PeerChallenger.ChallengePeerAsync(PeerId)
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ChallengePeerAsync
    path: ../src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
    startLine: 64
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P
  syntax:
    content: public Task<bool> ChallengePeerAsync(PeerId recipientPeerId)
    parameters:
    - id: recipientPeerId
      type: Catalyst.Protocol.Peer.PeerId
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function ChallengePeerAsync(recipientPeerId As PeerId) As Task(Of Boolean)
  overload: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync*
  implements:
  - Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.Dispose
  commentId: M:Catalyst.Core.Lib.P2P.PeerChallenger.Dispose
  id: Dispose
  parent: Catalyst.Core.Lib.P2P.PeerChallenger
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PeerChallenger.Dispose()
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.Dispose()
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Dispose
    path: ../src/Catalyst.Core.Lib/P2P/PeerChallenger.cs
    startLine: 101
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Catalyst.Core.Lib.P2P.PeerChallenger.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Catalyst.Core.Lib.P2P
  commentId: N:Catalyst.Core.Lib.P2P
  name: Catalyst.Core.Lib.P2P
  nameWithType: Catalyst.Core.Lib.P2P
  fullName: Catalyst.Core.Lib.P2P
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.P2P.IPeerChallenger
  commentId: T:Catalyst.Abstractions.P2P.IPeerChallenger
  parent: Catalyst.Abstractions.P2P
  name: IPeerChallenger
  nameWithType: IPeerChallenger
  fullName: Catalyst.Abstractions.P2P.IPeerChallenger
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.P2P
  commentId: N:Catalyst.Abstractions.P2P
  name: Catalyst.Abstractions.P2P
  nameWithType: Catalyst.Abstractions.P2P
  fullName: Catalyst.Abstractions.P2P
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer*
  commentId: Overload:Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
  name: ChallengeResponseMessageStreamer
  nameWithType: PeerChallenger.ChallengeResponseMessageStreamer
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengeResponseMessageStreamer
- uid: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengeResponseMessageStreamer
  commentId: P:Catalyst.Abstractions.P2P.IPeerChallenger.ChallengeResponseMessageStreamer
  parent: Catalyst.Abstractions.P2P.IPeerChallenger
  name: ChallengeResponseMessageStreamer
  nameWithType: IPeerChallenger.ChallengeResponseMessageStreamer
  fullName: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengeResponseMessageStreamer
- uid: System.Reactive.Subjects.ReplaySubject{Catalyst.Abstractions.P2P.IPeerChallengeResponse}
  commentId: T:System.Reactive.Subjects.ReplaySubject{Catalyst.Abstractions.P2P.IPeerChallengeResponse}
  parent: System.Reactive.Subjects
  definition: System.Reactive.Subjects.ReplaySubject`1
  name: ReplaySubject<IPeerChallengeResponse>
  nameWithType: ReplaySubject<IPeerChallengeResponse>
  fullName: System.Reactive.Subjects.ReplaySubject<Catalyst.Abstractions.P2P.IPeerChallengeResponse>
  nameWithType.vb: ReplaySubject(Of IPeerChallengeResponse)
  fullName.vb: System.Reactive.Subjects.ReplaySubject(Of Catalyst.Abstractions.P2P.IPeerChallengeResponse)
  name.vb: ReplaySubject(Of IPeerChallengeResponse)
  spec.csharp:
  - uid: System.Reactive.Subjects.ReplaySubject`1
    name: ReplaySubject
    nameWithType: ReplaySubject
    fullName: System.Reactive.Subjects.ReplaySubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.P2P.IPeerChallengeResponse
    name: IPeerChallengeResponse
    nameWithType: IPeerChallengeResponse
    fullName: Catalyst.Abstractions.P2P.IPeerChallengeResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Reactive.Subjects.ReplaySubject`1
    name: ReplaySubject
    nameWithType: ReplaySubject
    fullName: System.Reactive.Subjects.ReplaySubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.P2P.IPeerChallengeResponse
    name: IPeerChallengeResponse
    nameWithType: IPeerChallengeResponse
    fullName: Catalyst.Abstractions.P2P.IPeerChallengeResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reactive.Subjects.ReplaySubject`1
  commentId: T:System.Reactive.Subjects.ReplaySubject`1
  isExternal: true
  name: ReplaySubject<T>
  nameWithType: ReplaySubject<T>
  fullName: System.Reactive.Subjects.ReplaySubject<T>
  nameWithType.vb: ReplaySubject(Of T)
  fullName.vb: System.Reactive.Subjects.ReplaySubject(Of T)
  name.vb: ReplaySubject(Of T)
  spec.csharp:
  - uid: System.Reactive.Subjects.ReplaySubject`1
    name: ReplaySubject
    nameWithType: ReplaySubject
    fullName: System.Reactive.Subjects.ReplaySubject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Reactive.Subjects.ReplaySubject`1
    name: ReplaySubject
    nameWithType: ReplaySubject
    fullName: System.Reactive.Subjects.ReplaySubject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reactive.Subjects
  commentId: N:System.Reactive.Subjects
  isExternal: true
  name: System.Reactive.Subjects
  nameWithType: System.Reactive.Subjects
  fullName: System.Reactive.Subjects
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.#ctor*
  commentId: Overload:Catalyst.Core.Lib.P2P.PeerChallenger.#ctor
  name: PeerChallenger
  nameWithType: PeerChallenger.PeerChallenger
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.PeerChallenger
- uid: Serilog.ILogger
  commentId: T:Serilog.ILogger
  parent: Serilog
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Serilog.ILogger
- uid: Catalyst.Abstractions.P2P.IPeerClient
  commentId: T:Catalyst.Abstractions.P2P.IPeerClient
  parent: Catalyst.Abstractions.P2P
  name: IPeerClient
  nameWithType: IPeerClient
  fullName: Catalyst.Abstractions.P2P.IPeerClient
- uid: Catalyst.Abstractions.P2P.IPeerSettings
  commentId: T:Catalyst.Abstractions.P2P.IPeerSettings
  parent: Catalyst.Abstractions.P2P
  name: IPeerSettings
  nameWithType: IPeerSettings
  fullName: Catalyst.Abstractions.P2P.IPeerSettings
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reactive.Concurrency.IScheduler
  commentId: T:System.Reactive.Concurrency.IScheduler
  parent: System.Reactive.Concurrency
  isExternal: true
  name: IScheduler
  nameWithType: IScheduler
  fullName: System.Reactive.Concurrency.IScheduler
- uid: Serilog
  commentId: N:Serilog
  isExternal: true
  name: Serilog
  nameWithType: Serilog
  fullName: Serilog
- uid: System.Reactive.Concurrency
  commentId: N:System.Reactive.Concurrency
  isExternal: true
  name: System.Reactive.Concurrency
  nameWithType: System.Reactive.Concurrency
  fullName: System.Reactive.Concurrency
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync*
  commentId: Overload:Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync
  name: ChallengePeerAsync
  nameWithType: PeerChallenger.ChallengePeerAsync
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.ChallengePeerAsync
- uid: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  commentId: M:Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  parent: Catalyst.Abstractions.P2P.IPeerChallenger
  name: ChallengePeerAsync(PeerId)
  nameWithType: IPeerChallenger.ChallengePeerAsync(PeerId)
  fullName: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
  spec.csharp:
  - uid: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
    name: ChallengePeerAsync
    nameWithType: IPeerChallenger.ChallengePeerAsync
    fullName: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Peer.PeerId
    name: PeerId
    nameWithType: PeerId
    fullName: Catalyst.Protocol.Peer.PeerId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync(Catalyst.Protocol.Peer.PeerId)
    name: ChallengePeerAsync
    nameWithType: IPeerChallenger.ChallengePeerAsync
    fullName: Catalyst.Abstractions.P2P.IPeerChallenger.ChallengePeerAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Peer.PeerId
    name: PeerId
    nameWithType: PeerId
    fullName: Catalyst.Protocol.Peer.PeerId
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Protocol.Peer.PeerId
  commentId: T:Catalyst.Protocol.Peer.PeerId
  parent: Catalyst.Protocol.Peer
  name: PeerId
  nameWithType: PeerId
  fullName: Catalyst.Protocol.Peer.PeerId
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Protocol.Peer
  commentId: N:Catalyst.Protocol.Peer
  name: Catalyst.Protocol.Peer
  nameWithType: Catalyst.Protocol.Peer
  fullName: Catalyst.Protocol.Peer
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Core.Lib.P2P.PeerChallenger.Dispose*
  commentId: Overload:Catalyst.Core.Lib.P2P.PeerChallenger.Dispose
  name: Dispose
  nameWithType: PeerChallenger.Dispose
  fullName: Catalyst.Core.Lib.P2P.PeerChallenger.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
