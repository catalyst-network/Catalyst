### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Extensions.EnumerableExtensions
  commentId: T:Catalyst.Core.Lib.Extensions.EnumerableExtensions
  id: EnumerableExtensions
  parent: Catalyst.Core.Lib.Extensions
  children:
  - Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Nethermind.Dirichlet.Numerics.UInt256})
  - Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  langs:
  - csharp
  - vb
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Catalyst.Core.Lib.Extensions.EnumerableExtensions
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: EnumerableExtensions
    path: ../src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  syntax:
    content: public static class EnumerableExtensions
    content.vb: Public Module EnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  commentId: M:Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Sum<T>(IEnumerable<T>, Func<T, UInt64>)
  nameWithType: EnumerableExtensions.Sum<T>(IEnumerable<T>, Func<T, UInt64>)
  fullName: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.UInt64>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
    startLine: 32
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  syntax:
    content: public static ulong Sum<T>(this IEnumerable<T> enumerable, Func<T, ulong> selector)
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: selector
      type: System.Func{{T},System.UInt64}
    typeParameters:
    - id: T
    return:
      type: System.UInt64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of T)(enumerable As IEnumerable(Of T), selector As Func(Of T, ULong)) As ULong
  overload: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum*
  nameWithType.vb: EnumerableExtensions.Sum(Of T)(IEnumerable(Of T), Func(Of T, UInt64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.UInt64))
  name.vb: Sum(Of T)(IEnumerable(Of T), Func(Of T, UInt64))
- uid: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Nethermind.Dirichlet.Numerics.UInt256})
  commentId: M:Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Nethermind.Dirichlet.Numerics.UInt256})
  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,Nethermind.Dirichlet.Numerics.UInt256})
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Extensions.EnumerableExtensions
  langs:
  - csharp
  - vb
  name: Sum<T>(IEnumerable<T>, Func<T, UInt256>)
  nameWithType: EnumerableExtensions.Sum<T>(IEnumerable<T>, Func<T, UInt256>)
  fullName: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, Nethermind.Dirichlet.Numerics.UInt256>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Sum
    path: ../src/Catalyst.Core.Lib/Extensions/EnumerableExtensions.cs
    startLine: 47
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Extensions
  syntax:
    content: public static UInt256 Sum<T>(this IEnumerable<T> enumerable, Func<T, UInt256> selector)
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: selector
      type: System.Func{{T},Nethermind.Dirichlet.Numerics.UInt256}
    typeParameters:
    - id: T
    return:
      type: Nethermind.Dirichlet.Numerics.UInt256
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of T)(enumerable As IEnumerable(Of T), selector As Func(Of T, UInt256)) As UInt256
  overload: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum*
  nameWithType.vb: EnumerableExtensions.Sum(Of T)(IEnumerable(Of T), Func(Of T, UInt256))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, Nethermind.Dirichlet.Numerics.UInt256))
  name.vb: Sum(Of T)(IEnumerable(Of T), Func(Of T, UInt256))
references:
- uid: Catalyst.Core.Lib.Extensions
  commentId: N:Catalyst.Core.Lib.Extensions
  name: Catalyst.Core.Lib.Extensions
  nameWithType: Catalyst.Core.Lib.Extensions
  fullName: Catalyst.Core.Lib.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum*
  commentId: Overload:Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum
  name: Sum
  nameWithType: EnumerableExtensions.Sum
  fullName: Catalyst.Core.Lib.Extensions.EnumerableExtensions.Sum
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.UInt64}
  commentId: T:System.Func{``0,System.UInt64}
  parent: System
  definition: System.Func`2
  name: Func<T, UInt64>
  nameWithType: Func<T, UInt64>
  fullName: System.Func<T, System.UInt64>
  nameWithType.vb: Func(Of T, UInt64)
  fullName.vb: System.Func(Of T, System.UInt64)
  name.vb: Func(Of T, UInt64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},Nethermind.Dirichlet.Numerics.UInt256}
  commentId: T:System.Func{``0,Nethermind.Dirichlet.Numerics.UInt256}
  parent: System
  definition: System.Func`2
  name: Func<T, UInt256>
  nameWithType: Func<T, UInt256>
  fullName: System.Func<T, Nethermind.Dirichlet.Numerics.UInt256>
  nameWithType.vb: Func(Of T, UInt256)
  fullName.vb: System.Func(Of T, Nethermind.Dirichlet.Numerics.UInt256)
  name.vb: Func(Of T, UInt256)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Nethermind.Dirichlet.Numerics.UInt256
    name: UInt256
    nameWithType: UInt256
    fullName: Nethermind.Dirichlet.Numerics.UInt256
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Nethermind.Dirichlet.Numerics.UInt256
    name: UInt256
    nameWithType: UInt256
    fullName: Nethermind.Dirichlet.Numerics.UInt256
  - name: )
    nameWithType: )
    fullName: )
- uid: Nethermind.Dirichlet.Numerics.UInt256
  commentId: T:Nethermind.Dirichlet.Numerics.UInt256
  parent: Nethermind.Dirichlet.Numerics
  name: UInt256
  nameWithType: UInt256
  fullName: Nethermind.Dirichlet.Numerics.UInt256
- uid: Nethermind.Dirichlet.Numerics
  commentId: N:Nethermind.Dirichlet.Numerics
  name: Nethermind.Dirichlet.Numerics
  nameWithType: Nethermind.Dirichlet.Numerics
  fullName: Nethermind.Dirichlet.Numerics
