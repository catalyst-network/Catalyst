### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.P2P.Repository.IPeerRepositoryDao
  commentId: T:Catalyst.Core.Lib.P2P.Repository.IPeerRepositoryDao
  id: IPeerRepositoryDao
  parent: Catalyst.Core.Lib.P2P.Repository
  children: []
  langs:
  - csharp
  - vb
  name: IPeerRepositoryDao
  nameWithType: IPeerRepositoryDao
  fullName: Catalyst.Core.Lib.P2P.Repository.IPeerRepositoryDao
  type: Interface
  source:
    remote:
      path: src/Catalyst.Core.Lib/P2P/Repository/IPeerRepository.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: IPeerRepositoryDao
    path: ../src/Catalyst.Core.Lib/P2P/Repository/IPeerRepository.cs
    startLine: 31
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.P2P.Repository
  syntax:
    content: 'public interface IPeerRepositoryDao : IRepositoryWrapper<PeerDao>, IRepository<PeerDao, string>, ICrudRepository<PeerDao, string>, IRepositoryBase<PeerDao>, ICanAdd<PeerDao>, ICanUpdate<PeerDao>, ICanBatch<PeerDao>, IRepositoryQueryable<PeerDao>, ICanFind<PeerDao>, IDisposable, IRepositoryAggregates<PeerDao>'
    content.vb: >-
      Public Interface IPeerRepositoryDao

          Inherits IRepositoryWrapper(Of PeerDao)
  inheritedMembers:
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Exists(System.String)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet(System.String,Catalyst.Core.Lib.DAO.PeerDao@)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String[])
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.DisableCaching
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.ClearCache
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetPrimaryKey(Catalyst.Core.Lib.DAO.PeerDao)
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Conventions
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.EntityType
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.KeyType
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingStrategy
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingEnabled
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CacheUsed
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TraceInfo
  - SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GenerateKeyOnAdd
  - SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(Catalyst.Core.Lib.DAO.PeerDao)
  - SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  - SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(Catalyst.Core.Lib.DAO.PeerDao)
  - SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(Catalyst.Core.Lib.DAO.PeerDao)
  - SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}.BeginBatch
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.AsQueryable
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TInner},{TResult}}})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.String[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  - SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},Catalyst.Core.Lib.DAO.PeerDao@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},{TResult}@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},{TResult}@)
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  - System.IDisposable.Dispose
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  - SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
references:
- uid: Catalyst.Core.Lib.P2P.Repository
  commentId: N:Catalyst.Core.Lib.P2P.Repository
  name: Catalyst.Core.Lib.P2P.Repository
  nameWithType: Catalyst.Core.Lib.P2P.Repository
  fullName: Catalyst.Core.Lib.P2P.Repository
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get(`1)
  name: Get(String)
  nameWithType: ICrudRepository<PeerDao, String>.Get(String)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get(System.String)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1)
    name: Get
    nameWithType: ICrudRepository<PeerDao, String>.Get
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1)
    name: Get
    nameWithType: ICrudRepository(Of PeerDao, String).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get(String, IFetchStrategy<PeerDao>)
  nameWithType: ICrudRepository<PeerDao, String>.Get(String, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(String, IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Get(String, IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: ICrudRepository<PeerDao, String>.Get
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: ICrudRepository(Of PeerDao, String).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
  name: Get(String, String[])
  nameWithType: ICrudRepository<PeerDao, String>.Get(String, String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get(System.String, System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(String, String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
    name: Get
    nameWithType: ICrudRepository<PeerDao, String>.Get
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
    name: Get
    nameWithType: ICrudRepository(Of PeerDao, String).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get(String, Expression<Func<PeerDao, Object>>[])
  nameWithType: ICrudRepository<PeerDao, String>.Get(String, Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(String, Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: ICrudRepository<PeerDao, String>.Get
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: ICrudRepository(Of PeerDao, String).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Get<TResult>(String, Expression<Func<PeerDao, TResult>>)
  nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>(String, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get<TResult>(String, Expression<Func<PeerDao, TResult>>, IFetchStrategy<PeerDao>)
  nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>(String, Expression<Func<PeerDao, TResult>>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get<TResult>(String, Expression<Func<PeerDao, TResult>>, Expression<Func<PeerDao, Object>>[])
  nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>(String, Expression<Func<PeerDao, TResult>>, Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: Get<TResult>(String, Expression<Func<PeerDao, TResult>>, String[])
  nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>(String, Expression<Func<PeerDao, TResult>>, String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
  name: GetMany(String[])
  nameWithType: ICrudRepository<PeerDao, String>.GetMany(String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany(System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetMany(String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
    name: GetMany
    nameWithType: ICrudRepository<PeerDao, String>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
    name: GetMany
    nameWithType: ICrudRepository(Of PeerDao, String).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  name: GetMany(IEnumerable<String>)
  nameWithType: ICrudRepository<PeerDao, String>.GetMany(IEnumerable<String>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetMany(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: ICrudRepository<PeerDao, String>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: ICrudRepository(Of PeerDao, String).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetMany(IEnumerable<String>, IFetchStrategy<PeerDao>)
  nameWithType: ICrudRepository<PeerDao, String>.GetMany(IEnumerable<String>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetMany(IEnumerable(Of String), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: ICrudRepository<PeerDao, String>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: ICrudRepository(Of PeerDao, String).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  name: GetMany<TResult>(Expression<Func<PeerDao, TResult>>, String[])
  nameWithType: ICrudRepository<PeerDao, String>.GetMany<TResult>(Expression<Func<PeerDao, TResult>>, String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetMany(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.GetMany<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).GetMany(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<PeerDao, TResult>>)
  nameWithType: ICrudRepository<PeerDao, String>.GetMany<TResult>(IEnumerable<String>, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.GetMany<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).GetMany(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
  name: GetManyAsDictionary(String[])
  nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary(String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary(System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetManyAsDictionary(String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of PeerDao, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary(IEnumerable<String>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of PeerDao, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<PeerDao>)
  nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<PeerDao, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of PeerDao, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Exists(System.String)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Exists(System.String)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
  name: Exists(String)
  nameWithType: ICrudRepository<PeerDao, String>.Exists(String)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Exists(System.String)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Exists(String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Exists(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
    name: Exists
    nameWithType: ICrudRepository<PeerDao, String>.Exists
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
    name: Exists
    nameWithType: ICrudRepository(Of PeerDao, String).Exists
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet(System.String,Catalyst.Core.Lib.DAO.PeerDao@)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet(System.String,Catalyst.Core.Lib.DAO.PeerDao@)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
  name: TryGet(String, PeerDao)
  nameWithType: ICrudRepository<PeerDao, String>.TryGet(String, PeerDao)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.TryGet(System.String, Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).TryGet(String, PeerDao)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).TryGet(System.String, Catalyst.Core.Lib.DAO.PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: ICrudRepository<PeerDao, String>.TryGet
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: ICrudRepository(Of PeerDao, String).TryGet
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},``0@)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryGet<TResult>(String, Expression<Func<PeerDao, TResult>>, TResult)
  nameWithType: ICrudRepository<PeerDao, String>.TryGet<TResult>(String, Expression<Func<PeerDao, TResult>>, TResult)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, TResult)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).TryGet(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of PeerDao, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: ICrudRepository<PeerDao, String>.TryGet<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.TryGet<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: ICrudRepository(Of PeerDao, String).TryGet(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).TryGet(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
  name: Delete(String)
  nameWithType: ICrudRepository<PeerDao, String>.Delete(String)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete(System.String)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Delete(String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
    name: Delete
    nameWithType: ICrudRepository<PeerDao, String>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
    name: Delete
    nameWithType: ICrudRepository(Of PeerDao, String).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
  name: Delete(IEnumerable<String>)
  nameWithType: ICrudRepository<PeerDao, String>.Delete(IEnumerable<String>)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Delete(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: ICrudRepository<PeerDao, String>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: ICrudRepository(Of PeerDao, String).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Delete(System.String[])
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
  name: Delete(String[])
  nameWithType: ICrudRepository<PeerDao, String>.Delete(String[])
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete(System.String[])
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Delete(String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
    name: Delete
    nameWithType: ICrudRepository<PeerDao, String>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
    name: Delete
    nameWithType: ICrudRepository(Of PeerDao, String).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.DisableCaching
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.DisableCaching
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.DisableCaching
  name: DisableCaching()
  nameWithType: ICrudRepository<PeerDao, String>.DisableCaching()
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.DisableCaching()
  nameWithType.vb: ICrudRepository(Of PeerDao, String).DisableCaching()
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).DisableCaching()
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.DisableCaching
    name: DisableCaching
    nameWithType: ICrudRepository<PeerDao, String>.DisableCaching
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.DisableCaching
    name: DisableCaching
    nameWithType: ICrudRepository(Of PeerDao, String).DisableCaching
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.ClearCache
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.ClearCache
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.ClearCache
  name: ClearCache()
  nameWithType: ICrudRepository<PeerDao, String>.ClearCache()
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.ClearCache()
  nameWithType.vb: ICrudRepository(Of PeerDao, String).ClearCache()
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).ClearCache()
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.ClearCache
    name: ClearCache
    nameWithType: ICrudRepository<PeerDao, String>.ClearCache
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.ClearCache
    name: ClearCache
    nameWithType: ICrudRepository(Of PeerDao, String).ClearCache
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetPrimaryKey(Catalyst.Core.Lib.DAO.PeerDao)
  commentId: M:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GetPrimaryKey(Catalyst.Core.Lib.DAO.PeerDao)
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
  name: GetPrimaryKey(PeerDao)
  nameWithType: ICrudRepository<PeerDao, String>.GetPrimaryKey(PeerDao)
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetPrimaryKey(Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GetPrimaryKey(PeerDao)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetPrimaryKey(Catalyst.Core.Lib.DAO.PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: ICrudRepository<PeerDao, String>.GetPrimaryKey
    fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: ICrudRepository(Of PeerDao, String).GetPrimaryKey
    fullName: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Conventions
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.Conventions
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.Conventions
  name: Conventions
  nameWithType: ICrudRepository<PeerDao, String>.Conventions
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.Conventions
  nameWithType.vb: ICrudRepository(Of PeerDao, String).Conventions
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).Conventions
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.EntityType
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.EntityType
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.EntityType
  name: EntityType
  nameWithType: ICrudRepository<PeerDao, String>.EntityType
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.EntityType
  nameWithType.vb: ICrudRepository(Of PeerDao, String).EntityType
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).EntityType
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.KeyType
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.KeyType
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.KeyType
  name: KeyType
  nameWithType: ICrudRepository<PeerDao, String>.KeyType
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.KeyType
  nameWithType.vb: ICrudRepository(Of PeerDao, String).KeyType
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).KeyType
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingStrategy
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingStrategy
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.CachingStrategy
  name: CachingStrategy
  nameWithType: ICrudRepository<PeerDao, String>.CachingStrategy
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.CachingStrategy
  nameWithType.vb: ICrudRepository(Of PeerDao, String).CachingStrategy
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).CachingStrategy
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingEnabled
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CachingEnabled
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.CachingEnabled
  name: CachingEnabled
  nameWithType: ICrudRepository<PeerDao, String>.CachingEnabled
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.CachingEnabled
  nameWithType.vb: ICrudRepository(Of PeerDao, String).CachingEnabled
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).CachingEnabled
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CacheUsed
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.CacheUsed
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.CacheUsed
  name: CacheUsed
  nameWithType: ICrudRepository<PeerDao, String>.CacheUsed
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.CacheUsed
  nameWithType.vb: ICrudRepository(Of PeerDao, String).CacheUsed
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).CacheUsed
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TraceInfo
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.TraceInfo
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.TraceInfo
  name: TraceInfo
  nameWithType: ICrudRepository<PeerDao, String>.TraceInfo
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.TraceInfo
  nameWithType.vb: ICrudRepository(Of PeerDao, String).TraceInfo
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).TraceInfo
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GenerateKeyOnAdd
  commentId: P:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}.GenerateKeyOnAdd
  parent: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  definition: SharpRepository.Repository.ICrudRepository`2.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: ICrudRepository<PeerDao, String>.GenerateKeyOnAdd
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>.GenerateKeyOnAdd
  nameWithType.vb: ICrudRepository(Of PeerDao, String).GenerateKeyOnAdd
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String).GenerateKeyOnAdd
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(Catalyst.Core.Lib.DAO.PeerDao)
  commentId: M:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(Catalyst.Core.Lib.DAO.PeerDao)
  parent: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
  name: Delete(PeerDao)
  nameWithType: IRepositoryBase<PeerDao>.Delete(PeerDao)
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete(Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: IRepositoryBase(Of PeerDao).Delete(PeerDao)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete(Catalyst.Core.Lib.DAO.PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
    name: Delete
    nameWithType: IRepositoryBase<PeerDao>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
    name: Delete
    nameWithType: IRepositoryBase(Of PeerDao).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
  name: Delete(IEnumerable<PeerDao>)
  nameWithType: IRepositoryBase<PeerDao>.Delete(IEnumerable<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete(System.Collections.Generic.IEnumerable<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryBase(Of PeerDao).Delete(IEnumerable(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Delete(IEnumerable(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: IRepositoryBase<PeerDao>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: IRepositoryBase(Of PeerDao).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  parent: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<PeerDao, Boolean>>)
  nameWithType: IRepositoryBase<PeerDao>.Delete(Expression<Func<PeerDao, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>)
  nameWithType.vb: IRepositoryBase(Of PeerDao).Delete(Expression(Of Func(Of PeerDao, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of PeerDao, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: IRepositoryBase<PeerDao>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: IRepositoryBase(Of PeerDao).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}.Delete(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Delete(ISpecification<PeerDao>)
  nameWithType: IRepositoryBase<PeerDao>.Delete(ISpecification<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryBase(Of PeerDao).Delete(ISpecification(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Delete(ISpecification(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: IRepositoryBase<PeerDao>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: IRepositoryBase(Of PeerDao).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(Catalyst.Core.Lib.DAO.PeerDao)
  commentId: M:SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(Catalyst.Core.Lib.DAO.PeerDao)
  parent: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
  name: Add(PeerDao)
  nameWithType: ICanAdd<PeerDao>.Add(PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Lib.DAO.PeerDao>.Add(Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanAdd(Of PeerDao).Add(PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Lib.DAO.PeerDao).Add(Catalyst.Core.Lib.DAO.PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
    name: Add
    nameWithType: ICanAdd<PeerDao>.Add
    fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Lib.DAO.PeerDao>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
    name: Add
    nameWithType: ICanAdd(Of PeerDao).Add
    fullName: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Lib.DAO.PeerDao).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}.Add(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<PeerDao>)
  nameWithType: ICanAdd<PeerDao>.Add(IEnumerable<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Lib.DAO.PeerDao>.Add(System.Collections.Generic.IEnumerable<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanAdd(Of PeerDao).Add(IEnumerable(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Lib.DAO.PeerDao).Add(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Add(IEnumerable(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: ICanAdd<PeerDao>.Add
    fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Lib.DAO.PeerDao>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: ICanAdd(Of PeerDao).Add
    fullName: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Lib.DAO.PeerDao).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(Catalyst.Core.Lib.DAO.PeerDao)
  commentId: M:SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(Catalyst.Core.Lib.DAO.PeerDao)
  parent: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
  name: Update(PeerDao)
  nameWithType: ICanUpdate<PeerDao>.Update(PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Lib.DAO.PeerDao>.Update(Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanUpdate(Of PeerDao).Update(PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Lib.DAO.PeerDao).Update(Catalyst.Core.Lib.DAO.PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
    name: Update
    nameWithType: ICanUpdate<PeerDao>.Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Lib.DAO.PeerDao>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
    name: Update
    nameWithType: ICanUpdate(Of PeerDao).Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Lib.DAO.PeerDao).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}.Update(System.Collections.Generic.IEnumerable{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
  name: Update(IEnumerable<PeerDao>)
  nameWithType: ICanUpdate<PeerDao>.Update(IEnumerable<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Lib.DAO.PeerDao>.Update(System.Collections.Generic.IEnumerable<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanUpdate(Of PeerDao).Update(IEnumerable(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Lib.DAO.PeerDao).Update(System.Collections.Generic.IEnumerable(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Update(IEnumerable(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: ICanUpdate<PeerDao>.Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Lib.DAO.PeerDao>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: ICanUpdate(Of PeerDao).Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Lib.DAO.PeerDao).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}.BeginBatch
  commentId: M:SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}.BeginBatch
  parent: SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
  name: BeginBatch()
  nameWithType: ICanBatch<PeerDao>.BeginBatch()
  fullName: SharpRepository.Repository.Traits.ICanBatch<Catalyst.Core.Lib.DAO.PeerDao>.BeginBatch()
  nameWithType.vb: ICanBatch(Of PeerDao).BeginBatch()
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of Catalyst.Core.Lib.DAO.PeerDao).BeginBatch()
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
    name: BeginBatch
    nameWithType: ICanBatch<PeerDao>.BeginBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch<Catalyst.Core.Lib.DAO.PeerDao>.BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
    name: BeginBatch
    nameWithType: ICanBatch(Of PeerDao).BeginBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch(Of Catalyst.Core.Lib.DAO.PeerDao).BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.AsQueryable
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.AsQueryable
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
  name: AsQueryable()
  nameWithType: IRepositoryQueryable<PeerDao>.AsQueryable()
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.AsQueryable()
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).AsQueryable()
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
    name: AsQueryable
    nameWithType: IRepositoryQueryable<PeerDao>.AsQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
    name: AsQueryable
    nameWithType: IRepositoryQueryable(Of PeerDao).AsQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TInner},{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``1,``2}})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<PeerDao, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<PeerDao, TInner, TResult>>)
  nameWithType: IRepositoryQueryable<PeerDao>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<PeerDao, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<PeerDao, TInner, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TInner, TResult>>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of PeerDao, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of PeerDao, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of PeerDao, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of PeerDao, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
  name: GetAll()
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll()
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll()
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll()
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IFetchStrategy<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.String[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
  name: GetAll(String[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(System.String[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(Expression<Func<PeerDao, Object>>[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll(IQueryOptions<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IQueryOptions<PeerDao>, IFetchStrategy<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(IQueryOptions<PeerDao>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(IQueryOptions(Of PeerDao), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(IQueryOptions(Of PeerDao), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll(IQueryOptions<PeerDao>, String[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(IQueryOptions<PeerDao>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(IQueryOptions(Of PeerDao), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), System.String())
  name.vb: GetAll(IQueryOptions(Of PeerDao), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(IQueryOptions<PeerDao>, Expression<Func<PeerDao, Object>>[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll(IQueryOptions<PeerDao>, Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(IQueryOptions(Of PeerDao), Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: GetAll(IQueryOptions(Of PeerDao), Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IFetchStrategy<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.String[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, String[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, Expression<Func<PeerDao, Object>>[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.FetchStrategies.IFetchStrategy{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, IFetchStrategy<PeerDao>)
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, IFetchStrategy<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), IFetchStrategy(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), IFetchStrategy(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.String[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, String[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}.GetAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Object}}[])
  parent: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, Expression<Func<PeerDao, Object>>[])
  nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>(Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, Expression<Func<PeerDao, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), Expression(Of Func(Of PeerDao, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), Expression(Of Func(Of PeerDao, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<PeerDao>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of PeerDao).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.Find(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).Find(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Find(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind<PeerDao>.Find
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind(Of PeerDao).Find
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.Find<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).Find(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Find(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: ICanFind<PeerDao>.Find<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: ICanFind(Of PeerDao).Find(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exists(Expression<Func<PeerDao, Boolean>>)
  nameWithType: ICanFind<PeerDao>.Exists(Expression<Func<PeerDao, Boolean>>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Exists(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>)
  nameWithType.vb: ICanFind(Of PeerDao).Exists(Expression(Of Func(Of PeerDao, Boolean)))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Exists(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of PeerDao, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: ICanFind<PeerDao>.Exists
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: ICanFind(Of PeerDao).Exists
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},Catalyst.Core.Lib.DAO.PeerDao@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},Catalyst.Core.Lib.DAO.PeerDao@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  name: TryFind(Expression<Func<PeerDao, Boolean>>, PeerDao)
  nameWithType: ICanFind<PeerDao>.TryFind(Expression<Func<PeerDao, Boolean>>, PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Expression(Of Func(Of PeerDao, Boolean)), PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: TryFind(Expression(Of Func(Of PeerDao, Boolean)), PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: ICanFind<PeerDao>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: ICanFind(Of PeerDao).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>, PeerDao)
  nameWithType: ICanFind<PeerDao>.TryFind(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>, PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao), PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: TryFind(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao), PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<PeerDao>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of PeerDao).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},``0@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, TResult)
  nameWithType: ICanFind<PeerDao>.TryFind<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, TResult)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<PeerDao>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of PeerDao).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},{TResult}@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},``0@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, TResult)
  nameWithType: ICanFind<PeerDao>.TryFind<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, TResult)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<PeerDao>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of PeerDao).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(ISpecification<PeerDao>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.Find(ISpecification<PeerDao>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).Find(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Find(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind<PeerDao>.Find
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind(Of PeerDao).Find
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Find``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.Find<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).Find(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Find(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: ICanFind<PeerDao>.Find<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: ICanFind(Of PeerDao).Find(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.Exists(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Exists(ISpecification<PeerDao>)
  nameWithType: ICanFind<PeerDao>.Exists(ISpecification<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Exists(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).Exists(ISpecification(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Exists(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Exists(ISpecification(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: ICanFind<PeerDao>.Exists
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: ICanFind(Of PeerDao).Exists
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  name: TryFind(ISpecification<PeerDao>, PeerDao)
  nameWithType: ICanFind<PeerDao>.TryFind(ISpecification<PeerDao>, PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(ISpecification(Of PeerDao), PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: TryFind(ISpecification(Of PeerDao), PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<PeerDao>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of PeerDao).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},Catalyst.Core.Lib.DAO.PeerDao@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(ISpecification<PeerDao>, IQueryOptions<PeerDao>, PeerDao)
  nameWithType: ICanFind<PeerDao>.TryFind(ISpecification<PeerDao>, IQueryOptions<PeerDao>, PeerDao)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, Catalyst.Core.Lib.DAO.PeerDao)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao), PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: TryFind(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao), PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<PeerDao>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of PeerDao).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},``0@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, TResult)
  nameWithType: ICanFind<PeerDao>.TryFind<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, TResult)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<PeerDao>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of PeerDao).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},{TResult}@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao},``0@)
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, TResult)
  nameWithType: ICanFind<PeerDao>.TryFind<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>, TResult)
  nameWithType.vb: ICanFind(Of PeerDao).TryFind(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<PeerDao>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of PeerDao).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.FindAll(Expression<Func<PeerDao, Boolean>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).FindAll(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: FindAll(Expression(Of Func(Of PeerDao, Boolean)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind<PeerDao>.FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind(Of PeerDao).FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.FindAll<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).FindAll(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: ICanFind<PeerDao>.FindAll<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: ICanFind(Of PeerDao).FindAll(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(ISpecification<PeerDao>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.FindAll(ISpecification<PeerDao>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).FindAll(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: FindAll(ISpecification(Of PeerDao), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind<PeerDao>.FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind(Of PeerDao).FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},SharpRepository.Repository.Queries.IQueryOptions{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  nameWithType: ICanFind<PeerDao>.FindAll<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>, IQueryOptions<PeerDao>)
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: ICanFind(Of PeerDao).FindAll(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: FindAll(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)), IQueryOptions(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: ICanFind<PeerDao>.FindAll<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: ICanFind(Of PeerDao).FindAll(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Lib.DAO.PeerDao},``1}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>(Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Lib.DAO.PeerDao>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Lib.DAO.PeerDao), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Lib.DAO.PeerDao},``1}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Lib.DAO.PeerDao>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Lib.DAO.PeerDao), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},Catalyst.Core.Lib.DAO.PeerDao},{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,Catalyst.Core.Lib.DAO.PeerDao},``1}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, PeerDao>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, Catalyst.Core.Lib.DAO.PeerDao>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, Catalyst.Core.Lib.DAO.PeerDao), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, PeerDao), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Count
  name: Count()
  nameWithType: IRepositoryAggregates<PeerDao>.Count()
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count()
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Count()
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count
    name: Count
    nameWithType: IRepositoryAggregates<PeerDao>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count
    name: Count
    nameWithType: IRepositoryAggregates(Of PeerDao).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Count(ISpecification<PeerDao>)
  nameWithType: IRepositoryAggregates<PeerDao>.Count(ISpecification<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Count(ISpecification(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: Count(ISpecification(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: IRepositoryAggregates<PeerDao>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: IRepositoryAggregates(Of PeerDao).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Count(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<PeerDao, Boolean>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Count(Expression<Func<PeerDao, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Count(Expression(Of Func(Of PeerDao, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of PeerDao, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: IRepositoryAggregates<PeerDao>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: IRepositoryAggregates(Of PeerDao).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
  name: LongCount()
  nameWithType: IRepositoryAggregates<PeerDao>.LongCount()
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount()
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).LongCount()
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
    name: LongCount
    nameWithType: IRepositoryAggregates<PeerDao>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
    name: LongCount
    nameWithType: IRepositoryAggregates(Of PeerDao).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: LongCount(ISpecification<PeerDao>)
  nameWithType: IRepositoryAggregates<PeerDao>.LongCount(ISpecification<PeerDao>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).LongCount(ISpecification(Of PeerDao))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao))
  name.vb: LongCount(ISpecification(Of PeerDao))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: IRepositoryAggregates<PeerDao>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: IRepositoryAggregates(Of PeerDao).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.LongCount(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<PeerDao, Boolean>>)
  nameWithType: IRepositoryAggregates<PeerDao>.LongCount(Expression<Func<PeerDao, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).LongCount(Expression(Of Func(Of PeerDao, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of PeerDao, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: IRepositoryAggregates<PeerDao>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: IRepositoryAggregates(Of PeerDao).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Sum(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Sum(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<PeerDao>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of PeerDao).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int32}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int32>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int32)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Int64}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int64>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Int64)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Decimal}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Decimal>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Double}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Double>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Double)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Single}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Single>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Single)))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(ISpecification<PeerDao>, Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Average(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Average(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<PeerDao>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of PeerDao).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>(Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Min(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Min(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Min``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Min(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>(Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Max(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>(ISpecification<PeerDao>, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Max(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TResult}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.Max``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>)
  nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).Max(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<PeerDao>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of PeerDao).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>(Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>(Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{Catalyst.Core.Lib.DAO.PeerDao},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>(ISpecification<PeerDao>, Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<Catalyst.Core.Lib.DAO.PeerDao>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of Catalyst.Core.Lib.DAO.PeerDao), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of PeerDao), Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,{TGroupKey}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Catalyst.Core.Lib.DAO.PeerDao,``0}})
  parent: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  definition: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>)
  nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>(Expression<Func<PeerDao, Boolean>>, Expression<Func<PeerDao, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<Catalyst.Core.Lib.DAO.PeerDao, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of Catalyst.Core.Lib.DAO.PeerDao, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of PeerDao, Boolean)), Expression(Of Func(Of PeerDao, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<PeerDao>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of PeerDao).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get(`1)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get(`1)
  isExternal: true
  name: Get(TKey)
  nameWithType: ICrudRepository<T, TKey>.Get(TKey)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get(TKey)
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1)
    name: Get
    nameWithType: ICrudRepository<T, TKey>.Get
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1)
    name: Get
    nameWithType: ICrudRepository(Of T, TKey).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  commentId: T:SharpRepository.Repository.ICrudRepository{Catalyst.Core.Lib.DAO.PeerDao,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.ICrudRepository`2
  name: ICrudRepository<PeerDao, String>
  nameWithType: ICrudRepository<PeerDao, String>
  fullName: SharpRepository.Repository.ICrudRepository<Catalyst.Core.Lib.DAO.PeerDao, System.String>
  nameWithType.vb: ICrudRepository(Of PeerDao, String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of Catalyst.Core.Lib.DAO.PeerDao, System.String)
  name.vb: ICrudRepository(Of PeerDao, String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get(TKey, IFetchStrategy<T>)
  nameWithType: ICrudRepository<T, TKey>.Get(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: ICrudRepository<T, TKey>.Get
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: ICrudRepository(Of T, TKey).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
  isExternal: true
  name: Get(TKey, String[])
  nameWithType: ICrudRepository<T, TKey>.Get(TKey, String[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get(TKey, System.String[])
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(TKey, String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(TKey, System.String())
  name.vb: Get(TKey, String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
    name: Get
    nameWithType: ICrudRepository<T, TKey>.Get
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.String[])
    name: Get
    nameWithType: ICrudRepository(Of T, TKey).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get(TKey, Expression<Func<T, Object>>[])
  nameWithType: ICrudRepository<T, TKey>.Get(TKey, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get(TKey, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(TKey, Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(TKey, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: ICrudRepository<T, TKey>.Get
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: ICrudRepository(Of T, TKey).Get
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>)
  nameWithType: ICrudRepository<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: ICrudRepository<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: ICrudRepository<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: ICrudRepository<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: ICrudRepository<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: ICrudRepository<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, String[])
  nameWithType: ICrudRepository<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: ICrudRepository<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
  isExternal: true
  name: GetMany(TKey[])
  nameWithType: ICrudRepository<T, TKey>.GetMany(TKey[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany(TKey[])
  nameWithType.vb: ICrudRepository(Of T, TKey).GetMany(TKey())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(TKey())
  name.vb: GetMany(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
    name: GetMany
    nameWithType: ICrudRepository<T, TKey>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(`1[])
    name: GetMany
    nameWithType: ICrudRepository(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: GetMany(IEnumerable<TKey>)
  nameWithType: ICrudRepository<T, TKey>.GetMany(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetMany(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: GetMany(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: ICrudRepository<T, TKey>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: ICrudRepository(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetMany(IEnumerable<TKey>, IFetchStrategy<T>)
  nameWithType: ICrudRepository<T, TKey>.GetMany(IEnumerable<TKey>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany(System.Collections.Generic.IEnumerable<TKey>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetMany(IEnumerable(Of TKey), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(System.Collections.Generic.IEnumerable(Of TKey), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetMany(IEnumerable(Of TKey), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: ICrudRepository<T, TKey>.GetMany
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: ICrudRepository(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  isExternal: true
  name: GetMany<TResult>(Expression<Func<T, TResult>>, TKey[])
  nameWithType: ICrudRepository<T, TKey>.GetMany<TResult>(Expression<Func<T, TResult>>, TKey[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, TKey[])
  nameWithType.vb: ICrudRepository(Of T, TKey).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), TKey())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TKey())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany<TResult>
    nameWithType: ICrudRepository<T, TKey>.GetMany<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).GetMany(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetMany<TResult>(IEnumerable<TKey>, Expression<Func<T, TResult>>)
  nameWithType: ICrudRepository<T, TKey>.GetMany<TResult>(IEnumerable<TKey>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany<TResult>(System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetMany(Of TResult)(IEnumerable(Of TKey), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of TKey), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: ICrudRepository<T, TKey>.GetMany<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).GetMany(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
  isExternal: true
  name: GetManyAsDictionary(TKey[])
  nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary(TKey[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary(TKey[])
  nameWithType.vb: ICrudRepository(Of T, TKey).GetManyAsDictionary(TKey())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary(TKey())
  name.vb: GetManyAsDictionary(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<TKey>)
  nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetManyAsDictionary(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: GetManyAsDictionary(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<TKey>, IFetchStrategy<T>)
  nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary(IEnumerable<TKey>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<TKey>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetManyAsDictionary(IEnumerable(Of TKey), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of TKey), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetManyAsDictionary(IEnumerable(Of TKey), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: ICrudRepository(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Exists(`1)
  isExternal: true
  name: Exists(TKey)
  nameWithType: ICrudRepository<T, TKey>.Exists(TKey)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Exists(TKey)
  nameWithType.vb: ICrudRepository(Of T, TKey).Exists(TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Exists(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
    name: Exists
    nameWithType: ICrudRepository<T, TKey>.Exists
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Exists(`1)
    name: Exists
    nameWithType: ICrudRepository(Of T, TKey).Exists
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
  isExternal: true
  name: TryGet(TKey, T)
  nameWithType: ICrudRepository<T, TKey>.TryGet(TKey, T)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.TryGet(TKey, T)
  nameWithType.vb: ICrudRepository(Of T, TKey).TryGet(TKey, T)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).TryGet(TKey, T)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: ICrudRepository<T, TKey>.TryGet
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: ICrudRepository(Of T, TKey).TryGet
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryGet<TResult>(TKey, Expression<Func<T, TResult>>, TResult)
  nameWithType: ICrudRepository<T, TKey>.TryGet<TResult>(TKey, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.TryGet<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: ICrudRepository(Of T, TKey).TryGet(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).TryGet(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryGet(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: ICrudRepository<T, TKey>.TryGet<TResult>
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.TryGet<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: ICrudRepository(Of T, TKey).TryGet(Of TResult)
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).TryGet(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Delete(`1)
  isExternal: true
  name: Delete(TKey)
  nameWithType: ICrudRepository<T, TKey>.Delete(TKey)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete(TKey)
  nameWithType.vb: ICrudRepository(Of T, TKey).Delete(TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
    name: Delete
    nameWithType: ICrudRepository<T, TKey>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1)
    name: Delete
    nameWithType: ICrudRepository(Of T, TKey).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: Delete(IEnumerable<TKey>)
  nameWithType: ICrudRepository<T, TKey>.Delete(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ICrudRepository(Of T, TKey).Delete(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Delete(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: ICrudRepository<T, TKey>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: ICrudRepository(Of T, TKey).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
  commentId: M:SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
  isExternal: true
  name: Delete(TKey[])
  nameWithType: ICrudRepository<T, TKey>.Delete(TKey[])
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete(TKey[])
  nameWithType.vb: ICrudRepository(Of T, TKey).Delete(TKey())
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete(TKey())
  name.vb: Delete(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
    name: Delete
    nameWithType: ICrudRepository<T, TKey>.Delete
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.Delete(`1[])
    name: Delete
    nameWithType: ICrudRepository(Of T, TKey).Delete
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.DisableCaching
  commentId: M:SharpRepository.Repository.ICrudRepository`2.DisableCaching
  isExternal: true
  name: DisableCaching()
  nameWithType: ICrudRepository<T, TKey>.DisableCaching()
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.DisableCaching()
  nameWithType.vb: ICrudRepository(Of T, TKey).DisableCaching()
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).DisableCaching()
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.DisableCaching
    name: DisableCaching
    nameWithType: ICrudRepository<T, TKey>.DisableCaching
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.DisableCaching
    name: DisableCaching
    nameWithType: ICrudRepository(Of T, TKey).DisableCaching
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.ClearCache
  commentId: M:SharpRepository.Repository.ICrudRepository`2.ClearCache
  isExternal: true
  name: ClearCache()
  nameWithType: ICrudRepository<T, TKey>.ClearCache()
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.ClearCache()
  nameWithType.vb: ICrudRepository(Of T, TKey).ClearCache()
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).ClearCache()
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.ClearCache
    name: ClearCache
    nameWithType: ICrudRepository<T, TKey>.ClearCache
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.ClearCache
    name: ClearCache
    nameWithType: ICrudRepository(Of T, TKey).ClearCache
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
  commentId: M:SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
  isExternal: true
  name: GetPrimaryKey(T)
  nameWithType: ICrudRepository<T, TKey>.GetPrimaryKey(T)
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetPrimaryKey(T)
  nameWithType.vb: ICrudRepository(Of T, TKey).GetPrimaryKey(T)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetPrimaryKey(T)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: ICrudRepository<T, TKey>.GetPrimaryKey
    fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: ICrudRepository(Of T, TKey).GetPrimaryKey
    fullName: SharpRepository.Repository.ICrudRepository(Of T, TKey).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2.Conventions
  commentId: P:SharpRepository.Repository.ICrudRepository`2.Conventions
  isExternal: true
  name: Conventions
  nameWithType: ICrudRepository<T, TKey>.Conventions
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.Conventions
  nameWithType.vb: ICrudRepository(Of T, TKey).Conventions
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).Conventions
- uid: SharpRepository.Repository.ICrudRepository`2.EntityType
  commentId: P:SharpRepository.Repository.ICrudRepository`2.EntityType
  isExternal: true
  name: EntityType
  nameWithType: ICrudRepository<T, TKey>.EntityType
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.EntityType
  nameWithType.vb: ICrudRepository(Of T, TKey).EntityType
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).EntityType
- uid: SharpRepository.Repository.ICrudRepository`2.KeyType
  commentId: P:SharpRepository.Repository.ICrudRepository`2.KeyType
  isExternal: true
  name: KeyType
  nameWithType: ICrudRepository<T, TKey>.KeyType
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.KeyType
  nameWithType.vb: ICrudRepository(Of T, TKey).KeyType
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).KeyType
- uid: SharpRepository.Repository.ICrudRepository`2.CachingStrategy
  commentId: P:SharpRepository.Repository.ICrudRepository`2.CachingStrategy
  isExternal: true
  name: CachingStrategy
  nameWithType: ICrudRepository<T, TKey>.CachingStrategy
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.CachingStrategy
  nameWithType.vb: ICrudRepository(Of T, TKey).CachingStrategy
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).CachingStrategy
- uid: SharpRepository.Repository.ICrudRepository`2.CachingEnabled
  commentId: P:SharpRepository.Repository.ICrudRepository`2.CachingEnabled
  isExternal: true
  name: CachingEnabled
  nameWithType: ICrudRepository<T, TKey>.CachingEnabled
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.CachingEnabled
  nameWithType.vb: ICrudRepository(Of T, TKey).CachingEnabled
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).CachingEnabled
- uid: SharpRepository.Repository.ICrudRepository`2.CacheUsed
  commentId: P:SharpRepository.Repository.ICrudRepository`2.CacheUsed
  isExternal: true
  name: CacheUsed
  nameWithType: ICrudRepository<T, TKey>.CacheUsed
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.CacheUsed
  nameWithType.vb: ICrudRepository(Of T, TKey).CacheUsed
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).CacheUsed
- uid: SharpRepository.Repository.ICrudRepository`2.TraceInfo
  commentId: P:SharpRepository.Repository.ICrudRepository`2.TraceInfo
  isExternal: true
  name: TraceInfo
  nameWithType: ICrudRepository<T, TKey>.TraceInfo
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.TraceInfo
  nameWithType.vb: ICrudRepository(Of T, TKey).TraceInfo
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).TraceInfo
- uid: SharpRepository.Repository.ICrudRepository`2.GenerateKeyOnAdd
  commentId: P:SharpRepository.Repository.ICrudRepository`2.GenerateKeyOnAdd
  isExternal: true
  name: GenerateKeyOnAdd
  nameWithType: ICrudRepository<T, TKey>.GenerateKeyOnAdd
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>.GenerateKeyOnAdd
  nameWithType.vb: ICrudRepository(Of T, TKey).GenerateKeyOnAdd
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey).GenerateKeyOnAdd
- uid: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
  commentId: M:SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
  isExternal: true
  name: Delete(T)
  nameWithType: IRepositoryBase<T>.Delete(T)
  fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete(T)
  nameWithType.vb: IRepositoryBase(Of T).Delete(T)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T).Delete(T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
    name: Delete
    nameWithType: IRepositoryBase<T>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(`0)
    name: Delete
    nameWithType: IRepositoryBase(Of T).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of T).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.IRepositoryBase{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryBase`1
  name: IRepositoryBase<PeerDao>
  nameWithType: IRepositoryBase<PeerDao>
  fullName: SharpRepository.Repository.IRepositoryBase<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: IRepositoryBase(Of PeerDao)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: IRepositoryBase(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Delete(IEnumerable<T>)
  nameWithType: IRepositoryBase<T>.Delete(IEnumerable<T>)
  fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IRepositoryBase(Of T).Delete(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: IRepositoryBase<T>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: IRepositoryBase(Of T).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of T).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: IRepositoryBase<T>.Delete(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: IRepositoryBase(Of T).Delete(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: IRepositoryBase<T>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: IRepositoryBase(Of T).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of T).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Delete(ISpecification<T>)
  nameWithType: IRepositoryBase<T>.Delete(ISpecification<T>)
  fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: IRepositoryBase(Of T).Delete(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T).Delete(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Delete(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: IRepositoryBase<T>.Delete
    fullName: SharpRepository.Repository.IRepositoryBase<T>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: IRepositoryBase(Of T).Delete
    fullName: SharpRepository.Repository.IRepositoryBase(Of T).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
  commentId: M:SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICanAdd<T>.Add(T)
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>.Add(T)
  nameWithType.vb: ICanAdd(Of T).Add(T)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T).Add(T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
    name: Add
    nameWithType: ICanAdd<T>.Add
    fullName: SharpRepository.Repository.Traits.ICanAdd<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(`0)
    name: Add
    nameWithType: ICanAdd(Of T).Add
    fullName: SharpRepository.Repository.Traits.ICanAdd(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.Traits.ICanAdd{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanAdd`1
  name: ICanAdd<PeerDao>
  nameWithType: ICanAdd<PeerDao>
  fullName: SharpRepository.Repository.Traits.ICanAdd<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: ICanAdd(Of PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: ICanAdd(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<T>)
  nameWithType: ICanAdd<T>.Add(IEnumerable<T>)
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ICanAdd(Of T).Add(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: ICanAdd<T>.Add
    fullName: SharpRepository.Repository.Traits.ICanAdd<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: ICanAdd(Of T).Add
    fullName: SharpRepository.Repository.Traits.ICanAdd(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
  commentId: M:SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
  isExternal: true
  name: Update(T)
  nameWithType: ICanUpdate<T>.Update(T)
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>.Update(T)
  nameWithType.vb: ICanUpdate(Of T).Update(T)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T).Update(T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
    name: Update
    nameWithType: ICanUpdate<T>.Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate<T>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(`0)
    name: Update
    nameWithType: ICanUpdate(Of T).Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate(Of T).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanUpdate`1
  name: ICanUpdate<PeerDao>
  nameWithType: ICanUpdate<PeerDao>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: ICanUpdate(Of PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: ICanUpdate(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Update(IEnumerable<T>)
  nameWithType: ICanUpdate<T>.Update(IEnumerable<T>)
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ICanUpdate(Of T).Update(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: ICanUpdate<T>.Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate<T>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: ICanUpdate(Of T).Update
    fullName: SharpRepository.Repository.Traits.ICanUpdate(Of T).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
  commentId: M:SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
  isExternal: true
  name: BeginBatch()
  nameWithType: ICanBatch<T>.BeginBatch()
  fullName: SharpRepository.Repository.Traits.ICanBatch<T>.BeginBatch()
  nameWithType.vb: ICanBatch(Of T).BeginBatch()
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of T).BeginBatch()
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
    name: BeginBatch
    nameWithType: ICanBatch<T>.BeginBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch<T>.BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1.BeginBatch
    name: BeginBatch
    nameWithType: ICanBatch(Of T).BeginBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch(Of T).BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.Traits.ICanBatch{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanBatch`1
  name: ICanBatch<PeerDao>
  nameWithType: ICanBatch<PeerDao>
  fullName: SharpRepository.Repository.Traits.ICanBatch<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: ICanBatch(Of PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: ICanBatch(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
  isExternal: true
  name: AsQueryable()
  nameWithType: IRepositoryQueryable<T>.AsQueryable()
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.AsQueryable()
  nameWithType.vb: IRepositoryQueryable(Of T).AsQueryable()
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
    name: AsQueryable
    nameWithType: IRepositoryQueryable<T>.AsQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.AsQueryable
    name: AsQueryable
    nameWithType: IRepositoryQueryable(Of T).AsQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.IRepositoryQueryable{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryQueryable`1
  name: IRepositoryQueryable<PeerDao>
  nameWithType: IRepositoryQueryable<PeerDao>
  fullName: SharpRepository.Repository.IRepositoryQueryable<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: IRepositoryQueryable(Of PeerDao)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: IRepositoryQueryable(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  isExternal: true
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: IRepositoryQueryable<T>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: IRepositoryQueryable(Of T).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: IRepositoryQueryable<T>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: IRepositoryQueryable(Of T).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll
  isExternal: true
  name: GetAll()
  nameWithType: IRepositoryQueryable<T>.GetAll()
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll()
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll()
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IFetchStrategy<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
  isExternal: true
  name: GetAll(String[])
  nameWithType: IRepositoryQueryable<T>.GetAll(String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(System.String[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: IRepositoryQueryable<T>.GetAll(Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll(IQueryOptions<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, String[])
  nameWithType: IRepositoryQueryable<T>.GetAll(IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: IRepositoryQueryable<T>.GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable<T>.GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: IRepositoryQueryable(Of T).GetAll
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: IRepositoryQueryable<T>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: IRepositoryQueryable(Of T).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: IRepositoryQueryable<T>.GetAll<TResult>
    fullName: SharpRepository.Repository.IRepositoryQueryable<T>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: IRepositoryQueryable(Of T).GetAll(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryQueryable(Of T).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind<T>.Find
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind(Of T).Find
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.Traits.ICanFind{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanFind`1
  name: ICanFind<PeerDao>
  nameWithType: ICanFind<PeerDao>
  fullName: SharpRepository.Repository.Traits.ICanFind<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: ICanFind(Of PeerDao)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: ICanFind(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: ICanFind<T>.Find<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: ICanFind(Of T).Find(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: ICanFind<T>.Exists(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ICanFind(Of T).Exists(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: ICanFind<T>.Exists
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: ICanFind(Of T).Exists
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, T)
  nameWithType: ICanFind<T>.TryFind(Expression<Func<T, Boolean>>, T)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, T)
  nameWithType.vb: ICanFind(Of T).TryFind(Expression(Of Func(Of T, Boolean)), T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: ICanFind<T>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: ICanFind(Of T).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  nameWithType: ICanFind<T>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: ICanFind(Of T).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<T>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of T).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  nameWithType: ICanFind<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: ICanFind(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<T>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of T).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: ICanFind<T>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: ICanFind(Of T).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<T>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of T).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(ISpecification<T>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.Find(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).Find(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Find(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind<T>.Find
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: ICanFind(Of T).Find
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: ICanFind<T>.Find<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: ICanFind(Of T).Find(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Exists(ISpecification<T>)
  nameWithType: ICanFind<T>.Exists(ISpecification<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.Exists(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: ICanFind(Of T).Exists(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).Exists(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Exists(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: ICanFind<T>.Exists
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: ICanFind(Of T).Exists
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, T)
  nameWithType: ICanFind<T>.TryFind(ISpecification<T>, T)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, T)
  nameWithType.vb: ICanFind(Of T).TryFind(ISpecification(Of T), T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), T)
  name.vb: TryFind(ISpecification(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<T>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of T).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, IQueryOptions<T>, T)
  nameWithType: ICanFind<T>.TryFind(ISpecification<T>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: ICanFind(Of T).TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind<T>.TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: ICanFind(Of T).TryFind
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  nameWithType: ICanFind<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: ICanFind(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<T>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of T).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: ICanFind<T>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: ICanFind(Of T).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: ICanFind<T>.TryFind<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: ICanFind(Of T).TryFind(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind<T>.FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind(Of T).FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: ICanFind<T>.FindAll<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: ICanFind(Of T).FindAll(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(ISpecification<T>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.FindAll(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind<T>.FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: ICanFind(Of T).FindAll
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: ICanFind<T>.FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: ICanFind(Of T).FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: ICanFind<T>.FindAll<TResult>
    fullName: SharpRepository.Repository.Traits.ICanFind<T>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: ICanFind(Of T).FindAll(Of TResult)
    fullName: SharpRepository.Repository.Traits.ICanFind(Of T).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  commentId: T:SharpRepository.Repository.IRepositoryAggregates{Catalyst.Core.Lib.DAO.PeerDao}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryAggregates`1
  name: IRepositoryAggregates<PeerDao>
  nameWithType: IRepositoryAggregates<PeerDao>
  fullName: SharpRepository.Repository.IRepositoryAggregates<Catalyst.Core.Lib.DAO.PeerDao>
  nameWithType.vb: IRepositoryAggregates(Of PeerDao)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of Catalyst.Core.Lib.DAO.PeerDao)
  name.vb: IRepositoryAggregates(Of PeerDao)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Core.Lib.DAO.PeerDao
    name: PeerDao
    nameWithType: PeerDao
    fullName: Catalyst.Core.Lib.DAO.PeerDao
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Count
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Count
  isExternal: true
  name: Count()
  nameWithType: IRepositoryAggregates<T>.Count()
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count()
  nameWithType.vb: IRepositoryAggregates(Of T).Count()
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Count()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count
    name: Count
    nameWithType: IRepositoryAggregates<T>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count
    name: Count
    nameWithType: IRepositoryAggregates(Of T).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Count(ISpecification<T>)
  nameWithType: IRepositoryAggregates<T>.Count(ISpecification<T>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: IRepositoryAggregates(Of T).Count(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Count(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Count(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: IRepositoryAggregates<T>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: IRepositoryAggregates(Of T).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: IRepositoryAggregates<T>.Count(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Count(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: IRepositoryAggregates<T>.Count
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: IRepositoryAggregates(Of T).Count
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.LongCount
  isExternal: true
  name: LongCount()
  nameWithType: IRepositoryAggregates<T>.LongCount()
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount()
  nameWithType.vb: IRepositoryAggregates(Of T).LongCount()
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount()
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
    name: LongCount
    nameWithType: IRepositoryAggregates<T>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount
    name: LongCount
    nameWithType: IRepositoryAggregates(Of T).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: LongCount(ISpecification<T>)
  nameWithType: IRepositoryAggregates<T>.LongCount(ISpecification<T>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: IRepositoryAggregates(Of T).LongCount(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: LongCount(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: IRepositoryAggregates<T>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: IRepositoryAggregates(Of T).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: IRepositoryAggregates<T>.LongCount(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: IRepositoryAggregates(Of T).LongCount(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: IRepositoryAggregates<T>.LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: IRepositoryAggregates(Of T).LongCount
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates<T>.Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: IRepositoryAggregates(Of T).Sum
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: IRepositoryAggregates<T>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates<T>.Average
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: IRepositoryAggregates(Of T).Average
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<T>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<T>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: IRepositoryAggregates<T>.Min<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Min(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<T>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<T>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: IRepositoryAggregates<T>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: IRepositoryAggregates(Of T).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: IRepositoryAggregates<T>.Max<TResult>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: IRepositoryAggregates(Of T).Max(Of TResult)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.IRepositoryAggregates<T>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.IRepositoryAggregates(Of T).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2
  commentId: T:SharpRepository.Repository.ICrudRepository`2
  isExternal: true
  name: ICrudRepository<T, TKey>
  nameWithType: ICrudRepository<T, TKey>
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>
  nameWithType.vb: ICrudRepository(Of T, TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey)
  name.vb: ICrudRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository
  commentId: N:SharpRepository.Repository
  isExternal: true
  name: SharpRepository.Repository
  nameWithType: SharpRepository.Repository
  fullName: SharpRepository.Repository
- uid: SharpRepository.Repository.IRepositoryBase`1
  commentId: T:SharpRepository.Repository.IRepositoryBase`1
  isExternal: true
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: SharpRepository.Repository.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd`1
  commentId: T:SharpRepository.Repository.Traits.ICanAdd`1
  isExternal: true
  name: ICanAdd<T>
  nameWithType: ICanAdd<T>
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>
  nameWithType.vb: ICanAdd(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T)
  name.vb: ICanAdd(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits
  commentId: N:SharpRepository.Repository.Traits
  isExternal: true
  name: SharpRepository.Repository.Traits
  nameWithType: SharpRepository.Repository.Traits
  fullName: SharpRepository.Repository.Traits
- uid: SharpRepository.Repository.Traits.ICanUpdate`1
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate`1
  isExternal: true
  name: ICanUpdate<T>
  nameWithType: ICanUpdate<T>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>
  nameWithType.vb: ICanUpdate(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T)
  name.vb: ICanUpdate(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch`1
  commentId: T:SharpRepository.Repository.Traits.ICanBatch`1
  isExternal: true
  name: ICanBatch<T>
  nameWithType: ICanBatch<T>
  fullName: SharpRepository.Repository.Traits.ICanBatch<T>
  nameWithType.vb: ICanBatch(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of T)
  name.vb: ICanBatch(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1
  commentId: T:SharpRepository.Repository.IRepositoryQueryable`1
  isExternal: true
  name: IRepositoryQueryable<T>
  nameWithType: IRepositoryQueryable<T>
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>
  nameWithType.vb: IRepositoryQueryable(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T)
  name.vb: IRepositoryQueryable(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1
  commentId: T:SharpRepository.Repository.Traits.ICanFind`1
  isExternal: true
  name: ICanFind<T>
  nameWithType: ICanFind<T>
  fullName: SharpRepository.Repository.Traits.ICanFind<T>
  nameWithType.vb: ICanFind(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T)
  name.vb: ICanFind(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SharpRepository.Repository.IRepositoryAggregates`1
  commentId: T:SharpRepository.Repository.IRepositoryAggregates`1
  isExternal: true
  name: IRepositoryAggregates<T>
  nameWithType: IRepositoryAggregates<T>
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>
  nameWithType.vb: IRepositoryAggregates(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T)
  name.vb: IRepositoryAggregates(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
