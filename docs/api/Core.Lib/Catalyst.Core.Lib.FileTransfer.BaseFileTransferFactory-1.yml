### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  commentId: T:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  id: BaseFileTransferFactory`1
  parent: Catalyst.Core.Lib.FileTransfer
  children:
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor(Serilog.ILogger)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync(`0)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Logger
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer(`0)
  - Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove(`0,System.Boolean)
  langs:
  - csharp
  - vb
  name: BaseFileTransferFactory<T>
  nameWithType: BaseFileTransferFactory<T>
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: BaseFileTransferFactory
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 39
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: "\nThe file transfer class handles uploads and downloads\n"
  example: []
  syntax:
    content: 'public abstract class BaseFileTransferFactory<T> : IFileTransferFactory<T> where T : IFileTransferInformation'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class BaseFileTransferFactory(Of T As IFileTransferInformation)

          Implements IFileTransferFactory(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Catalyst.Core.Lib.FileTransfer.DownloadFileTransferFactory
  - Catalyst.Core.Lib.FileTransfer.UploadFileTransferFactory
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BaseFileTransferFactory(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T)
  name.vb: BaseFileTransferFactory(Of T)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Logger
  commentId: F:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Logger
  id: Logger
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: BaseFileTransferFactory<T>.Logger
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.Logger
  type: Field
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Logger
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 48
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: The logger
  example: []
  syntax:
    content: protected readonly ILogger Logger
    return:
      type: Serilog.ILogger
    content.vb: Protected ReadOnly Logger As ILogger
  nameWithType.vb: BaseFileTransferFactory(Of T).Logger
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).Logger
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys
  commentId: P:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys
  id: Keys
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: BaseFileTransferFactory<T>.Keys
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.Keys
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Keys
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 51
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  example: []
  syntax:
    content: public Guid[] Keys { get; }
    parameters: []
    return:
      type: System.Guid[]
    content.vb: Public ReadOnly Property Keys As Guid()
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys*
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.Keys
  nameWithType.vb: BaseFileTransferFactory(Of T).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).Keys
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor(Serilog.ILogger)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor(Serilog.ILogger)
  id: '#ctor(Serilog.ILogger)'
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: BaseFileTransferFactory(ILogger)
  nameWithType: BaseFileTransferFactory<T>.BaseFileTransferFactory(ILogger)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.BaseFileTransferFactory(Serilog.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 63
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: Initializes a new instance of the <xref href="Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory%601" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: protected BaseFileTransferFactory(ILogger logger)
    parameters:
    - id: logger
      type: Serilog.ILogger
    content.vb: Protected Sub New(logger As ILogger)
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor*
  nameWithType.vb: BaseFileTransferFactory(Of T).BaseFileTransferFactory(ILogger)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).BaseFileTransferFactory(Serilog.ILogger)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer(`0)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer(`0)
  id: RegisterTransfer(`0)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: RegisterTransfer(T)
  nameWithType: BaseFileTransferFactory<T>.RegisterTransfer(T)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.RegisterTransfer(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RegisterTransfer
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 74
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: Registers the transfer.
  example: []
  syntax:
    content: public FileTransferResponseCodeTypes RegisterTransfer(T fileTransferInformation)
    parameters:
    - id: fileTransferInformation
      type: '{T}'
      description: The file transfer information.
    return:
      type: Catalyst.Abstractions.Types.FileTransferResponseCodeTypes
      description: Initialization response code.
    content.vb: Public Function RegisterTransfer(fileTransferInformation As T) As FileTransferResponseCodeTypes
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This instance cannot be registered to the factory due to IsDownload flag.
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.RegisterTransfer({T})
  nameWithType.vb: BaseFileTransferFactory(Of T).RegisterTransfer(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).RegisterTransfer(T)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  id: FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: FileTransferAsync(ICorrelationId, CancellationToken)
  nameWithType: BaseFileTransferFactory<T>.FileTransferAsync(ICorrelationId, CancellationToken)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: FileTransferAsync
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 97
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: Files the transfer asynchronous.
  example: []
  syntax:
    content: public Task FileTransferAsync(ICorrelationId correlationGuid, CancellationToken cancellationToken)
    parameters:
    - id: correlationGuid
      type: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
      description: The correlation unique identifier.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function FileTransferAsync(correlationGuid As ICorrelationId, cancellationToken As CancellationToken) As Task
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: File transfer has not been registered to factory
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: File transfer has already been initialised
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  nameWithType.vb: BaseFileTransferFactory(Of T).FileTransferAsync(ICorrelationId, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  id: GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: GetFileTransferInformation(ICorrelationId)
  nameWithType: BaseFileTransferFactory<T>.GetFileTransferInformation(ICorrelationId)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetFileTransferInformation
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 122
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  example: []
  syntax:
    content: public T GetFileTransferInformation(ICorrelationId key)
    parameters:
    - id: key
      type: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    return:
      type: '{T}'
    content.vb: Public Function GetFileTransferInformation(key As ICorrelationId) As T
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation*
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  nameWithType.vb: BaseFileTransferFactory(Of T).GetFileTransferInformation(ICorrelationId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove(`0,System.Boolean)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove(`0,System.Boolean)
  id: Remove(`0,System.Boolean)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: Remove(T, Boolean)
  nameWithType: BaseFileTransferFactory<T>.Remove(T, Boolean)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.Remove(T, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Remove
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 144
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  example: []
  syntax:
    content: public void Remove(T fileTransferInformation, bool expiredOrCancelled)
    parameters:
    - id: fileTransferInformation
      type: '{T}'
    - id: expiredOrCancelled
      type: System.Boolean
    content.vb: Public Sub Remove(fileTransferInformation As T, expiredOrCancelled As Boolean)
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove*
  implements:
  - Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.Remove({T},System.Boolean)
  nameWithType.vb: BaseFileTransferFactory(Of T).Remove(T, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).Remove(T, System.Boolean)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  id: EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: EnsureKeyExists(ICorrelationId)
  nameWithType: BaseFileTransferFactory<T>.EnsureKeyExists(ICorrelationId)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: EnsureKeyExists
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 165
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: Ensures the key exists.
  example: []
  syntax:
    content: protected bool EnsureKeyExists(ICorrelationId guid)
    parameters:
    - id: guid
      type: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
      description: The unique identifier.
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function EnsureKeyExists(guid As ICorrelationId) As Boolean
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The specified key does not exist inside the factory.
  nameWithType.vb: BaseFileTransferFactory(Of T).EnsureKeyExists(ICorrelationId)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).EnsureKeyExists(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync(`0)
  commentId: M:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync(`0)
  id: DoTransferAsync(`0)
  parent: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  langs:
  - csharp
  - vb
  name: DoTransferAsync(T)
  nameWithType: BaseFileTransferFactory<T>.DoTransferAsync(T)
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.DoTransferAsync(T)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DoTransferAsync
    path: ../src/Catalyst.Core.Lib/FileTransfer/BaseFileTransferFactory.cs
    startLine: 177
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.FileTransfer
  summary: Does the transfer.
  example: []
  syntax:
    content: protected abstract Task DoTransferAsync(T fileTransferInformation)
    parameters:
    - id: fileTransferInformation
      type: '{T}'
      description: The file transfer information.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected MustOverride Function DoTransferAsync(fileTransferInformation As T) As Task
  overload: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync*
  nameWithType.vb: BaseFileTransferFactory(Of T).DoTransferAsync(T)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).DoTransferAsync(T)
references:
- uid: Catalyst.Core.Lib.FileTransfer
  commentId: N:Catalyst.Core.Lib.FileTransfer
  name: Catalyst.Core.Lib.FileTransfer
  nameWithType: Catalyst.Core.Lib.FileTransfer
  fullName: Catalyst.Core.Lib.FileTransfer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  commentId: T:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}
  parent: Catalyst.Abstractions.FileTransfer
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
  name: IFileTransferFactory<T>
  nameWithType: IFileTransferFactory<T>
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>
  nameWithType.vb: IFileTransferFactory(Of T)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T)
  name.vb: IFileTransferFactory(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
    name: IFileTransferFactory
    nameWithType: IFileTransferFactory
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
    name: IFileTransferFactory
    nameWithType: IFileTransferFactory
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
  commentId: T:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
  name: IFileTransferFactory<T>
  nameWithType: IFileTransferFactory<T>
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>
  nameWithType.vb: IFileTransferFactory(Of T)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T)
  name.vb: IFileTransferFactory(Of T)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
    name: IFileTransferFactory
    nameWithType: IFileTransferFactory
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1
    name: IFileTransferFactory
    nameWithType: IFileTransferFactory
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.FileTransfer
  commentId: N:Catalyst.Abstractions.FileTransfer
  name: Catalyst.Abstractions.FileTransfer
  nameWithType: Catalyst.Abstractions.FileTransfer
  fullName: Catalyst.Abstractions.FileTransfer
- uid: Serilog.ILogger
  commentId: T:Serilog.ILogger
  parent: Serilog
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Serilog.ILogger
- uid: Serilog
  commentId: N:Serilog
  isExternal: true
  name: Serilog
  nameWithType: Serilog
  fullName: Serilog
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Keys
  name: Keys
  nameWithType: BaseFileTransferFactory<T>.Keys
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.Keys
  nameWithType.vb: BaseFileTransferFactory(Of T).Keys
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).Keys
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.Keys
  commentId: P:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}.Keys
  parent: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Keys
  name: Keys
  nameWithType: IFileTransferFactory<T>.Keys
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Keys
  nameWithType.vb: IFileTransferFactory(Of T).Keys
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Keys
- uid: System.Guid[]
  isExternal: true
  name: Guid[]
  nameWithType: Guid[]
  fullName: System.Guid[]
  nameWithType.vb: Guid()
  fullName.vb: System.Guid()
  name.vb: Guid()
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Keys
  commentId: P:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Keys
  name: Keys
  nameWithType: IFileTransferFactory<T>.Keys
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Keys
  nameWithType.vb: IFileTransferFactory(Of T).Keys
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Keys
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  commentId: T:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
  name: BaseFileTransferFactory<T>
  nameWithType: BaseFileTransferFactory<T>
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>
  nameWithType.vb: BaseFileTransferFactory(Of T)
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T)
  name.vb: BaseFileTransferFactory(Of T)
  spec.csharp:
  - uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
    name: BaseFileTransferFactory
    nameWithType: BaseFileTransferFactory
    fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1
    name: BaseFileTransferFactory
    nameWithType: BaseFileTransferFactory
    fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.#ctor
  name: BaseFileTransferFactory
  nameWithType: BaseFileTransferFactory<T>.BaseFileTransferFactory
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.BaseFileTransferFactory
  nameWithType.vb: BaseFileTransferFactory(Of T).BaseFileTransferFactory
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).BaseFileTransferFactory
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.RegisterTransfer
  name: RegisterTransfer
  nameWithType: BaseFileTransferFactory<T>.RegisterTransfer
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.RegisterTransfer
  nameWithType.vb: BaseFileTransferFactory(Of T).RegisterTransfer
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).RegisterTransfer
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.RegisterTransfer({T})
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}.RegisterTransfer(`0)
  parent: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
  name: RegisterTransfer(T)
  nameWithType: IFileTransferFactory<T>.RegisterTransfer(T)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.RegisterTransfer(T)
  nameWithType.vb: IFileTransferFactory(Of T).RegisterTransfer(T)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).RegisterTransfer(T)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
    name: RegisterTransfer
    nameWithType: IFileTransferFactory<T>.RegisterTransfer
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.RegisterTransfer
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
    name: RegisterTransfer
    nameWithType: IFileTransferFactory(Of T).RegisterTransfer
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).RegisterTransfer
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Catalyst.Abstractions.Types.FileTransferResponseCodeTypes
  commentId: T:Catalyst.Abstractions.Types.FileTransferResponseCodeTypes
  parent: Catalyst.Abstractions.Types
  name: FileTransferResponseCodeTypes
  nameWithType: FileTransferResponseCodeTypes
  fullName: Catalyst.Abstractions.Types.FileTransferResponseCodeTypes
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
  name: RegisterTransfer(T)
  nameWithType: IFileTransferFactory<T>.RegisterTransfer(T)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.RegisterTransfer(T)
  nameWithType.vb: IFileTransferFactory(Of T).RegisterTransfer(T)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).RegisterTransfer(T)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
    name: RegisterTransfer
    nameWithType: IFileTransferFactory<T>.RegisterTransfer
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.RegisterTransfer
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.RegisterTransfer(`0)
    name: RegisterTransfer
    nameWithType: IFileTransferFactory(Of T).RegisterTransfer
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).RegisterTransfer
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Catalyst.Abstractions.Types
  commentId: N:Catalyst.Abstractions.Types
  name: Catalyst.Abstractions.Types
  nameWithType: Catalyst.Abstractions.Types
  fullName: Catalyst.Abstractions.Types
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: true
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.FileTransferAsync
  name: FileTransferAsync
  nameWithType: BaseFileTransferFactory<T>.FileTransferAsync
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.FileTransferAsync
  nameWithType.vb: BaseFileTransferFactory(Of T).FileTransferAsync
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).FileTransferAsync
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  parent: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  name: FileTransferAsync(ICorrelationId, CancellationToken)
  nameWithType: IFileTransferFactory<T>.FileTransferAsync(ICorrelationId, CancellationToken)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
  nameWithType.vb: IFileTransferFactory(Of T).FileTransferAsync(ICorrelationId, CancellationToken)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
    name: FileTransferAsync
    nameWithType: IFileTransferFactory<T>.FileTransferAsync
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.FileTransferAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
    name: FileTransferAsync
    nameWithType: IFileTransferFactory(Of T).FileTransferAsync
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).FileTransferAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  commentId: T:Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  parent: Catalyst.Abstractions.IO.Messaging.Correlation
  name: ICorrelationId
  nameWithType: ICorrelationId
  fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
  isExternal: true
  name: FileTransferAsync(ICorrelationId, CancellationToken)
  nameWithType: IFileTransferFactory<T>.FileTransferAsync(ICorrelationId, CancellationToken)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
  nameWithType.vb: IFileTransferFactory(Of T).FileTransferAsync(ICorrelationId, CancellationToken)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
    name: FileTransferAsync
    nameWithType: IFileTransferFactory<T>.FileTransferAsync
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.FileTransferAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.FileTransferAsync(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId,System.Threading.CancellationToken)
    name: FileTransferAsync
    nameWithType: IFileTransferFactory(Of T).FileTransferAsync
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).FileTransferAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.IO.Messaging.Correlation
  commentId: N:Catalyst.Abstractions.IO.Messaging.Correlation
  name: Catalyst.Abstractions.IO.Messaging.Correlation
  nameWithType: Catalyst.Abstractions.IO.Messaging.Correlation
  fullName: Catalyst.Abstractions.IO.Messaging.Correlation
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.GetFileTransferInformation
  name: GetFileTransferInformation
  nameWithType: BaseFileTransferFactory<T>.GetFileTransferInformation
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.GetFileTransferInformation
  nameWithType.vb: BaseFileTransferFactory(Of T).GetFileTransferInformation
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).GetFileTransferInformation
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  parent: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  name: GetFileTransferInformation(ICorrelationId)
  nameWithType: IFileTransferFactory<T>.GetFileTransferInformation(ICorrelationId)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  nameWithType.vb: IFileTransferFactory(Of T).GetFileTransferInformation(ICorrelationId)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
    name: GetFileTransferInformation
    nameWithType: IFileTransferFactory<T>.GetFileTransferInformation
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.GetFileTransferInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
    name: GetFileTransferInformation
    nameWithType: IFileTransferFactory(Of T).GetFileTransferInformation
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).GetFileTransferInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  name: GetFileTransferInformation(ICorrelationId)
  nameWithType: IFileTransferFactory<T>.GetFileTransferInformation(ICorrelationId)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  nameWithType.vb: IFileTransferFactory(Of T).GetFileTransferInformation(ICorrelationId)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
    name: GetFileTransferInformation
    nameWithType: IFileTransferFactory<T>.GetFileTransferInformation
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.GetFileTransferInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.GetFileTransferInformation(Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId)
    name: GetFileTransferInformation
    nameWithType: IFileTransferFactory(Of T).GetFileTransferInformation
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).GetFileTransferInformation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
    name: ICorrelationId
    nameWithType: ICorrelationId
    fullName: Catalyst.Abstractions.IO.Messaging.Correlation.ICorrelationId
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.Remove
  name: Remove
  nameWithType: BaseFileTransferFactory<T>.Remove
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.Remove
  nameWithType.vb: BaseFileTransferFactory(Of T).Remove
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).Remove
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}.Remove({T},System.Boolean)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory{`0}.Remove(`0,System.Boolean)
  parent: Catalyst.Abstractions.FileTransfer.IFileTransferFactory{{T}}
  definition: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
  name: Remove(T, Boolean)
  nameWithType: IFileTransferFactory<T>.Remove(T, Boolean)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Remove(T, System.Boolean)
  nameWithType.vb: IFileTransferFactory(Of T).Remove(T, Boolean)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Remove(T, System.Boolean)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
    name: Remove
    nameWithType: IFileTransferFactory<T>.Remove
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
    name: Remove
    nameWithType: IFileTransferFactory(Of T).Remove
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
  commentId: M:Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
  isExternal: true
  name: Remove(T, Boolean)
  nameWithType: IFileTransferFactory<T>.Remove(T, Boolean)
  fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Remove(T, System.Boolean)
  nameWithType.vb: IFileTransferFactory(Of T).Remove(T, Boolean)
  fullName.vb: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Remove(T, System.Boolean)
  spec.csharp:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
    name: Remove
    nameWithType: IFileTransferFactory<T>.Remove
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.FileTransfer.IFileTransferFactory`1.Remove(`0,System.Boolean)
    name: Remove
    nameWithType: IFileTransferFactory(Of T).Remove
    fullName: Catalyst.Abstractions.FileTransfer.IFileTransferFactory(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.EnsureKeyExists
  name: EnsureKeyExists
  nameWithType: BaseFileTransferFactory<T>.EnsureKeyExists
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.EnsureKeyExists
  nameWithType.vb: BaseFileTransferFactory(Of T).EnsureKeyExists
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).EnsureKeyExists
- uid: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync*
  commentId: Overload:Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory`1.DoTransferAsync
  name: DoTransferAsync
  nameWithType: BaseFileTransferFactory<T>.DoTransferAsync
  fullName: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory<T>.DoTransferAsync
  nameWithType.vb: BaseFileTransferFactory(Of T).DoTransferAsync
  fullName.vb: Catalyst.Core.Lib.FileTransfer.BaseFileTransferFactory(Of T).DoTransferAsync
