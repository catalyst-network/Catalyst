### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager
  commentId: T:Catalyst.Core.Lib.Cryptography.PasswordManager
  id: PasswordManager
  parent: Catalyst.Core.Lib.Cryptography
  children:
  - Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor(Catalyst.Abstractions.Cryptography.IPasswordReader,Catalyst.Abstractions.Cryptography.IPasswordRegistry)
  - Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  - Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  - Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  langs:
  - csharp
  - vb
  name: PasswordManager
  nameWithType: PasswordManager
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PasswordManager
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  example: []
  syntax:
    content: 'public sealed class PasswordManager : IPasswordManager'
    content.vb: >-
      Public NotInheritable Class PasswordManager

          Implements IPasswordManager
  inheritance:
  - System.Object
  implements:
  - Catalyst.Abstractions.Cryptography.IPasswordManager
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor(Catalyst.Abstractions.Cryptography.IPasswordReader,Catalyst.Abstractions.Cryptography.IPasswordRegistry)
  commentId: M:Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor(Catalyst.Abstractions.Cryptography.IPasswordReader,Catalyst.Abstractions.Cryptography.IPasswordRegistry)
  id: '#ctor(Catalyst.Abstractions.Cryptography.IPasswordReader,Catalyst.Abstractions.Cryptography.IPasswordRegistry)'
  parent: Catalyst.Core.Lib.Cryptography.PasswordManager
  langs:
  - csharp
  - vb
  name: PasswordManager(IPasswordReader, IPasswordRegistry)
  nameWithType: PasswordManager.PasswordManager(IPasswordReader, IPasswordRegistry)
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.PasswordManager(Catalyst.Abstractions.Cryptography.IPasswordReader, Catalyst.Abstractions.Cryptography.IPasswordRegistry)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
    startLine: 35
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  syntax:
    content: public PasswordManager(IPasswordReader passwordReader, IPasswordRegistry passwordRegistry)
    parameters:
    - id: passwordReader
      type: Catalyst.Abstractions.Cryptography.IPasswordReader
    - id: passwordRegistry
      type: Catalyst.Abstractions.Cryptography.IPasswordRegistry
    content.vb: Public Sub New(passwordReader As IPasswordReader, passwordRegistry As IPasswordRegistry)
  overload: Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  commentId: M:Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  id: RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  parent: Catalyst.Core.Lib.Cryptography.PasswordManager
  langs:
  - csharp
  - vb
  name: RetrieveOrPromptPassword(PasswordRegistryTypes, String)
  nameWithType: PasswordManager.RetrieveOrPromptPassword(PasswordRegistryTypes, String)
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RetrieveOrPromptPassword
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
    startLine: 42
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  example: []
  syntax:
    content: public SecureString RetrieveOrPromptPassword(PasswordRegistryTypes passwordType, string promptMessage = null)
    parameters:
    - id: passwordType
      type: Catalyst.Abstractions.Types.PasswordRegistryTypes
    - id: promptMessage
      type: System.String
    return:
      type: System.Security.SecureString
    content.vb: Public Function RetrieveOrPromptPassword(passwordType As PasswordRegistryTypes, promptMessage As String = Nothing) As SecureString
  overload: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword*
  implements:
  - Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  commentId: M:Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  id: RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  parent: Catalyst.Core.Lib.Cryptography.PasswordManager
  langs:
  - csharp
  - vb
  name: RetrieveOrPromptAndAddPasswordToRegistry(PasswordRegistryTypes, String)
  nameWithType: PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(PasswordRegistryTypes, String)
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: RetrieveOrPromptAndAddPasswordToRegistry
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
    startLine: 52
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  example: []
  syntax:
    content: public SecureString RetrieveOrPromptAndAddPasswordToRegistry(PasswordRegistryTypes passwordType, string promptMessage = null)
    parameters:
    - id: passwordType
      type: Catalyst.Abstractions.Types.PasswordRegistryTypes
    - id: promptMessage
      type: System.String
    return:
      type: System.Security.SecureString
    content.vb: Public Function RetrieveOrPromptAndAddPasswordToRegistry(passwordType As PasswordRegistryTypes, promptMessage As String = Nothing) As SecureString
  overload: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry*
  implements:
  - Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  commentId: M:Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  id: AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  parent: Catalyst.Core.Lib.Cryptography.PasswordManager
  langs:
  - csharp
  - vb
  name: AddPasswordToRegistry(PasswordRegistryTypes, SecureString)
  nameWithType: PasswordManager.AddPasswordToRegistry(PasswordRegistryTypes, SecureString)
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AddPasswordToRegistry
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordManager.cs
    startLine: 66
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  example: []
  syntax:
    content: public bool AddPasswordToRegistry(PasswordRegistryTypes passwordType, SecureString password)
    parameters:
    - id: passwordType
      type: Catalyst.Abstractions.Types.PasswordRegistryTypes
    - id: password
      type: System.Security.SecureString
    return:
      type: System.Boolean
    content.vb: Public Function AddPasswordToRegistry(passwordType As PasswordRegistryTypes, password As SecureString) As Boolean
  overload: Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry*
  implements:
  - Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Catalyst.Core.Lib.Cryptography
  commentId: N:Catalyst.Core.Lib.Cryptography
  name: Catalyst.Core.Lib.Cryptography
  nameWithType: Catalyst.Core.Lib.Cryptography
  fullName: Catalyst.Core.Lib.Cryptography
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Cryptography.IPasswordManager
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordManager
  parent: Catalyst.Abstractions.Cryptography
  name: IPasswordManager
  nameWithType: IPasswordManager
  fullName: Catalyst.Abstractions.Cryptography.IPasswordManager
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor*
  commentId: Overload:Catalyst.Core.Lib.Cryptography.PasswordManager.#ctor
  name: PasswordManager
  nameWithType: PasswordManager.PasswordManager
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.PasswordManager
- uid: Catalyst.Abstractions.Cryptography.IPasswordReader
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordReader
  parent: Catalyst.Abstractions.Cryptography
  name: IPasswordReader
  nameWithType: IPasswordReader
  fullName: Catalyst.Abstractions.Cryptography.IPasswordReader
- uid: Catalyst.Abstractions.Cryptography.IPasswordRegistry
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordRegistry
  parent: Catalyst.Abstractions.Cryptography
  name: IPasswordRegistry
  nameWithType: IPasswordRegistry
  fullName: Catalyst.Abstractions.Cryptography.IPasswordRegistry
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword*
  commentId: Overload:Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword
  name: RetrieveOrPromptPassword
  nameWithType: PasswordManager.RetrieveOrPromptPassword
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptPassword
- uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  commentId: M:Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  parent: Catalyst.Abstractions.Cryptography.IPasswordManager
  isExternal: true
  name: RetrieveOrPromptPassword(PasswordRegistryTypes, String)
  nameWithType: IPasswordManager.RetrieveOrPromptPassword(PasswordRegistryTypes, String)
  fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.String)
  spec.csharp:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
    name: RetrieveOrPromptPassword
    nameWithType: IPasswordManager.RetrieveOrPromptPassword
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
    name: RetrieveOrPromptPassword
    nameWithType: IPasswordManager.RetrieveOrPromptPassword
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptPassword
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
  commentId: T:Catalyst.Abstractions.Types.PasswordRegistryTypes
  parent: Catalyst.Abstractions.Types
  name: PasswordRegistryTypes
  nameWithType: PasswordRegistryTypes
  fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  parent: System.Security
  isExternal: true
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: Catalyst.Abstractions.Types
  commentId: N:Catalyst.Abstractions.Types
  name: Catalyst.Abstractions.Types
  nameWithType: Catalyst.Abstractions.Types
  fullName: Catalyst.Abstractions.Types
- uid: System.Security
  commentId: N:System.Security
  isExternal: true
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry*
  commentId: Overload:Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
  name: RetrieveOrPromptAndAddPasswordToRegistry
  nameWithType: PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
- uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  commentId: M:Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
  parent: Catalyst.Abstractions.Cryptography.IPasswordManager
  isExternal: true
  name: RetrieveOrPromptAndAddPasswordToRegistry(PasswordRegistryTypes, String)
  nameWithType: IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(PasswordRegistryTypes, String)
  fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.String)
  spec.csharp:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
    name: RetrieveOrPromptAndAddPasswordToRegistry
    nameWithType: IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.String)
    name: RetrieveOrPromptAndAddPasswordToRegistry
    nameWithType: IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.RetrieveOrPromptAndAddPasswordToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry*
  commentId: Overload:Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry
  name: AddPasswordToRegistry
  nameWithType: PasswordManager.AddPasswordToRegistry
  fullName: Catalyst.Core.Lib.Cryptography.PasswordManager.AddPasswordToRegistry
- uid: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  commentId: M:Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  parent: Catalyst.Abstractions.Cryptography.IPasswordManager
  isExternal: true
  name: AddPasswordToRegistry(PasswordRegistryTypes, SecureString)
  nameWithType: IPasswordManager.AddPasswordToRegistry(PasswordRegistryTypes, SecureString)
  fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
    name: AddPasswordToRegistry
    nameWithType: IPasswordManager.AddPasswordToRegistry
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
    name: AddPasswordToRegistry
    nameWithType: IPasswordManager.AddPasswordToRegistry
    fullName: Catalyst.Abstractions.Cryptography.IPasswordManager.AddPasswordToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
