### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute
  commentId: T:Catalyst.Core.Lib.Repository.Attributes.AuditAttribute
  id: AuditAttribute
  parent: Catalyst.Core.Lib.Repository.Attributes
  children:
  - Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  - Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  langs:
  - csharp
  - vb
  name: AuditAttribute
  nameWithType: AuditAttribute
  fullName: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AuditAttribute
    path: ../src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
    startLine: 29
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository.Attributes
  syntax:
    content: 'public sealed class AuditAttribute : RepositoryActionBaseAttribute'
    content.vb: >-
      Public NotInheritable Class AuditAttribute

          Inherits RepositoryActionBaseAttribute
  inheritance:
  - System.Object
  - System.Attribute
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  inheritedMembers:
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}},System.Exception)
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Order
  - SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Enabled
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  id: OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute
  langs:
  - csharp
  - vb
  name: OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: AuditAttribute.OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: OnAddExecuting
    path: ../src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
    startLine: 39
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository.Attributes
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public override bool OnAddExecuting<T, TKey>(T entity, RepositoryActionContext<T, TKey> context)

          where T : class
    parameters:
    - id: entity
      type: '{T}'
      description: ''
    - id: context
      type: SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: TKey
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function OnAddExecuting(Of T As Class, TKey)(entity As T, context As RepositoryActionContext(Of T, TKey)) As Boolean
  overridden: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  overload: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting*
  nameWithType.vb: AuditAttribute.OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
- uid: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  id: OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute
  langs:
  - csharp
  - vb
  name: OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: AuditAttribute.OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: OnUpdateExecuting
    path: ../src/Catalyst.Core.Lib/Repository/Attributes/AuditableAttribute.cs
    startLine: 57
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository.Attributes
  summary: "\n\n"
  example: []
  syntax:
    content: >-
      public override bool OnUpdateExecuting<T, TKey>(T entity, RepositoryActionContext<T, TKey> context)

          where T : class
    parameters:
    - id: entity
      type: '{T}'
      description: ''
    - id: context
      type: SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    - id: TKey
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function OnUpdateExecuting(Of T As Class, TKey)(entity As T, context As RepositoryActionContext(Of T, TKey)) As Boolean
  overridden: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  overload: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting*
  nameWithType.vb: AuditAttribute.OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
references:
- uid: Catalyst.Core.Lib.Repository.Attributes
  commentId: N:Catalyst.Core.Lib.Repository.Attributes
  name: Catalyst.Core.Lib.Repository.Attributes
  nameWithType: Catalyst.Core.Lib.Repository.Attributes
  fullName: Catalyst.Core.Lib.Repository.Attributes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  commentId: T:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  parent: SharpRepository.Repository.Aspects
  isExternal: true
  name: RepositoryActionBaseAttribute
  nameWithType: RepositoryActionBaseAttribute
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnInitialized<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnInitialized<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnInitialized(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnInitialized<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnInitialized<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnInitialized(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}},System.Exception)
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
  name: OnError<T, TKey>(RepositoryActionContext<T, TKey>, Exception)
  nameWithType: RepositoryActionBaseAttribute.OnError<T, TKey>(RepositoryActionContext<T, TKey>, Exception)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>, System.Exception)
  nameWithType.vb: RepositoryActionBaseAttribute.OnError(Of T, TKey)(RepositoryActionContext(Of T, TKey), Exception)
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey), System.Exception)
  name.vb: OnError(Of T, TKey)(RepositoryActionContext(Of T, TKey), Exception)
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
    name: OnError<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnError<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
    name: OnError(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnError(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnAddExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnAddExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnUpdateExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnUpdateExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnDeleteExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnDeleteExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnDeleteExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnDeleteExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnSaveExecuting<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnSaveExecuting(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnSaveExecuted<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnSaveExecuted(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  name: OnGetExecuting<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryGetContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryGetContext(Of T, TKey, TResult))
  name.vb: OnGetExecuting(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  name: OnGetExecuted<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryGetContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryGetContext(Of T, TKey, TResult))
  name.vb: OnGetExecuted(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  name: OnGetAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnGetAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  name: OnGetAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnGetAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  name: OnFindExecuting<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext(Of T, TKey, TResult))
  name.vb: OnFindExecuting(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  name: OnFindExecuted<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext(Of T, TKey, TResult))
  name.vb: OnFindExecuted(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  name: OnFindAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnFindAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{{T},{TKey},{TResult}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  name: OnFindAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnFindAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Order
  commentId: P:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Order
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  isExternal: true
  name: Order
  nameWithType: RepositoryActionBaseAttribute.Order
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Order
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Enabled
  commentId: P:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Enabled
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  isExternal: true
  name: Enabled
  nameWithType: RepositoryActionBaseAttribute.Enabled
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.Enabled
- uid: System.Attribute.Equals(System.Object)
  commentId: M:System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(Assembly, Type)
  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(Assembly, Type, Boolean)
  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(MemberInfo, Type)
  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(MemberInfo, Type, Boolean)
  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(Module, Type)
  nameWithType: Attribute.GetCustomAttribute(Module, Type)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(Module, Type, Boolean)
  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(ParameterInfo, Type)
  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttribute(ParameterInfo, Type, Boolean)
  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)
  fullName: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: GetCustomAttribute
    nameWithType: Attribute.GetCustomAttribute
    fullName: System.Attribute.GetCustomAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Assembly)
  nameWithType: Attribute.GetCustomAttributes(Assembly)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Assembly, Boolean)
  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Assembly, Type)
  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Assembly, Type, Boolean)
  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(MemberInfo)
  nameWithType: Attribute.GetCustomAttributes(MemberInfo)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(MemberInfo, Boolean)
  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(MemberInfo, Type)
  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(MemberInfo, Type, Boolean)
  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Module)
  nameWithType: Attribute.GetCustomAttributes(Module)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Module)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Module, Boolean)
  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Module, Type)
  nameWithType: Attribute.GetCustomAttributes(Module, Type)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(Module, Type, Boolean)
  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(ParameterInfo)
  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(ParameterInfo, Boolean)
  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(ParameterInfo, Type)
  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: GetCustomAttributes(ParameterInfo, Type, Boolean)
  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)
  fullName: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Attribute.GetCustomAttributes
    fullName: System.Attribute.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetHashCode
  commentId: M:System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: true
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefaultAttribute
  commentId: M:System.Attribute.IsDefaultAttribute
  parent: System.Attribute
  isExternal: true
  name: IsDefaultAttribute()
  nameWithType: Attribute.IsDefaultAttribute()
  fullName: System.Attribute.IsDefaultAttribute()
  spec.csharp:
  - uid: System.Attribute.IsDefaultAttribute
    name: IsDefaultAttribute
    nameWithType: Attribute.IsDefaultAttribute
    fullName: System.Attribute.IsDefaultAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefaultAttribute
    name: IsDefaultAttribute
    nameWithType: Attribute.IsDefaultAttribute
    fullName: System.Attribute.IsDefaultAttribute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(Assembly, Type)
  nameWithType: Attribute.IsDefined(Assembly, Type)
  fullName: System.Attribute.IsDefined(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(Assembly, Type, Boolean)
  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)
  fullName: System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(MemberInfo, Type)
  nameWithType: Attribute.IsDefined(MemberInfo, Type)
  fullName: System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(MemberInfo, Type, Boolean)
  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)
  fullName: System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(Module, Type)
  nameWithType: Attribute.IsDefined(Module, Type)
  fullName: System.Attribute.IsDefined(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(Module, Type, Boolean)
  nameWithType: Attribute.IsDefined(Module, Type, Boolean)
  fullName: System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(ParameterInfo, Type)
  nameWithType: Attribute.IsDefined(ParameterInfo, Type)
  fullName: System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  parent: System.Attribute
  isExternal: true
  name: IsDefined(ParameterInfo, Type, Boolean)
  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)
  fullName: System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Attribute.IsDefined
    fullName: System.Attribute.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.Match(System.Object)
  commentId: M:System.Attribute.Match(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Match(Object)
  nameWithType: Attribute.Match(Object)
  fullName: System.Attribute.Match(System.Object)
  spec.csharp:
  - uid: System.Attribute.Match(System.Object)
    name: Match
    nameWithType: Attribute.Match
    fullName: System.Attribute.Match
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Match(System.Object)
    name: Match
    nameWithType: Attribute.Match
    fullName: System.Attribute.Match
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.TypeId
  commentId: P:System.Attribute.TypeId
  parent: System.Attribute
  isExternal: true
  name: TypeId
  nameWithType: Attribute.TypeId
  fullName: System.Attribute.TypeId
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SharpRepository.Repository.Aspects
  commentId: N:SharpRepository.Repository.Aspects
  isExternal: true
  name: SharpRepository.Repository.Aspects
  nameWithType: SharpRepository.Repository.Aspects
  fullName: SharpRepository.Repository.Aspects
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnInitialized<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnInitialized<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnInitialized(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnInitialized<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnInitialized<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnInitialized(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnInitialized(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
  isExternal: true
  name: OnError<T, TKey>(RepositoryActionContext<T, TKey>, Exception)
  nameWithType: RepositoryActionBaseAttribute.OnError<T, TKey>(RepositoryActionContext<T, TKey>, Exception)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>, System.Exception)
  nameWithType.vb: RepositoryActionBaseAttribute.OnError(Of T, TKey)(RepositoryActionContext(Of T, TKey), Exception)
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey), System.Exception)
  name.vb: OnError(Of T, TKey)(RepositoryActionContext(Of T, TKey), Exception)
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
    name: OnError<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnError<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1},System.Exception)
    name: OnError(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnError(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnError(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnAddExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnAddExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnUpdateExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnUpdateExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnDeleteExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnDeleteExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnDeleteExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnDeleteExecuted(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnDeleteExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnDeleteExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnSaveExecuting<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnSaveExecuting(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnSaveExecuted<T, TKey>(RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>(RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>(SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)(SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnSaveExecuted(Of T, TKey)(RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuted<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted``2(SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnSaveExecuted(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnSaveExecuted(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  isExternal: true
  name: OnGetExecuting<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryGetContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryGetContext(Of T, TKey, TResult))
  name.vb: OnGetExecuting(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
  isExternal: true
  name: OnGetExecuted<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>(RepositoryGetContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryGetContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryGetContext(Of T, TKey, TResult))
  name.vb: OnGetExecuted(Of T, TKey, TResult)(RepositoryGetContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted``3(SharpRepository.Repository.Aspects.RepositoryGetContext{``0,``1,``2})
    name: OnGetExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryGetContext`3
    name: RepositoryGetContext
    nameWithType: RepositoryGetContext
    fullName: SharpRepository.Repository.Aspects.RepositoryGetContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  isExternal: true
  name: OnGetAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnGetAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  isExternal: true
  name: OnGetAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnGetAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnGetAllExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnGetAllExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  isExternal: true
  name: OnFindExecuting<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext(Of T, TKey, TResult))
  name.vb: OnFindExecuting(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
  isExternal: true
  name: OnFindExecuted<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>(RepositoryQuerySingleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext(Of T, TKey, TResult))
  name.vb: OnFindExecuted(Of T, TKey, TResult)(RepositoryQuerySingleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted``3(SharpRepository.Repository.Aspects.RepositoryQuerySingleContext{``0,``1,``2})
    name: OnFindExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext`3
    name: RepositoryQuerySingleContext
    nameWithType: RepositoryQuerySingleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQuerySingleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  isExternal: true
  name: OnFindAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnFindAllExecuting(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuting<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuting(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuting(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
  isExternal: true
  name: OnFindAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>(RepositoryQueryMultipleContext<T, TKey, TResult>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext<T, TKey, TResult>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext(Of T, TKey, TResult))
  name.vb: OnFindAllExecuted(Of T, TKey, TResult)(RepositoryQueryMultipleContext(Of T, TKey, TResult))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuted<T, TKey, TResult>
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted<T, TKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted``3(SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext{``0,``1,``2})
    name: OnFindAllExecuted(Of T, TKey, TResult)
    nameWithType: RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnFindAllExecuted(Of T, TKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext`3
    name: RepositoryQueryMultipleContext
    nameWithType: RepositoryQueryMultipleContext
    fullName: SharpRepository.Repository.Aspects.RepositoryQueryMultipleContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting*
  commentId: Overload:Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting
  name: OnAddExecuting
  nameWithType: AuditAttribute.OnAddExecuting
  fullName: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnAddExecuting
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}}
  commentId: T:SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1}
  parent: SharpRepository.Repository.Aspects
  definition: SharpRepository.Repository.Aspects.RepositoryActionContext`2
  name: RepositoryActionContext<T, TKey>
  nameWithType: RepositoryActionContext<T, TKey>
  fullName: SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>
  nameWithType.vb: RepositoryActionContext(Of T, TKey)
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey)
  name.vb: RepositoryActionContext(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnAddExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnAddExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnAddExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
  commentId: T:SharpRepository.Repository.Aspects.RepositoryActionContext`2
  isExternal: true
  name: RepositoryActionContext<T, TKey>
  nameWithType: RepositoryActionContext<T, TKey>
  fullName: SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>
  nameWithType.vb: RepositoryActionContext(Of T, TKey)
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey)
  name.vb: RepositoryActionContext(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2({T},SharpRepository.Repository.Aspects.RepositoryActionContext{{T},{TKey}})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  parent: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute
  definition: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  name: OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting*
  commentId: Overload:Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting
  name: OnUpdateExecuting
  nameWithType: AuditAttribute.OnUpdateExecuting
  fullName: Catalyst.Core.Lib.Repository.Attributes.AuditAttribute.OnUpdateExecuting
- uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  commentId: M:SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
  isExternal: true
  name: OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>(T, RepositoryActionContext<T, TKey>)
  fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>(T, SharpRepository.Repository.Aspects.RepositoryActionContext<T, TKey>)
  nameWithType.vb: RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  fullName.vb: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)(T, SharpRepository.Repository.Aspects.RepositoryActionContext(Of T, TKey))
  name.vb: OnUpdateExecuting(Of T, TKey)(T, RepositoryActionContext(Of T, TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuting<T, TKey>
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting<T, TKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting``2(``0,SharpRepository.Repository.Aspects.RepositoryActionContext{``0,``1})
    name: OnUpdateExecuting(Of T, TKey)
    nameWithType: RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)
    fullName: SharpRepository.Repository.Aspects.RepositoryActionBaseAttribute.OnUpdateExecuting(Of T, TKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Aspects.RepositoryActionContext`2
    name: RepositoryActionContext
    nameWithType: RepositoryActionContext
    fullName: SharpRepository.Repository.Aspects.RepositoryActionContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
