### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Util.ByteUtil
  commentId: T:Catalyst.Core.Lib.Util.ByteUtil
  id: ByteUtil
  parent: Catalyst.Core.Lib.Util
  children:
  - Catalyst.Core.Lib.Util.ByteUtil.AppendByte(System.Byte[],System.Byte)
  - Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
  - Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray(System.Int32)
  - Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray(System.Int32)
  - Catalyst.Core.Lib.Util.ByteUtil.Merge(System.Byte[][])
  - Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
  langs:
  - csharp
  - vb
  name: ByteUtil
  nameWithType: ByteUtil
  fullName: Catalyst.Core.Lib.Util.ByteUtil
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ByteUtil
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  syntax:
    content: public static class ByteUtil
    content.vb: Public Module ByteUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
  commentId: P:Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
  id: ZeroByteArray
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: ZeroByteArray
  nameWithType: ByteUtil.ZeroByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: ZeroByteArray
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 33
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  syntax:
    content: public static byte[] ZeroByteArray { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Shared ReadOnly Property ZeroByteArray As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
  commentId: P:Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
  id: EmptyByteArray
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: EmptyByteArray
  nameWithType: ByteUtil.EmptyByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: EmptyByteArray
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 34
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  syntax:
    content: public static byte[] EmptyByteArray { get; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: Public Shared ReadOnly Property EmptyByteArray As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray(System.Int32)
  commentId: M:Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray(System.Int32)
  id: GenerateRandomByteArray(System.Int32)
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: GenerateRandomByteArray(Int32)
  nameWithType: ByteUtil.GenerateRandomByteArray(Int32)
  fullName: Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray(System.Int32)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GenerateRandomByteArray
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 39
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  summary: "\nreturns a random array of byte of the desired length\n"
  example: []
  syntax:
    content: public static byte[] GenerateRandomByteArray(int length)
    parameters:
    - id: length
      type: System.Int32
    return:
      type: System.Byte[]
    content.vb: Public Shared Function GenerateRandomByteArray(length As Integer) As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Catalyst.Core.Lib.Util.ByteUtil.AppendByte(System.Byte[],System.Byte)
  commentId: M:Catalyst.Core.Lib.Util.ByteUtil.AppendByte(System.Byte[],System.Byte)
  id: AppendByte(System.Byte[],System.Byte)
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: AppendByte(Byte[], Byte)
  nameWithType: ByteUtil.AppendByte(Byte[], Byte)
  fullName: Catalyst.Core.Lib.Util.ByteUtil.AppendByte(System.Byte[], System.Byte)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: AppendByte
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 49
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  summary: "\nCreates a copy of bytes and appends b to the end of it\n"
  example: []
  syntax:
    content: public static byte[] AppendByte(byte[] array, byte b)
    parameters:
    - id: array
      type: System.Byte[]
    - id: b
      type: System.Byte
    return:
      type: System.Byte[]
    content.vb: Public Shared Function AppendByte(array As Byte(), b As Byte) As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.AppendByte*
  nameWithType.vb: ByteUtil.AppendByte(Byte(), Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Util.ByteUtil.AppendByte(System.Byte(), System.Byte)
  name.vb: AppendByte(Byte(), Byte)
- uid: Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray(System.Int32)
  commentId: M:Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray(System.Int32)
  id: InitialiseEmptyByteArray(System.Int32)
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: InitialiseEmptyByteArray(Int32)
  nameWithType: ByteUtil.InitialiseEmptyByteArray(Int32)
  fullName: Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray(System.Int32)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: InitialiseEmptyByteArray
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 65
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  summary: "\n\n"
  example: []
  syntax:
    content: public static byte[] InitialiseEmptyByteArray(int length)
    parameters:
    - id: length
      type: System.Int32
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: Public Shared Function InitialiseEmptyByteArray(length As Integer) As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Catalyst.Core.Lib.Util.ByteUtil.Merge(System.Byte[][])
  commentId: M:Catalyst.Core.Lib.Util.ByteUtil.Merge(System.Byte[][])
  id: Merge(System.Byte[][])
  parent: Catalyst.Core.Lib.Util.ByteUtil
  langs:
  - csharp
  - vb
  name: Merge(Byte[][])
  nameWithType: ByteUtil.Merge(Byte[][])
  fullName: Catalyst.Core.Lib.Util.ByteUtil.Merge(System.Byte[][])
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Util/ByteUtil.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Merge
    path: ../src/Catalyst.Core.Lib/Util/ByteUtil.cs
    startLine: 97
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Util
  example: []
  syntax:
    content: public static byte[] Merge(params byte[][] arrays)
    parameters:
    - id: arrays
      type: System.Byte[][]
      description: '- arrays to merge '
    return:
      type: System.Byte[]
      description: '- merged array '
    content.vb: Public Shared Function Merge(ParamArray arrays As Byte()()) As Byte()
  overload: Catalyst.Core.Lib.Util.ByteUtil.Merge*
  nameWithType.vb: ByteUtil.Merge(Byte()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Util.ByteUtil.Merge(System.Byte()())
  name.vb: Merge(Byte()())
references:
- uid: Catalyst.Core.Lib.Util
  commentId: N:Catalyst.Core.Lib.Util
  name: Catalyst.Core.Lib.Util
  nameWithType: Catalyst.Core.Lib.Util
  fullName: Catalyst.Core.Lib.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
  name: ZeroByteArray
  nameWithType: ByteUtil.ZeroByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.ZeroByteArray
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
  name: EmptyByteArray
  nameWithType: ByteUtil.EmptyByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.EmptyByteArray
- uid: Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray
  name: GenerateRandomByteArray
  nameWithType: ByteUtil.GenerateRandomByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.GenerateRandomByteArray
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Catalyst.Core.Lib.Util.ByteUtil.AppendByte*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.AppendByte
  name: AppendByte
  nameWithType: ByteUtil.AppendByte
  fullName: Catalyst.Core.Lib.Util.ByteUtil.AppendByte
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray
  name: InitialiseEmptyByteArray
  nameWithType: ByteUtil.InitialiseEmptyByteArray
  fullName: Catalyst.Core.Lib.Util.ByteUtil.InitialiseEmptyByteArray
- uid: Catalyst.Core.Lib.Util.ByteUtil.Merge*
  commentId: Overload:Catalyst.Core.Lib.Util.ByteUtil.Merge
  name: Merge
  nameWithType: ByteUtil.Merge
  fullName: Catalyst.Core.Lib.Util.ByteUtil.Merge
- uid: System.Byte[][]
  isExternal: true
  name: Byte[][]
  nameWithType: Byte[][]
  fullName: System.Byte[][]
  nameWithType.vb: Byte()()
  fullName.vb: System.Byte()()
  name.vb: Byte()()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
