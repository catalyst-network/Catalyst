### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1
  commentId: T:Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1
  id: FileSystemAwareXmlRepository`1
  parent: Catalyst.Core.Lib.Repository
  children:
  - Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,System.String)
  langs:
  - csharp
  - vb
  name: FileSystemAwareXmlRepository<T>
  nameWithType: FileSystemAwareXmlRepository<T>
  fullName: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository<T>
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/FileSystemAwareXmlRepository.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: FileSystemAwareXmlRepository
    path: ../src/Catalyst.Core.Lib/Repository/FileSystemAwareXmlRepository.cs
    startLine: 34
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  summary: "\nXml Repository where base folder is derived from the file system <xref href=\"Catalyst.Abstractions.FileSystem.IFileSystem\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class FileSystemAwareXmlRepository<T> : XmlRepository<T, string>, IRepository<T, string>, ICrudRepository<T, string>, IRepositoryBase<T>, ICanAdd<T>, ICanUpdate<T>, ICanBatch<T>, IRepositoryQueryable<T>, ICanFind<T>, IDisposable, IRepositoryAggregates<T> where T : class, new()'
    typeParameters:
    - id: T
      description: Type of object
    content.vb: >-
      Public Class FileSystemAwareXmlRepository(Of T As {Class, New})

          Inherits XmlRepository(Of T, String)

          Implements IRepository(Of T, String), ICrudRepository(Of T, String), IRepositoryBase(Of T), ICanAdd(Of T), ICanUpdate(Of T), ICanBatch(Of T), IRepositoryQueryable(Of T), ICanFind(Of T), IDisposable, IRepositoryAggregates(Of T)
  seealso:
  - linkId: SharpRepository.XmlRepository.XmlRepository`1
    commentId: T:SharpRepository.XmlRepository.XmlRepository`1
  inheritance:
  - System.Object
  - SharpRepository.Repository.RepositoryBase{{T},System.String}
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  - SharpRepository.XmlRepository.XmlRepository{{T},System.String}
  implements:
  - SharpRepository.Repository.IRepository{{T},System.String}
  - SharpRepository.Repository.ICrudRepository{{T},System.String}
  - SharpRepository.Repository.IRepositoryBase{{T}}
  - SharpRepository.Repository.Traits.ICanAdd{{T}}
  - SharpRepository.Repository.Traits.ICanUpdate{{T}}
  - SharpRepository.Repository.Traits.ICanBatch{{T}}
  - SharpRepository.Repository.IRepositoryQueryable{{T}}
  - SharpRepository.Repository.Traits.ICanFind{{T}}
  - System.IDisposable
  - SharpRepository.Repository.IRepositoryAggregates{{T}}
  inheritedMembers:
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.AddItem({T})
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.DeleteItem({T})
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.UpdateItem({T})
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.SaveChanges
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.Dispose
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.ToString
  - SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.Items
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.AsQueryable
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.QueryManager
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.BeginBatch
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.DisableCaching
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.ClearCache
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.AsQueryable
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.DisableAspect(System.Type)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.EnableAspect(System.Type)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(System.String)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryGet(System.String,{T}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Find(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Find``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{{T}},{T}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{T}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{TResult}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Find(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Find``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},{T}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{T}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{TResult}@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Count
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Count(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Count(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.AddItem({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Add({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Add(System.Collections.Generic.IEnumerable{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.DeleteItem({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Collections.Generic.IEnumerable{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.String[])
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.String)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(SharpRepository.Repository.Specifications.ISpecification{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.UpdateItem({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Update({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Update(System.Collections.Generic.IEnumerable{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.SaveChanges
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Dispose
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.SetTraceInfo(System.String,System.String,System.Boolean)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKey({T})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKey({T},System.String@)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.SetPrimaryKey({T},System.String)
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.ByPrimaryKeySpecification(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.CreateSpecification(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{System.String})
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKeyPropertyInfo
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Conventions
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.Aspects
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.EntityType
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.KeyType
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TypeName
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.CacheUsed
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.CachingStrategy
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.CachingEnabled
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.TraceInfo
  - SharpRepository.Repository.RepositoryBase{{T},System.String}.GenerateKeyOnAdd
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: FileSystemAwareXmlRepository(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository(Of T)
  name.vb: FileSystemAwareXmlRepository(Of T)
- uid: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,System.String)
  commentId: M:Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,System.String)
  id: '#ctor(Catalyst.Abstractions.FileSystem.IFileSystem,System.String)'
  parent: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1
  langs:
  - csharp
  - vb
  name: FileSystemAwareXmlRepository(IFileSystem, String)
  nameWithType: FileSystemAwareXmlRepository<T>.FileSystemAwareXmlRepository(IFileSystem, String)
  fullName: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository<T>.FileSystemAwareXmlRepository(Catalyst.Abstractions.FileSystem.IFileSystem, System.String)
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/Repository/FileSystemAwareXmlRepository.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/Repository/FileSystemAwareXmlRepository.cs
    startLine: 36
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Repository
  syntax:
    content: public FileSystemAwareXmlRepository(IFileSystem fileSystem, string path = "")
    parameters:
    - id: fileSystem
      type: Catalyst.Abstractions.FileSystem.IFileSystem
    - id: path
      type: System.String
    content.vb: Public Sub New(fileSystem As IFileSystem, path As String = "")
  overload: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor*
  nameWithType.vb: FileSystemAwareXmlRepository(Of T).FileSystemAwareXmlRepository(IFileSystem, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository(Of T).FileSystemAwareXmlRepository(Catalyst.Abstractions.FileSystem.IFileSystem, System.String)
references:
- uid: Catalyst.Abstractions.FileSystem.IFileSystem
  commentId: T:Catalyst.Abstractions.FileSystem.IFileSystem
  parent: Catalyst.Abstractions.FileSystem
  name: IFileSystem
  nameWithType: IFileSystem
  fullName: Catalyst.Abstractions.FileSystem.IFileSystem
- uid: SharpRepository.XmlRepository.XmlRepository`1
  commentId: T:SharpRepository.XmlRepository.XmlRepository`1
  isExternal: true
- uid: Catalyst.Core.Lib.Repository
  commentId: N:Catalyst.Core.Lib.Repository
  name: Catalyst.Core.Lib.Repository
  nameWithType: Catalyst.Core.Lib.Repository
  fullName: Catalyst.Core.Lib.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}
  commentId: T:SharpRepository.Repository.RepositoryBase{`0,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.RepositoryBase`2
  name: RepositoryBase<T, String>
  nameWithType: RepositoryBase<T, String>
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>
  nameWithType.vb: RepositoryBase(Of T, String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String)
  name.vb: RepositoryBase(Of T, String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: SharpRepository.Repository.RepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: SharpRepository.Repository.RepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  commentId: T:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.LinqRepositoryBase`2
  name: LinqRepositoryBase<T, String>
  nameWithType: LinqRepositoryBase<T, String>
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>
  nameWithType.vb: LinqRepositoryBase(Of T, String)
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String)
  name.vb: LinqRepositoryBase(Of T, String)
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2
    name: LinqRepositoryBase
    nameWithType: LinqRepositoryBase
    fullName: SharpRepository.Repository.LinqRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2
    name: LinqRepositoryBase
    nameWithType: LinqRepositoryBase
    fullName: SharpRepository.Repository.LinqRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  commentId: T:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}
  parent: SharpRepository.XmlRepository
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2
  name: XmlRepositoryBase<T, String>
  nameWithType: XmlRepositoryBase<T, String>
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>
  nameWithType.vb: XmlRepositoryBase(Of T, String)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String)
  name.vb: XmlRepositoryBase(Of T, String)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2
    name: XmlRepositoryBase
    nameWithType: XmlRepositoryBase
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2
    name: XmlRepositoryBase
    nameWithType: XmlRepositoryBase
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepository{{T},System.String}
  commentId: T:SharpRepository.XmlRepository.XmlRepository{`0,System.String}
  parent: SharpRepository.XmlRepository
  definition: SharpRepository.XmlRepository.XmlRepository`2
  name: XmlRepository<T, String>
  nameWithType: XmlRepository<T, String>
  fullName: SharpRepository.XmlRepository.XmlRepository<T, System.String>
  nameWithType.vb: XmlRepository(Of T, String)
  fullName.vb: SharpRepository.XmlRepository.XmlRepository(Of T, System.String)
  name.vb: XmlRepository(Of T, String)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepository`2
    name: XmlRepository
    nameWithType: XmlRepository
    fullName: SharpRepository.XmlRepository.XmlRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepository`2
    name: XmlRepository
    nameWithType: XmlRepository
    fullName: SharpRepository.XmlRepository.XmlRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepository{{T},System.String}
  commentId: T:SharpRepository.Repository.IRepository{`0,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepository`2
  name: IRepository<T, String>
  nameWithType: IRepository<T, String>
  fullName: SharpRepository.Repository.IRepository<T, System.String>
  nameWithType.vb: IRepository(Of T, String)
  fullName.vb: SharpRepository.Repository.IRepository(Of T, System.String)
  name.vb: IRepository(Of T, String)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository{{T},System.String}
  commentId: T:SharpRepository.Repository.ICrudRepository{`0,System.String}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.ICrudRepository`2
  name: ICrudRepository<T, String>
  nameWithType: ICrudRepository<T, String>
  fullName: SharpRepository.Repository.ICrudRepository<T, System.String>
  nameWithType.vb: ICrudRepository(Of T, String)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, System.String)
  name.vb: ICrudRepository(Of T, String)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase{{T}}
  commentId: T:SharpRepository.Repository.IRepositoryBase{`0}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryBase`1
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: SharpRepository.Repository.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd{{T}}
  commentId: T:SharpRepository.Repository.Traits.ICanAdd{`0}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanAdd`1
  name: ICanAdd<T>
  nameWithType: ICanAdd<T>
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>
  nameWithType.vb: ICanAdd(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T)
  name.vb: ICanAdd(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanUpdate{{T}}
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate{`0}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanUpdate`1
  name: ICanUpdate<T>
  nameWithType: ICanUpdate<T>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>
  nameWithType.vb: ICanUpdate(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T)
  name.vb: ICanUpdate(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch{{T}}
  commentId: T:SharpRepository.Repository.Traits.ICanBatch{`0}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanBatch`1
  name: ICanBatch<T>
  nameWithType: ICanBatch<T>
  fullName: SharpRepository.Repository.Traits.ICanBatch<T>
  nameWithType.vb: ICanBatch(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of T)
  name.vb: ICanBatch(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable{{T}}
  commentId: T:SharpRepository.Repository.IRepositoryQueryable{`0}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryQueryable`1
  name: IRepositoryQueryable<T>
  nameWithType: IRepositoryQueryable<T>
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>
  nameWithType.vb: IRepositoryQueryable(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T)
  name.vb: IRepositoryQueryable(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind{{T}}
  commentId: T:SharpRepository.Repository.Traits.ICanFind{`0}
  parent: SharpRepository.Repository.Traits
  definition: SharpRepository.Repository.Traits.ICanFind`1
  name: ICanFind<T>
  nameWithType: ICanFind<T>
  fullName: SharpRepository.Repository.Traits.ICanFind<T>
  nameWithType.vb: ICanFind(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T)
  name.vb: ICanFind(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: SharpRepository.Repository.IRepositoryAggregates{{T}}
  commentId: T:SharpRepository.Repository.IRepositoryAggregates{`0}
  parent: SharpRepository.Repository
  definition: SharpRepository.Repository.IRepositoryAggregates`1
  name: IRepositoryAggregates<T>
  nameWithType: IRepositoryAggregates<T>
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>
  nameWithType.vb: IRepositoryAggregates(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T)
  name.vb: IRepositoryAggregates(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: BaseQuery(IFetchStrategy<T>)
  nameWithType: XmlRepositoryBase<T, String>.BaseQuery(IFetchStrategy<T>)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: XmlRepositoryBase(Of T, String).BaseQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: BaseQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: XmlRepositoryBase<T, String>.BaseQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: XmlRepositoryBase(Of T, String).BaseQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetQuery(String, IFetchStrategy<T>)
  nameWithType: XmlRepositoryBase<T, String>.GetQuery(String, IFetchStrategy<T>)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: XmlRepositoryBase(Of T, String).GetQuery(String, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: XmlRepositoryBase<T, String>.GetQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: XmlRepositoryBase(Of T, String).GetQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.AddItem({T})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.AddItem(`0)
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
  name: AddItem(T)
  nameWithType: XmlRepositoryBase<T, String>.AddItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.AddItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, String).AddItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).AddItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: XmlRepositoryBase<T, String>.AddItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: XmlRepositoryBase(Of T, String).AddItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.DeleteItem({T})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.DeleteItem(`0)
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
  name: DeleteItem(T)
  nameWithType: XmlRepositoryBase<T, String>.DeleteItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.DeleteItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, String).DeleteItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).DeleteItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: XmlRepositoryBase<T, String>.DeleteItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: XmlRepositoryBase(Of T, String).DeleteItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.UpdateItem({T})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.UpdateItem(`0)
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
  name: UpdateItem(T)
  nameWithType: XmlRepositoryBase<T, String>.UpdateItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.UpdateItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, String).UpdateItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).UpdateItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: XmlRepositoryBase<T, String>.UpdateItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: XmlRepositoryBase(Of T, String).UpdateItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.SaveChanges
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.SaveChanges
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
  name: SaveChanges()
  nameWithType: XmlRepositoryBase<T, String>.SaveChanges()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.SaveChanges()
  nameWithType.vb: XmlRepositoryBase(Of T, String).SaveChanges()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).SaveChanges()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: XmlRepositoryBase<T, String>.SaveChanges
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: XmlRepositoryBase(Of T, String).SaveChanges
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.Dispose
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.Dispose
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
  name: Dispose()
  nameWithType: XmlRepositoryBase<T, String>.Dispose()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.Dispose()
  nameWithType.vb: XmlRepositoryBase(Of T, String).Dispose()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).Dispose()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
    name: Dispose
    nameWithType: XmlRepositoryBase<T, String>.Dispose
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
    name: Dispose
    nameWithType: XmlRepositoryBase(Of T, String).Dispose
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.ToString
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.ToString
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
  name: ToString()
  nameWithType: XmlRepositoryBase<T, String>.ToString()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.ToString()
  nameWithType.vb: XmlRepositoryBase(Of T, String).ToString()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).ToString()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
    name: ToString
    nameWithType: XmlRepositoryBase<T, String>.ToString
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
    name: ToString
    nameWithType: XmlRepositoryBase(Of T, String).ToString
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}.Items
  commentId: P:SharpRepository.XmlRepository.XmlRepositoryBase{`0,System.String}.Items
  parent: SharpRepository.XmlRepository.XmlRepositoryBase{{T},System.String}
  definition: SharpRepository.XmlRepository.XmlRepositoryBase`2.Items
  name: Items
  nameWithType: XmlRepositoryBase<T, String>.Items
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, System.String>.Items
  nameWithType.vb: XmlRepositoryBase(Of T, String).Items
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, System.String).Items
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.AsQueryable
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.AsQueryable
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
  name: AsQueryable()
  nameWithType: LinqRepositoryBase<T, String>.AsQueryable()
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.AsQueryable()
  nameWithType.vb: LinqRepositoryBase(Of T, String).AsQueryable()
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: LinqRepositoryBase<T, String>.AsQueryable
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: LinqRepositoryBase(Of T, String).AsQueryable
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetQuery(String, IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, String>.GetQuery(String, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).GetQuery(String, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: LinqRepositoryBase<T, String>.GetQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: LinqRepositoryBase(Of T, String).GetQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetQuery<TResult>(String, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  nameWithType: LinqRepositoryBase<T, String>.GetQuery<TResult>(String, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetQuery<TResult>(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).GetQuery(Of TResult)(String, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetQuery(Of TResult)(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetQuery(Of TResult)(String, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery<TResult>
    nameWithType: LinqRepositoryBase<T, String>.GetQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, String).GetQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: FindQuery(ISpecification<T>)
  nameWithType: LinqRepositoryBase<T, String>.FindQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase<T, String>.FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase(Of T, String).FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: LinqRepositoryBase<T, String>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: FindQuery<TResult>
    nameWithType: LinqRepositoryBase<T, String>.FindQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: FindQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, String).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, String>.FindQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase<T, String>.FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase(Of T, String).FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, String>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery<TResult>
    nameWithType: LinqRepositoryBase<T, String>.FindQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, String).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAllQuery(IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, String>.GetAllQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).GetAllQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase<T, String>.GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase(Of T, String).GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, String>.GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase<T, String>.GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase(Of T, String).GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: FindAllQuery(ISpecification<T>)
  nameWithType: LinqRepositoryBase<T, String>.FindAllQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindAllQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindAllQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase<T, String>.FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase(Of T, String).FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, String>.FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase<T, String>.FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase(Of T, String).FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase{`0,System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  parent: SharpRepository.Repository.LinqRepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: LinqRepositoryBase<T, String>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, String).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: LinqRepositoryBase<T, String>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, System.String>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: LinqRepositoryBase(Of T, String).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, System.String).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.QueryManager
  commentId: F:SharpRepository.Repository.RepositoryBase{`0,System.String}.QueryManager
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.QueryManager
  name: QueryManager
  nameWithType: RepositoryBase<T, String>.QueryManager
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.QueryManager
  nameWithType.vb: RepositoryBase(Of T, String).QueryManager
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).QueryManager
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.BeginBatch
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.BeginBatch
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.BeginBatch
  name: BeginBatch()
  nameWithType: RepositoryBase<T, String>.BeginBatch()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.BeginBatch()
  nameWithType.vb: RepositoryBase(Of T, String).BeginBatch()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).BeginBatch()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryBase<T, String>.BeginBatch
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryBase(Of T, String).BeginBatch
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.DisableCaching
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.DisableCaching
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.DisableCaching
  name: DisableCaching()
  nameWithType: RepositoryBase<T, String>.DisableCaching()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DisableCaching()
  nameWithType.vb: RepositoryBase(Of T, String).DisableCaching()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).DisableCaching()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryBase<T, String>.DisableCaching
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryBase(Of T, String).DisableCaching
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.ClearCache
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.ClearCache
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.ClearCache
  name: ClearCache()
  nameWithType: RepositoryBase<T, String>.ClearCache()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ClearCache()
  nameWithType.vb: RepositoryBase(Of T, String).ClearCache()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).ClearCache()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ClearCache
    name: ClearCache
    nameWithType: RepositoryBase<T, String>.ClearCache
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ClearCache
    name: ClearCache
    nameWithType: RepositoryBase(Of T, String).ClearCache
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: BaseQuery(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.BaseQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).BaseQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: BaseQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: RepositoryBase<T, String>.BaseQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: RepositoryBase(Of T, String).BaseQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.AsQueryable
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.AsQueryable
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.AsQueryable
  name: AsQueryable()
  nameWithType: RepositoryBase<T, String>.AsQueryable()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.AsQueryable()
  nameWithType.vb: RepositoryBase(Of T, String).AsQueryable()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryBase<T, String>.AsQueryable
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryBase(Of T, String).AsQueryable
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAllQuery(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAllQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAllQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase<T, String>.GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase(Of T, String).GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase<T, String>.GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase(Of T, String).GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.DisableAspect(System.Type)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.DisableAspect(System.Type)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
  name: DisableAspect(Type)
  nameWithType: RepositoryBase<T, String>.DisableAspect(Type)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DisableAspect(System.Type)
  nameWithType.vb: RepositoryBase(Of T, String).DisableAspect(Type)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).DisableAspect(System.Type)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
    name: DisableAspect
    nameWithType: RepositoryBase<T, String>.DisableAspect
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DisableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
    name: DisableAspect
    nameWithType: RepositoryBase(Of T, String).DisableAspect
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).DisableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.EnableAspect(System.Type)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.EnableAspect(System.Type)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
  name: EnableAspect(Type)
  nameWithType: RepositoryBase<T, String>.EnableAspect(Type)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.EnableAspect(System.Type)
  nameWithType.vb: RepositoryBase(Of T, String).EnableAspect(Type)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).EnableAspect(System.Type)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
    name: EnableAspect
    nameWithType: RepositoryBase<T, String>.EnableAspect
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.EnableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
    name: EnableAspect
    nameWithType: RepositoryBase(Of T, String).EnableAspect
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).EnableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll
  name: GetAll()
  nameWithType: RepositoryBase<T, String>.GetAll()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll()
  nameWithType.vb: RepositoryBase(Of T, String).GetAll()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAll(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
  name: GetAll(String[])
  nameWithType: RepositoryBase<T, String>.GetAll(String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.GetAll(Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll(IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.GetAll(IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll(IQueryOptions<T>, String[])
  nameWithType: RepositoryBase<T, String>.GetAll(IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase<T, String>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, String).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, String>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetQuery(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetQuery(String, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetQuery(String, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetQuery(String, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetQuery(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: RepositoryBase<T, String>.GetQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: RepositoryBase(Of T, String).GetQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetQuery``1(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetQuery<TResult>(String, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.GetQuery<TResult>(String, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetQuery<TResult>(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GetQuery(Of TResult)(String, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetQuery(Of TResult)(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetQuery(Of TResult)(String, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery<TResult>
    nameWithType: RepositoryBase<T, String>.GetQuery<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetQuery(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TJoinKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: RepositoryBase<T, String>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryBase<T, String>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryBase(Of T, String).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get(String, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.Get(String, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get(System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).Get(String, Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(String, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryBase<T, String>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryBase(Of T, String).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get(System.String,System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
  name: Get(String, String[])
  nameWithType: RepositoryBase<T, String>.Get(String, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get(System.String, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).Get(String, String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(System.String, System.String())
  name.vb: Get(String, String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
    name: Get
    nameWithType: RepositoryBase<T, String>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
    name: Get
    nameWithType: RepositoryBase(Of T, String).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get(System.String)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get(`1)
  name: Get(String)
  nameWithType: RepositoryBase<T, String>.Get(String)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get(System.String)
  nameWithType.vb: RepositoryBase(Of T, String).Get(String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1)
    name: Get
    nameWithType: RepositoryBase<T, String>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1)
    name: Get
    nameWithType: RepositoryBase(Of T, String).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get(String, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.Get(String, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Get(String, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryBase<T, String>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryBase(Of T, String).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Linq.Expressions.Expression{System.Func{{T},System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  name: Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, String>.Get<TResult>(String, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, String).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryBase<T, String>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  name: Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryBase<T, String>.Get<TResult>(String, Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryBase<T, String>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Get<TResult>(String, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Get<TResult>(String, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryBase<T, String>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Get``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.Get<TResult>(String, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(Of TResult)(String, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryBase<T, String>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetMany(System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
  name: GetMany(String[])
  nameWithType: RepositoryBase<T, String>.GetMany(String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany(System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetMany(String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(System.String())
  name.vb: GetMany(String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
    name: GetMany
    nameWithType: RepositoryBase<T, String>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
    name: GetMany
    nameWithType: RepositoryBase(Of T, String).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  name: GetMany(IEnumerable<String>)
  nameWithType: RepositoryBase<T, String>.GetMany(IEnumerable<String>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryBase(Of T, String).GetMany(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetMany(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: RepositoryBase<T, String>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: RepositoryBase(Of T, String).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetMany(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetMany(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetMany(IEnumerable<String>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetMany(IEnumerable(Of String), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryBase<T, String>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryBase(Of T, String).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  name: GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryBase<T, String>.GetMany<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany<TResult>
    nameWithType: RepositoryBase<T, String>.GetMany<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetMany(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetMany``1(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.GetMany<TResult>(IEnumerable<String>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany<TResult>(System.Collections.Generic.IEnumerable<System.String>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of System.String), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of String), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryBase<T, String>.GetMany<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryBase(Of T, String).GetMany(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetManyAsDictionary(System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
  name: GetManyAsDictionary(String[])
  nameWithType: RepositoryBase<T, String>.GetManyAsDictionary(String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary(System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).GetManyAsDictionary(String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary(System.String())
  name.vb: GetManyAsDictionary(String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  name: GetManyAsDictionary(IEnumerable<String>)
  nameWithType: RepositoryBase<T, String>.GetManyAsDictionary(IEnumerable<String>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryBase(Of T, String).GetManyAsDictionary(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: GetManyAsDictionary(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetManyAsDictionary(System.Collections.Generic.IEnumerable{System.String},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.GetManyAsDictionary(IEnumerable<String>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<System.String>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of System.String), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetManyAsDictionary(IEnumerable(Of String), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, String>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, String).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(System.String)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Exists(System.String)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
  name: Exists(String)
  nameWithType: RepositoryBase<T, String>.Exists(String)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists(System.String)
  nameWithType.vb: RepositoryBase(Of T, String).Exists(String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
    name: Exists
    nameWithType: RepositoryBase<T, String>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
    name: Exists
    nameWithType: RepositoryBase(Of T, String).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryGet(System.String,{T}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryGet(System.String,`0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
  name: TryGet(String, T)
  nameWithType: RepositoryBase<T, String>.TryGet(String, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryGet(System.String, T)
  nameWithType.vb: RepositoryBase(Of T, String).TryGet(String, T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryGet(System.String, T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: RepositoryBase<T, String>.TryGet
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: RepositoryBase(Of T, String).TryGet
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryGet``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, String>.TryGet<TResult>(String, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryGet<TResult>(System.String, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, String).TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryGet(Of TResult)(System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryGet(Of TResult)(String, Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryBase<T, String>.TryGet<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryGet<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryBase(Of T, String).TryGet(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryGet(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: FindAllQuery(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.FindAllQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAllQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindAllQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase<T, String>.FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase(Of T, String).FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase<T, String>.FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase(Of T, String).FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindAll(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase<T, String>.FindAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase(Of T, String).FindAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryBase<T, String>.FindAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).FindAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase<T, String>.FindAll
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase(Of T, String).FindAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindAll``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryBase<T, String>.FindAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryBase(Of T, String).FindAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: FindQuery(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.FindQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: RepositoryBase<T, String>.FindQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: RepositoryBase(Of T, String).FindQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: RepositoryBase<T, String>.FindQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: RepositoryBase(Of T, String).FindQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery<TResult>
    nameWithType: RepositoryBase<T, String>.FindQuery<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery(Of TResult)
    nameWithType: RepositoryBase(Of T, String).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Find(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.Find(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Find(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase<T, String>.Find
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase(Of T, String).Find
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Find``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryBase<T, String>.Find<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Find(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Exists(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.Exists(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Exists(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Exists(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryBase<T, String>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryBase(Of T, String).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{{T}},{T}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  name: TryFind(ISpecification<T>, T)
  nameWithType: RepositoryBase<T, String>.TryFind(ISpecification<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, T)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(ISpecification(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), T)
  name.vb: TryFind(ISpecification(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, String>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, String).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{{T}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{T}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(ISpecification<T>, IQueryOptions<T>, T)
  nameWithType: RepositoryBase<T, String>.TryFind(ISpecification<T>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, String>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, String).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, String>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, String>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, String).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{TResult}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryBase<T, String>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, String>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, String).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Find(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase<T, String>.Find
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase(Of T, String).Find
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Find``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, String>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryBase<T, String>.Find<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Find(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Exists(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, String>.Exists(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, String).Exists(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryBase<T, String>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryBase(Of T, String).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},{T}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  name: TryFind(Expression<Func<T, Boolean>>, T)
  nameWithType: RepositoryBase<T, String>.TryFind(Expression<Func<T, Boolean>>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, T)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Expression(Of Func(Of T, Boolean)), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, String>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, String).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{T}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  nameWithType: RepositoryBase<T, String>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, String>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, String).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},{TResult}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, String>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, String>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, String).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},SharpRepository.Repository.Queries.IQueryOptions{{T}},{TResult}@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryBase<T, String>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryBase(Of T, String).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, String>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, String).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{{TGroupKey},{T}},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, String>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, String).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.LongCount
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.LongCount
  name: LongCount()
  nameWithType: RepositoryBase<T, String>.LongCount()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount()
  nameWithType.vb: RepositoryBase(Of T, String).LongCount()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount
    name: LongCount
    nameWithType: RepositoryBase<T, String>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount
    name: LongCount
    nameWithType: RepositoryBase(Of T, String).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: LongCount(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.LongCount(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).LongCount(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: LongCount(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryBase<T, String>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryBase(Of T, String).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.LongCount(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, String>.LongCount(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, String).LongCount(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryBase<T, String>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryBase(Of T, String).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Count
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Count
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Count
  name: Count()
  nameWithType: RepositoryBase<T, String>.Count()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count()
  nameWithType.vb: RepositoryBase(Of T, String).Count()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count
    name: Count
    nameWithType: RepositoryBase<T, String>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count
    name: Count
    nameWithType: RepositoryBase(Of T, String).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Count(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Count(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.Count(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Count(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Count(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryBase<T, String>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryBase(Of T, String).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Count(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, String>.Count(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, String).Count(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryBase<T, String>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryBase(Of T, String).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Sum(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, String>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, String).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Average(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, String>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, String).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, String>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, String).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, String>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, String>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, String>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, String>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, String>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, String>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, String).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, String>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, String).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{{T}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{T},{TGroupKey}}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, String>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, String).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.AddItem({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.AddItem(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
  name: AddItem(T)
  nameWithType: RepositoryBase<T, String>.AddItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.AddItem(T)
  nameWithType.vb: RepositoryBase(Of T, String).AddItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).AddItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: RepositoryBase<T, String>.AddItem
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: RepositoryBase(Of T, String).AddItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Add({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Add(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Add(`0)
  name: Add(T)
  nameWithType: RepositoryBase<T, String>.Add(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Add(T)
  nameWithType.vb: RepositoryBase(Of T, String).Add(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Add(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(`0)
    name: Add
    nameWithType: RepositoryBase<T, String>.Add
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(`0)
    name: Add
    nameWithType: RepositoryBase(Of T, String).Add
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Add(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Add(System.Collections.Generic.IEnumerable{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryBase<T, String>.Add(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Add(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryBase<T, String>.Add
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryBase(Of T, String).Add
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.DeleteItem({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.DeleteItem(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
  name: DeleteItem(T)
  nameWithType: RepositoryBase<T, String>.DeleteItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DeleteItem(T)
  nameWithType.vb: RepositoryBase(Of T, String).DeleteItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).DeleteItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: RepositoryBase<T, String>.DeleteItem
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: RepositoryBase(Of T, String).DeleteItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
  name: Delete(T)
  nameWithType: RepositoryBase<T, String>.Delete(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(T)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(System.Collections.Generic.IEnumerable{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
  name: Delete(IEnumerable<T>)
  nameWithType: RepositoryBase<T, String>.Delete(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
  name: Delete(IEnumerable<String>)
  nameWithType: RepositoryBase<T, String>.Delete(IEnumerable<String>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(System.String[])
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
  name: Delete(String[])
  nameWithType: RepositoryBase<T, String>.Delete(String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(System.String[])
  nameWithType.vb: RepositoryBase(Of T, String).Delete(String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(System.String())
  name.vb: Delete(String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.String)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(System.String)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
  name: Delete(String)
  nameWithType: RepositoryBase<T, String>.Delete(String)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(System.String)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, String>.Delete(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Delete(SharpRepository.Repository.Specifications.ISpecification{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  name: Delete(ISpecification<T>)
  nameWithType: RepositoryBase<T, String>.Delete(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Delete(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Delete(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryBase<T, String>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryBase(Of T, String).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.UpdateItem({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.UpdateItem(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
  name: UpdateItem(T)
  nameWithType: RepositoryBase<T, String>.UpdateItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.UpdateItem(T)
  nameWithType.vb: RepositoryBase(Of T, String).UpdateItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).UpdateItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: RepositoryBase<T, String>.UpdateItem
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: RepositoryBase(Of T, String).UpdateItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Update({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Update(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Update(`0)
  name: Update(T)
  nameWithType: RepositoryBase<T, String>.Update(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Update(T)
  nameWithType.vb: RepositoryBase(Of T, String).Update(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Update(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(`0)
    name: Update
    nameWithType: RepositoryBase<T, String>.Update
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(`0)
    name: Update
    nameWithType: RepositoryBase(Of T, String).Update
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Update(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Update(System.Collections.Generic.IEnumerable{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
  name: Update(IEnumerable<T>)
  nameWithType: RepositoryBase<T, String>.Update(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, String).Update(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryBase<T, String>.Update
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryBase(Of T, String).Update
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.SaveChanges
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.SaveChanges
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.SaveChanges
  name: SaveChanges()
  nameWithType: RepositoryBase<T, String>.SaveChanges()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SaveChanges()
  nameWithType.vb: RepositoryBase(Of T, String).SaveChanges()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).SaveChanges()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: RepositoryBase<T, String>.SaveChanges
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: RepositoryBase(Of T, String).SaveChanges
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Dispose
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.Dispose
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<T, String>.Dispose()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Dispose()
  nameWithType.vb: RepositoryBase(Of T, String).Dispose()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Dispose()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Dispose
    name: Dispose
    nameWithType: RepositoryBase<T, String>.Dispose
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of T, String).Dispose
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.SetTraceInfo(System.String,System.String,System.Boolean)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.SetTraceInfo(System.String,System.String,System.Boolean)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
  name: SetTraceInfo(String, String, Boolean)
  nameWithType: RepositoryBase<T, String>.SetTraceInfo(String, String, Boolean)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetTraceInfo(System.String, System.String, System.Boolean)
  nameWithType.vb: RepositoryBase(Of T, String).SetTraceInfo(String, String, Boolean)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetTraceInfo(System.String, System.String, System.Boolean)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase<T, String>.SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase(Of T, String).SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  name: SetTraceInfo(String, IQueryable, Boolean)
  nameWithType: RepositoryBase<T, String>.SetTraceInfo(String, IQueryable, Boolean)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetTraceInfo(System.String, System.Linq.IQueryable, System.Boolean)
  nameWithType.vb: RepositoryBase(Of T, String).SetTraceInfo(String, IQueryable, Boolean)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetTraceInfo(System.String, System.Linq.IQueryable, System.Boolean)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase<T, String>.SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase(Of T, String).SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKey({T})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetPrimaryKey(`0)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
  name: GetPrimaryKey(T)
  nameWithType: RepositoryBase<T, String>.GetPrimaryKey(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKey(T)
  nameWithType.vb: RepositoryBase(Of T, String).GetPrimaryKey(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKey(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryBase<T, String>.GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryBase(Of T, String).GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKey({T},System.String@)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetPrimaryKey(`0,System.String@)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
  name: GetPrimaryKey(T, String)
  nameWithType: RepositoryBase<T, String>.GetPrimaryKey(T, String)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKey(T, System.String)
  nameWithType.vb: RepositoryBase(Of T, String).GetPrimaryKey(T, String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKey(T, System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
    name: GetPrimaryKey
    nameWithType: RepositoryBase<T, String>.GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
    name: GetPrimaryKey
    nameWithType: RepositoryBase(Of T, String).GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.SetPrimaryKey({T},System.String)
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.SetPrimaryKey(`0,System.String)
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
  name: SetPrimaryKey(T, String)
  nameWithType: RepositoryBase<T, String>.SetPrimaryKey(T, String)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetPrimaryKey(T, System.String)
  nameWithType.vb: RepositoryBase(Of T, String).SetPrimaryKey(T, String)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetPrimaryKey(T, System.String)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
    name: SetPrimaryKey
    nameWithType: RepositoryBase<T, String>.SetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.SetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
    name: SetPrimaryKey
    nameWithType: RepositoryBase(Of T, String).SetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).SetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.ByPrimaryKeySpecification(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{{T}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.ByPrimaryKeySpecification(System.String,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  name: ByPrimaryKeySpecification(String, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, String>.ByPrimaryKeySpecification(String, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ByPrimaryKeySpecification(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, String).ByPrimaryKeySpecification(String, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).ByPrimaryKeySpecification(System.String, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: ByPrimaryKeySpecification(String, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: ByPrimaryKeySpecification
    nameWithType: RepositoryBase<T, String>.ByPrimaryKeySpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ByPrimaryKeySpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: ByPrimaryKeySpecification
    nameWithType: RepositoryBase(Of T, String).ByPrimaryKeySpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).ByPrimaryKeySpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.CreateSpecification(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: CreateSpecification(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, String>.CreateSpecification(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.CreateSpecification(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, String).CreateSpecification(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).CreateSpecification(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: CreateSpecification(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: CreateSpecification
    nameWithType: RepositoryBase<T, String>.CreateSpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.CreateSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: CreateSpecification
    nameWithType: RepositoryBase(Of T, String).CreateSpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).CreateSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{System.String})
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
  name: ByMultipleKeysSpecification(IEnumerable<String>)
  nameWithType: RepositoryBase<T, String>.ByMultipleKeysSpecification(IEnumerable<String>)
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable<System.String>)
  nameWithType.vb: RepositoryBase(Of T, String).ByMultipleKeysSpecification(IEnumerable(Of String))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ByMultipleKeysSpecification(IEnumerable(Of String))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
    name: ByMultipleKeysSpecification
    nameWithType: RepositoryBase<T, String>.ByMultipleKeysSpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.ByMultipleKeysSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
    name: ByMultipleKeysSpecification
    nameWithType: RepositoryBase(Of T, String).ByMultipleKeysSpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).ByMultipleKeysSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GetPrimaryKeyPropertyInfo
  commentId: M:SharpRepository.Repository.RepositoryBase{`0,System.String}.GetPrimaryKeyPropertyInfo
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
  name: GetPrimaryKeyPropertyInfo()
  nameWithType: RepositoryBase<T, String>.GetPrimaryKeyPropertyInfo()
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKeyPropertyInfo()
  nameWithType.vb: RepositoryBase(Of T, String).GetPrimaryKeyPropertyInfo()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKeyPropertyInfo()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
    name: GetPrimaryKeyPropertyInfo
    nameWithType: RepositoryBase<T, String>.GetPrimaryKeyPropertyInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GetPrimaryKeyPropertyInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
    name: GetPrimaryKeyPropertyInfo
    nameWithType: RepositoryBase(Of T, String).GetPrimaryKeyPropertyInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, System.String).GetPrimaryKeyPropertyInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Conventions
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.Conventions
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Conventions
  name: Conventions
  nameWithType: RepositoryBase<T, String>.Conventions
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Conventions
  nameWithType.vb: RepositoryBase(Of T, String).Conventions
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Conventions
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.Aspects
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.Aspects
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.Aspects
  name: Aspects
  nameWithType: RepositoryBase<T, String>.Aspects
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.Aspects
  nameWithType.vb: RepositoryBase(Of T, String).Aspects
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).Aspects
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.EntityType
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.EntityType
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.EntityType
  name: EntityType
  nameWithType: RepositoryBase<T, String>.EntityType
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.EntityType
  nameWithType.vb: RepositoryBase(Of T, String).EntityType
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).EntityType
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.KeyType
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.KeyType
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.KeyType
  name: KeyType
  nameWithType: RepositoryBase<T, String>.KeyType
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.KeyType
  nameWithType.vb: RepositoryBase(Of T, String).KeyType
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).KeyType
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TypeName
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.TypeName
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TypeName
  name: TypeName
  nameWithType: RepositoryBase<T, String>.TypeName
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TypeName
  nameWithType.vb: RepositoryBase(Of T, String).TypeName
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TypeName
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.CacheUsed
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.CacheUsed
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.CacheUsed
  name: CacheUsed
  nameWithType: RepositoryBase<T, String>.CacheUsed
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.CacheUsed
  nameWithType.vb: RepositoryBase(Of T, String).CacheUsed
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).CacheUsed
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.CachingStrategy
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.CachingStrategy
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.CachingStrategy
  name: CachingStrategy
  nameWithType: RepositoryBase<T, String>.CachingStrategy
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.CachingStrategy
  nameWithType.vb: RepositoryBase(Of T, String).CachingStrategy
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).CachingStrategy
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.CachingEnabled
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.CachingEnabled
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.CachingEnabled
  name: CachingEnabled
  nameWithType: RepositoryBase<T, String>.CachingEnabled
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.CachingEnabled
  nameWithType.vb: RepositoryBase(Of T, String).CachingEnabled
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).CachingEnabled
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.TraceInfo
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.TraceInfo
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.TraceInfo
  name: TraceInfo
  nameWithType: RepositoryBase<T, String>.TraceInfo
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.TraceInfo
  nameWithType.vb: RepositoryBase(Of T, String).TraceInfo
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).TraceInfo
- uid: SharpRepository.Repository.RepositoryBase{{T},System.String}.GenerateKeyOnAdd
  commentId: P:SharpRepository.Repository.RepositoryBase{`0,System.String}.GenerateKeyOnAdd
  parent: SharpRepository.Repository.RepositoryBase{{T},System.String}
  definition: SharpRepository.Repository.RepositoryBase`2.GenerateKeyOnAdd
  name: GenerateKeyOnAdd
  nameWithType: RepositoryBase<T, String>.GenerateKeyOnAdd
  fullName: SharpRepository.Repository.RepositoryBase<T, System.String>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryBase(Of T, String).GenerateKeyOnAdd
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, System.String).GenerateKeyOnAdd
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.FileSystem
  commentId: N:Catalyst.Abstractions.FileSystem
  name: Catalyst.Abstractions.FileSystem
  nameWithType: Catalyst.Abstractions.FileSystem
  fullName: Catalyst.Abstractions.FileSystem
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SharpRepository.Repository.RepositoryBase`2
  commentId: T:SharpRepository.Repository.RepositoryBase`2
  isExternal: true
  name: RepositoryBase<T, TKey>
  nameWithType: RepositoryBase<T, TKey>
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>
  nameWithType.vb: RepositoryBase(Of T, TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey)
  name.vb: RepositoryBase(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: SharpRepository.Repository.RepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: SharpRepository.Repository.RepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository
  commentId: N:SharpRepository.Repository
  isExternal: true
  name: SharpRepository.Repository
  nameWithType: SharpRepository.Repository
  fullName: SharpRepository.Repository
- uid: SharpRepository.Repository.LinqRepositoryBase`2
  commentId: T:SharpRepository.Repository.LinqRepositoryBase`2
  isExternal: true
  name: LinqRepositoryBase<T, TKey>
  nameWithType: LinqRepositoryBase<T, TKey>
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>
  nameWithType.vb: LinqRepositoryBase(Of T, TKey)
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey)
  name.vb: LinqRepositoryBase(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2
    name: LinqRepositoryBase
    nameWithType: LinqRepositoryBase
    fullName: SharpRepository.Repository.LinqRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2
    name: LinqRepositoryBase
    nameWithType: LinqRepositoryBase
    fullName: SharpRepository.Repository.LinqRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2
  commentId: T:SharpRepository.XmlRepository.XmlRepositoryBase`2
  isExternal: true
  name: XmlRepositoryBase<T, TKey>
  nameWithType: XmlRepositoryBase<T, TKey>
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>
  nameWithType.vb: XmlRepositoryBase(Of T, TKey)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey)
  name.vb: XmlRepositoryBase(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2
    name: XmlRepositoryBase
    nameWithType: XmlRepositoryBase
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2
    name: XmlRepositoryBase
    nameWithType: XmlRepositoryBase
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository
  commentId: N:SharpRepository.XmlRepository
  isExternal: true
  name: SharpRepository.XmlRepository
  nameWithType: SharpRepository.XmlRepository
  fullName: SharpRepository.XmlRepository
- uid: SharpRepository.XmlRepository.XmlRepository`2
  commentId: T:SharpRepository.XmlRepository.XmlRepository`2
  isExternal: true
  name: XmlRepository<T, TKey>
  nameWithType: XmlRepository<T, TKey>
  fullName: SharpRepository.XmlRepository.XmlRepository<T, TKey>
  nameWithType.vb: XmlRepository(Of T, TKey)
  fullName.vb: SharpRepository.XmlRepository.XmlRepository(Of T, TKey)
  name.vb: XmlRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepository`2
    name: XmlRepository
    nameWithType: XmlRepository
    fullName: SharpRepository.XmlRepository.XmlRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepository`2
    name: XmlRepository
    nameWithType: XmlRepository
    fullName: SharpRepository.XmlRepository.XmlRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepository`2
  commentId: T:SharpRepository.Repository.IRepository`2
  isExternal: true
  name: IRepository<T, TKey>
  nameWithType: IRepository<T, TKey>
  fullName: SharpRepository.Repository.IRepository<T, TKey>
  nameWithType.vb: IRepository(Of T, TKey)
  fullName.vb: SharpRepository.Repository.IRepository(Of T, TKey)
  name.vb: IRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepository`2
    name: IRepository
    nameWithType: IRepository
    fullName: SharpRepository.Repository.IRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.ICrudRepository`2
  commentId: T:SharpRepository.Repository.ICrudRepository`2
  isExternal: true
  name: ICrudRepository<T, TKey>
  nameWithType: ICrudRepository<T, TKey>
  fullName: SharpRepository.Repository.ICrudRepository<T, TKey>
  nameWithType.vb: ICrudRepository(Of T, TKey)
  fullName.vb: SharpRepository.Repository.ICrudRepository(Of T, TKey)
  name.vb: ICrudRepository(Of T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.ICrudRepository`2
    name: ICrudRepository
    nameWithType: ICrudRepository
    fullName: SharpRepository.Repository.ICrudRepository
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryBase`1
  commentId: T:SharpRepository.Repository.IRepositoryBase`1
  isExternal: true
  name: IRepositoryBase<T>
  nameWithType: IRepositoryBase<T>
  fullName: SharpRepository.Repository.IRepositoryBase<T>
  nameWithType.vb: IRepositoryBase(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryBase(Of T)
  name.vb: IRepositoryBase(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: SharpRepository.Repository.IRepositoryBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanAdd`1
  commentId: T:SharpRepository.Repository.Traits.ICanAdd`1
  isExternal: true
  name: ICanAdd<T>
  nameWithType: ICanAdd<T>
  fullName: SharpRepository.Repository.Traits.ICanAdd<T>
  nameWithType.vb: ICanAdd(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanAdd(Of T)
  name.vb: ICanAdd(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanAdd`1
    name: ICanAdd
    nameWithType: ICanAdd
    fullName: SharpRepository.Repository.Traits.ICanAdd
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits
  commentId: N:SharpRepository.Repository.Traits
  isExternal: true
  name: SharpRepository.Repository.Traits
  nameWithType: SharpRepository.Repository.Traits
  fullName: SharpRepository.Repository.Traits
- uid: SharpRepository.Repository.Traits.ICanUpdate`1
  commentId: T:SharpRepository.Repository.Traits.ICanUpdate`1
  isExternal: true
  name: ICanUpdate<T>
  nameWithType: ICanUpdate<T>
  fullName: SharpRepository.Repository.Traits.ICanUpdate<T>
  nameWithType.vb: ICanUpdate(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanUpdate(Of T)
  name.vb: ICanUpdate(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanUpdate`1
    name: ICanUpdate
    nameWithType: ICanUpdate
    fullName: SharpRepository.Repository.Traits.ICanUpdate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanBatch`1
  commentId: T:SharpRepository.Repository.Traits.ICanBatch`1
  isExternal: true
  name: ICanBatch<T>
  nameWithType: ICanBatch<T>
  fullName: SharpRepository.Repository.Traits.ICanBatch<T>
  nameWithType.vb: ICanBatch(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanBatch(Of T)
  name.vb: ICanBatch(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanBatch`1
    name: ICanBatch
    nameWithType: ICanBatch
    fullName: SharpRepository.Repository.Traits.ICanBatch
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryQueryable`1
  commentId: T:SharpRepository.Repository.IRepositoryQueryable`1
  isExternal: true
  name: IRepositoryQueryable<T>
  nameWithType: IRepositoryQueryable<T>
  fullName: SharpRepository.Repository.IRepositoryQueryable<T>
  nameWithType.vb: IRepositoryQueryable(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryQueryable(Of T)
  name.vb: IRepositoryQueryable(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.Traits.ICanFind`1
  commentId: T:SharpRepository.Repository.Traits.ICanFind`1
  isExternal: true
  name: ICanFind<T>
  nameWithType: ICanFind<T>
  fullName: SharpRepository.Repository.Traits.ICanFind<T>
  nameWithType.vb: ICanFind(Of T)
  fullName.vb: SharpRepository.Repository.Traits.ICanFind(Of T)
  name.vb: ICanFind(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.Traits.ICanFind`1
    name: ICanFind
    nameWithType: ICanFind
    fullName: SharpRepository.Repository.Traits.ICanFind
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.IRepositoryAggregates`1
  commentId: T:SharpRepository.Repository.IRepositoryAggregates`1
  isExternal: true
  name: IRepositoryAggregates<T>
  nameWithType: IRepositoryAggregates<T>
  fullName: SharpRepository.Repository.IRepositoryAggregates<T>
  nameWithType.vb: IRepositoryAggregates(Of T)
  fullName.vb: SharpRepository.Repository.IRepositoryAggregates(Of T)
  name.vb: IRepositoryAggregates(Of T)
  spec.csharp:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SharpRepository.Repository.IRepositoryAggregates`1
    name: IRepositoryAggregates
    nameWithType: IRepositoryAggregates
    fullName: SharpRepository.Repository.IRepositoryAggregates
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: BaseQuery(IFetchStrategy<T>)
  nameWithType: XmlRepositoryBase<T, TKey>.BaseQuery(IFetchStrategy<T>)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).BaseQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: BaseQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: XmlRepositoryBase<T, TKey>.BaseQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: XmlRepositoryBase(Of T, TKey).BaseQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetQuery(TKey, IFetchStrategy<T>)
  nameWithType: XmlRepositoryBase<T, TKey>.GetQuery(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).GetQuery(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: XmlRepositoryBase<T, TKey>.GetQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: XmlRepositoryBase(Of T, TKey).GetQuery
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
  isExternal: true
  name: AddItem(T)
  nameWithType: XmlRepositoryBase<T, TKey>.AddItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.AddItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).AddItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).AddItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: XmlRepositoryBase<T, TKey>.AddItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: XmlRepositoryBase(Of T, TKey).AddItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
  isExternal: true
  name: DeleteItem(T)
  nameWithType: XmlRepositoryBase<T, TKey>.DeleteItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.DeleteItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).DeleteItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).DeleteItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: XmlRepositoryBase<T, TKey>.DeleteItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: XmlRepositoryBase(Of T, TKey).DeleteItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
  isExternal: true
  name: UpdateItem(T)
  nameWithType: XmlRepositoryBase<T, TKey>.UpdateItem(T)
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.UpdateItem(T)
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).UpdateItem(T)
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).UpdateItem(T)
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: XmlRepositoryBase<T, TKey>.UpdateItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: XmlRepositoryBase(Of T, TKey).UpdateItem
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
  isExternal: true
  name: SaveChanges()
  nameWithType: XmlRepositoryBase<T, TKey>.SaveChanges()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.SaveChanges()
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).SaveChanges()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).SaveChanges()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: XmlRepositoryBase<T, TKey>.SaveChanges
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: XmlRepositoryBase(Of T, TKey).SaveChanges
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
  isExternal: true
  name: Dispose()
  nameWithType: XmlRepositoryBase<T, TKey>.Dispose()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.Dispose()
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).Dispose()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).Dispose()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
    name: Dispose
    nameWithType: XmlRepositoryBase<T, TKey>.Dispose
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Dispose
    name: Dispose
    nameWithType: XmlRepositoryBase(Of T, TKey).Dispose
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
  commentId: M:SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
  isExternal: true
  name: ToString()
  nameWithType: XmlRepositoryBase<T, TKey>.ToString()
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.ToString()
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).ToString()
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).ToString()
  spec.csharp:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
    name: ToString
    nameWithType: XmlRepositoryBase<T, TKey>.ToString
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.ToString
    name: ToString
    nameWithType: XmlRepositoryBase(Of T, TKey).ToString
    fullName: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.XmlRepository.XmlRepositoryBase`2.Items
  commentId: P:SharpRepository.XmlRepository.XmlRepositoryBase`2.Items
  isExternal: true
  name: Items
  nameWithType: XmlRepositoryBase<T, TKey>.Items
  fullName: SharpRepository.XmlRepository.XmlRepositoryBase<T, TKey>.Items
  nameWithType.vb: XmlRepositoryBase(Of T, TKey).Items
  fullName.vb: SharpRepository.XmlRepository.XmlRepositoryBase(Of T, TKey).Items
- uid: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
  isExternal: true
  name: AsQueryable()
  nameWithType: LinqRepositoryBase<T, TKey>.AsQueryable()
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.AsQueryable()
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).AsQueryable()
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: LinqRepositoryBase<T, TKey>.AsQueryable
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: LinqRepositoryBase(Of T, TKey).AsQueryable
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetQuery(TKey, IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.GetQuery(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).GetQuery(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: LinqRepositoryBase<T, TKey>.GetQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).GetQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetQuery<TResult>(TKey, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  nameWithType: LinqRepositoryBase<T, TKey>.GetQuery<TResult>(TKey, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetQuery<TResult>(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).GetQuery(Of TResult)(TKey, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetQuery(Of TResult)(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetQuery(Of TResult)(TKey, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery<TResult>
    nameWithType: LinqRepositoryBase<T, TKey>.GetQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, TKey).GetQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: FindQuery(ISpecification<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase<T, TKey>.FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: FindQuery<TResult>
    nameWithType: LinqRepositoryBase<T, TKey>.FindQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: FindQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase<T, TKey>.FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).FindQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery<TResult>
    nameWithType: LinqRepositoryBase<T, TKey>.FindQuery<TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery(Of TResult)
    nameWithType: LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAllQuery(IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.GetAllQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).GetAllQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase<T, TKey>.GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase<T, TKey>.GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).GetAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: FindAllQuery(ISpecification<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindAllQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindAllQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindAllQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase<T, TKey>.FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: LinqRepositoryBase<T, TKey>.FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase<T, TKey>.FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: LinqRepositoryBase(Of T, TKey).FindAllQuery
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  isExternal: true
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: LinqRepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: LinqRepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: LinqRepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.LinqRepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.LinqRepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: LinqRepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.LinqRepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.QueryManager
  commentId: F:SharpRepository.Repository.RepositoryBase`2.QueryManager
  isExternal: true
  name: QueryManager
  nameWithType: RepositoryBase<T, TKey>.QueryManager
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.QueryManager
  nameWithType.vb: RepositoryBase(Of T, TKey).QueryManager
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).QueryManager
- uid: SharpRepository.Repository.RepositoryBase`2.BeginBatch
  commentId: M:SharpRepository.Repository.RepositoryBase`2.BeginBatch
  isExternal: true
  name: BeginBatch()
  nameWithType: RepositoryBase<T, TKey>.BeginBatch()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.BeginBatch()
  nameWithType.vb: RepositoryBase(Of T, TKey).BeginBatch()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).BeginBatch()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryBase<T, TKey>.BeginBatch
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.BeginBatch
    name: BeginBatch
    nameWithType: RepositoryBase(Of T, TKey).BeginBatch
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).BeginBatch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.DisableCaching
  commentId: M:SharpRepository.Repository.RepositoryBase`2.DisableCaching
  isExternal: true
  name: DisableCaching()
  nameWithType: RepositoryBase<T, TKey>.DisableCaching()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DisableCaching()
  nameWithType.vb: RepositoryBase(Of T, TKey).DisableCaching()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).DisableCaching()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryBase<T, TKey>.DisableCaching
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableCaching
    name: DisableCaching
    nameWithType: RepositoryBase(Of T, TKey).DisableCaching
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).DisableCaching
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.ClearCache
  commentId: M:SharpRepository.Repository.RepositoryBase`2.ClearCache
  isExternal: true
  name: ClearCache()
  nameWithType: RepositoryBase<T, TKey>.ClearCache()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ClearCache()
  nameWithType.vb: RepositoryBase(Of T, TKey).ClearCache()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).ClearCache()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ClearCache
    name: ClearCache
    nameWithType: RepositoryBase<T, TKey>.ClearCache
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ClearCache
    name: ClearCache
    nameWithType: RepositoryBase(Of T, TKey).ClearCache
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).ClearCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: BaseQuery(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.BaseQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).BaseQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: BaseQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: RepositoryBase<T, TKey>.BaseQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.BaseQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: BaseQuery
    nameWithType: RepositoryBase(Of T, TKey).BaseQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).BaseQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.AsQueryable
  commentId: M:SharpRepository.Repository.RepositoryBase`2.AsQueryable
  isExternal: true
  name: AsQueryable()
  nameWithType: RepositoryBase<T, TKey>.AsQueryable()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.AsQueryable()
  nameWithType.vb: RepositoryBase(Of T, TKey).AsQueryable()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).AsQueryable()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryBase<T, TKey>.AsQueryable
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.AsQueryable
    name: AsQueryable
    nameWithType: RepositoryBase(Of T, TKey).AsQueryable
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).AsQueryable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAllQuery(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAllQuery(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAllQuery(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase<T, TKey>.GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase(Of T, TKey).GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAllQuery(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAllQuery(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase<T, TKey>.GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAllQuery(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAllQuery
    nameWithType: RepositoryBase(Of T, TKey).GetAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
  isExternal: true
  name: DisableAspect(Type)
  nameWithType: RepositoryBase<T, TKey>.DisableAspect(Type)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DisableAspect(System.Type)
  nameWithType.vb: RepositoryBase(Of T, TKey).DisableAspect(Type)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).DisableAspect(System.Type)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
    name: DisableAspect
    nameWithType: RepositoryBase<T, TKey>.DisableAspect
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DisableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DisableAspect(System.Type)
    name: DisableAspect
    nameWithType: RepositoryBase(Of T, TKey).DisableAspect
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).DisableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
  isExternal: true
  name: EnableAspect(Type)
  nameWithType: RepositoryBase<T, TKey>.EnableAspect(Type)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.EnableAspect(System.Type)
  nameWithType.vb: RepositoryBase(Of T, TKey).EnableAspect(Type)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).EnableAspect(System.Type)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
    name: EnableAspect
    nameWithType: RepositoryBase<T, TKey>.EnableAspect
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.EnableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.EnableAspect(System.Type)
    name: EnableAspect
    nameWithType: RepositoryBase(Of T, TKey).EnableAspect
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).EnableAspect
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll
  isExternal: true
  name: GetAll()
  nameWithType: RepositoryBase<T, TKey>.GetAll()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll()
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll(IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
  isExternal: true
  name: GetAll(String[])
  nameWithType: RepositoryBase<T, TKey>.GetAll(String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(System.String())
  name.vb: GetAll(String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.String[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.GetAll(Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll(IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll(IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, String[])
  nameWithType: RepositoryBase<T, TKey>.GetAll(IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.GetAll(IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll(SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase<T, TKey>.GetAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll(SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll
    nameWithType: RepositoryBase(Of T, TKey).GetAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.String())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.String[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>(Expression<Func<T, TResult>>, IQueryOptions<T>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: GetAll(Of TResult)(Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: GetAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetQuery(TKey, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetQuery(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetQuery(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetQuery(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetQuery(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: RepositoryBase<T, TKey>.GetQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetQuery
    nameWithType: RepositoryBase(Of T, TKey).GetQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetQuery<TResult>(TKey, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GetQuery<TResult>(TKey, IFetchStrategy<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetQuery<TResult>(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetQuery(Of TResult)(TKey, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetQuery(Of TResult)(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetQuery(Of TResult)(TKey, IFetchStrategy(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetQuery<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetQuery``1(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetQuery(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetQuery(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
  isExternal: true
  name: Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>(IRepositoryQueryable<TInner>, Expression<Func<T, TJoinKey>>, Expression<Func<TInner, TJoinKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>(SharpRepository.Repository.IRepositoryQueryable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TJoinKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)(SharpRepository.Repository.IRepositoryQueryable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TJoinKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of TJoinKey, TInner, TResult)(IRepositoryQueryable(Of TInner), Expression(Of Func(Of T, TJoinKey)), Expression(Of Func(Of TInner, TJoinKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join<TJoinKey, TInner, TResult>
    nameWithType: RepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Join<TJoinKey, TInner, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Join``3(SharpRepository.Repository.IRepositoryQueryable{``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: Join(Of TJoinKey, TInner, TResult)
    nameWithType: RepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Join(Of TJoinKey, TInner, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.IRepositoryQueryable`1
    name: IRepositoryQueryable
    nameWithType: IRepositoryQueryable
    fullName: SharpRepository.Repository.IRepositoryQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TJoinKey
    nameWithType: TJoinKey
    fullName: TJoinKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get(TKey, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.Get(TKey, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get(TKey, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(TKey, Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(TKey, Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryBase<T, TKey>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get
    nameWithType: RepositoryBase(Of T, TKey).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
  isExternal: true
  name: Get(TKey, String[])
  nameWithType: RepositoryBase<T, TKey>.Get(TKey, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get(TKey, System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(TKey, String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(TKey, System.String())
  name.vb: Get(TKey, String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
    name: Get
    nameWithType: RepositoryBase<T, TKey>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,System.String[])
    name: Get
    nameWithType: RepositoryBase(Of T, TKey).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get(`1)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get(`1)
  isExternal: true
  name: Get(TKey)
  nameWithType: RepositoryBase<T, TKey>.Get(TKey)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get(TKey)
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1)
    name: Get
    nameWithType: RepositoryBase<T, TKey>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1)
    name: Get
    nameWithType: RepositoryBase(Of T, TKey).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get(TKey, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.Get(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryBase<T, TKey>.Get
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get
    nameWithType: RepositoryBase(Of T, TKey).Get
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  nameWithType: RepositoryBase<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, Expression<Func<T, Object>>[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>[])
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))())
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), Expression(Of Func(Of T, Object))())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get<TResult>
    nameWithType: RepositoryBase<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, String[])
  nameWithType: RepositoryBase<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, String[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.String[])
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), String())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.String())
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), String())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get<TResult>
    nameWithType: RepositoryBase<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String[])
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get<TResult>
    nameWithType: RepositoryBase<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: Get<TResult>(TKey, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.Get<TResult>(TKey, Expression<Func<T, TResult>>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: Get(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get<TResult>
    nameWithType: RepositoryBase<T, TKey>.Get<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Get<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Get``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: Get(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Get(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Get(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
  isExternal: true
  name: GetMany(TKey[])
  nameWithType: RepositoryBase<T, TKey>.GetMany(TKey[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany(TKey[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetMany(TKey())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(TKey())
  name.vb: GetMany(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
    name: GetMany
    nameWithType: RepositoryBase<T, TKey>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(`1[])
    name: GetMany
    nameWithType: RepositoryBase(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: GetMany(IEnumerable<TKey>)
  nameWithType: RepositoryBase<T, TKey>.GetMany(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetMany(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: GetMany(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: RepositoryBase<T, TKey>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1})
    name: GetMany
    nameWithType: RepositoryBase(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetMany(IEnumerable<TKey>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetMany(IEnumerable<TKey>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany(System.Collections.Generic.IEnumerable<TKey>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetMany(IEnumerable(Of TKey), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(System.Collections.Generic.IEnumerable(Of TKey), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetMany(IEnumerable(Of TKey), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryBase<T, TKey>.GetMany
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetMany
    nameWithType: RepositoryBase(Of T, TKey).GetMany
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
  isExternal: true
  name: GetMany<TResult>(Expression<Func<T, TResult>>, TKey[])
  nameWithType: RepositoryBase<T, TKey>.GetMany<TResult>(Expression<Func<T, TResult>>, TKey[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, TKey[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), TKey())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TKey())
  name.vb: GetMany(Of TResult)(Expression(Of Func(Of T, TResult)), TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetMany<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},`1[])
    name: GetMany(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetMany(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GetMany<TResult>(IEnumerable<TKey>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GetMany<TResult>(IEnumerable<TKey>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany<TResult>(System.Collections.Generic.IEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetMany(Of TResult)(IEnumerable(Of TKey), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(Of TResult)(System.Collections.Generic.IEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: GetMany(Of TResult)(IEnumerable(Of TKey), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany<TResult>
    nameWithType: RepositoryBase<T, TKey>.GetMany<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetMany<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetMany``1(System.Collections.Generic.IEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GetMany(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).GetMany(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetMany(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
  isExternal: true
  name: GetManyAsDictionary(TKey[])
  nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary(TKey[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary(TKey[])
  nameWithType.vb: RepositoryBase(Of T, TKey).GetManyAsDictionary(TKey())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary(TKey())
  name.vb: GetManyAsDictionary(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(`1[])
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<TKey>)
  nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetManyAsDictionary(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: GetManyAsDictionary(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: GetManyAsDictionary(IEnumerable<TKey>, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary(IEnumerable<TKey>, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary(System.Collections.Generic.IEnumerable<TKey>, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetManyAsDictionary(IEnumerable(Of TKey), IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary(System.Collections.Generic.IEnumerable(Of TKey), SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: GetManyAsDictionary(IEnumerable(Of TKey), IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase<T, TKey>.GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetManyAsDictionary(System.Collections.Generic.IEnumerable{`1},SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: GetManyAsDictionary
    nameWithType: RepositoryBase(Of T, TKey).GetManyAsDictionary
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetManyAsDictionary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Exists(`1)
  isExternal: true
  name: Exists(TKey)
  nameWithType: RepositoryBase<T, TKey>.Exists(TKey)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists(TKey)
  nameWithType.vb: RepositoryBase(Of T, TKey).Exists(TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
    name: Exists
    nameWithType: RepositoryBase<T, TKey>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(`1)
    name: Exists
    nameWithType: RepositoryBase(Of T, TKey).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
  isExternal: true
  name: TryGet(TKey, T)
  nameWithType: RepositoryBase<T, TKey>.TryGet(TKey, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryGet(TKey, T)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryGet(TKey, T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryGet(TKey, T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: RepositoryBase<T, TKey>.TryGet
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet(`1,`0@)
    name: TryGet
    nameWithType: RepositoryBase(Of T, TKey).TryGet
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryGet
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryGet<TResult>(TKey, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, TKey>.TryGet<TResult>(TKey, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryGet<TResult>(TKey, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryGet(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryGet(Of TResult)(TKey, System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryGet(Of TResult)(TKey, Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet<TResult>
    nameWithType: RepositoryBase<T, TKey>.TryGet<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryGet<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryGet``1(`1,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryGet(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).TryGet(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryGet(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: FindAllQuery(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAllQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAllQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindAllQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase<T, TKey>.FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase(Of T, TKey).FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAllQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAllQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAllQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase<T, TKey>.FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAllQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAllQuery
    nameWithType: RepositoryBase(Of T, TKey).FindAllQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAllQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAll(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAll(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase<T, TKey>.FindAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase(Of T, TKey).FindAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAll<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.FindAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).FindAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAll(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase<T, TKey>.FindAll
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll
    nameWithType: RepositoryBase(Of T, TKey).FindAll
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindAll<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindAll(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll<TResult>
    nameWithType: RepositoryBase<T, TKey>.FindAll<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindAll<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindAll``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindAll(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).FindAll(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindAll(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: FindQuery(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.FindQuery(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindQuery(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: FindQuery(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: RepositoryBase<T, TKey>.FindQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: FindQuery
    nameWithType: RepositoryBase(Of T, TKey).FindQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindQuery(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindQuery(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: RepositoryBase<T, TKey>.FindQuery
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery
    nameWithType: RepositoryBase(Of T, TKey).FindQuery
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.FindQuery<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: FindQuery(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery<TResult>
    nameWithType: RepositoryBase<T, TKey>.FindQuery<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.FindQuery<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.FindQuery``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: FindQuery(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).FindQuery(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).FindQuery(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(ISpecification<T>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.Find(ISpecification<T>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Find(ISpecification(Of T), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(ISpecification(Of T), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase<T, TKey>.Find
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase(Of T, TKey).Find
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.Find<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryBase<T, TKey>.Find<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Find(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Exists(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.Exists(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Exists(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Exists(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryBase<T, TKey>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Exists
    nameWithType: RepositoryBase(Of T, TKey).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, T)
  nameWithType: RepositoryBase<T, TKey>.TryFind(ISpecification<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, T)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(ISpecification(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), T)
  name.vb: TryFind(ISpecification(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, TKey>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, TKey).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(ISpecification<T>, IQueryOptions<T>, T)
  nameWithType: RepositoryBase<T, TKey>.TryFind(ISpecification<T>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind(SharpRepository.Repository.Specifications.ISpecification<T>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(SharpRepository.Repository.Specifications.ISpecification(Of T), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(ISpecification(Of T), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, TKey>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(SharpRepository.Repository.Specifications.ISpecification{`0},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, TKey).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>(ISpecification<T>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.Find(Expression<Func<T, Boolean>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase<T, TKey>.Find
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find
    nameWithType: RepositoryBase(Of T, TKey).Find
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
  isExternal: true
  name: Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  nameWithType: RepositoryBase<T, TKey>.Find<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T))
  name.vb: Find(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find<TResult>
    nameWithType: RepositoryBase<T, TKey>.Find<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Find<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0})
    name: Find(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Find(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Find(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Exists(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, TKey>.Exists(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Exists(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Exists(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryBase<T, TKey>.Exists
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Exists
    nameWithType: RepositoryBase(Of T, TKey).Exists
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, T)
  nameWithType: RepositoryBase<T, TKey>.TryFind(Expression<Func<T, Boolean>>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, T)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Expression(Of Func(Of T, Boolean)), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, TKey>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, TKey).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
  isExternal: true
  name: TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  nameWithType: RepositoryBase<T, TKey>.TryFind(Expression<Func<T, Boolean>>, IQueryOptions<T>, T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, SharpRepository.Repository.Queries.IQueryOptions<T>, T)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), SharpRepository.Repository.Queries.IQueryOptions(Of T), T)
  name.vb: TryFind(Expression(Of Func(Of T, Boolean)), IQueryOptions(Of T), T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase<T, TKey>.TryFind
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SharpRepository.Repository.Queries.IQueryOptions{`0},`0@)
    name: TryFind
    nameWithType: RepositoryBase(Of T, TKey).TryFind
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, TResult)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
  isExternal: true
  name: TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>, IQueryOptions<T>, TResult)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, SharpRepository.Repository.Queries.IQueryOptions<T>, TResult)
  nameWithType.vb: RepositoryBase(Of T, TKey).TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), SharpRepository.Repository.Queries.IQueryOptions(Of T), TResult)
  name.vb: TryFind(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)), IQueryOptions(Of T), TResult)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind<TResult>
    nameWithType: RepositoryBase<T, TKey>.TryFind<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TryFind<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.TryFind``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},SharpRepository.Repository.Queries.IQueryOptions{`0},``0@)
    name: TryFind(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).TryFind(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).TryFind(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.Queries.IQueryOptions`1
    name: IQueryOptions
    nameWithType: IQueryOptions
    fullName: SharpRepository.Repository.Queries.IQueryOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(ISpecification<T>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
  isExternal: true
  name: GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>, Expression<Func<IGrouping<TGroupKey, T>, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>, System.Linq.Expressions.Expression<System.Func<System.Linq.IGrouping<TGroupKey, T>, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)), System.Linq.Expressions.Expression(Of System.Func(Of System.Linq.IGrouping(Of TGroupKey, T), TResult)))
  name.vb: GroupBy(Of TGroupKey, TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)), Expression(Of Func(Of IGrouping(Of TGroupKey, T), TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy<TGroupKey, TResult>
    nameWithType: RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupBy<TGroupKey, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupBy``2(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}})
    name: GroupBy(Of TGroupKey, TResult)
    nameWithType: RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupBy(Of TGroupKey, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.LongCount
  commentId: M:SharpRepository.Repository.RepositoryBase`2.LongCount
  isExternal: true
  name: LongCount()
  nameWithType: RepositoryBase<T, TKey>.LongCount()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount()
  nameWithType.vb: RepositoryBase(Of T, TKey).LongCount()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount
    name: LongCount
    nameWithType: RepositoryBase<T, TKey>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount
    name: LongCount
    nameWithType: RepositoryBase(Of T, TKey).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: LongCount(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.LongCount(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).LongCount(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: LongCount(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryBase<T, TKey>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: LongCount
    nameWithType: RepositoryBase(Of T, TKey).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: LongCount(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, TKey>.LongCount(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).LongCount(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: LongCount(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryBase<T, TKey>.LongCount
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: LongCount
    nameWithType: RepositoryBase(Of T, TKey).LongCount
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).LongCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Count
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Count
  isExternal: true
  name: Count()
  nameWithType: RepositoryBase<T, TKey>.Count()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count()
  nameWithType.vb: RepositoryBase(Of T, TKey).Count()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count
    name: Count
    nameWithType: RepositoryBase<T, TKey>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count
    name: Count
    nameWithType: RepositoryBase(Of T, TKey).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Count(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.Count(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Count(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Count(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryBase<T, TKey>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Count
    nameWithType: RepositoryBase(Of T, TKey).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Count(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, TKey>.Count(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Count(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryBase<T, TKey>.Count
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
    nameWithType: RepositoryBase(Of T, TKey).Count
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Count
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Sum(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase<T, TKey>.Sum
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
    nameWithType: RepositoryBase(Of T, TKey).Sum
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Sum
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int32>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int32>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Int64>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Int64>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Decimal>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Decimal>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Double>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Double>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Single>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(ISpecification<T>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(ISpecification(Of T), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  nameWithType: RepositoryBase<T, TKey>.Average(Expression<Func<T, Boolean>>, Expression<Func<T, Nullable<Single>>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase<T, TKey>.Average
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
    nameWithType: RepositoryBase(Of T, TKey).Average
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Average
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Min<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, TKey>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Min<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, TKey>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Min<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min<TResult>
    nameWithType: RepositoryBase<T, TKey>.Min<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Min<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Min(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Min(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Min(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Max<TResult>(Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, TKey>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Max<TResult>(ISpecification<T>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(ISpecification(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, TKey>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  nameWithType: RepositoryBase<T, TKey>.Max<TResult>(Expression<Func<T, Boolean>>, Expression<Func<T, TResult>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of TResult)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max<TResult>
    nameWithType: RepositoryBase<T, TKey>.Max<TResult>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Max<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: Max(Of TResult)
    nameWithType: RepositoryBase(Of T, TKey).Max(Of TResult)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Max(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(ISpecification<T>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(SharpRepository.Repository.Specifications.ISpecification<T>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(SharpRepository.Repository.Specifications.ISpecification(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(ISpecification(Of T), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(SharpRepository.Repository.Specifications.ISpecification{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  isExternal: true
  name: GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(Expression<Func<T, Boolean>>, Expression<Func<T, TGroupKey>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, TGroupKey>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, TGroupKey)))
  name.vb: GroupLongCount(Of TGroupKey)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, TGroupKey)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount<TGroupKey>
    nameWithType: RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GroupLongCount<TGroupKey>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GroupLongCount``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
    name: GroupLongCount(Of TGroupKey)
    nameWithType: RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GroupLongCount(Of TGroupKey)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TGroupKey
    nameWithType: TGroupKey
    fullName: TGroupKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
  isExternal: true
  name: AddItem(T)
  nameWithType: RepositoryBase<T, TKey>.AddItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.AddItem(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).AddItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).AddItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: RepositoryBase<T, TKey>.AddItem
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.AddItem(`0)
    name: AddItem
    nameWithType: RepositoryBase(Of T, TKey).AddItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).AddItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Add(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: RepositoryBase<T, TKey>.Add(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Add(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).Add(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Add(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(`0)
    name: Add
    nameWithType: RepositoryBase<T, TKey>.Add
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(`0)
    name: Add
    nameWithType: RepositoryBase(Of T, TKey).Add
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Add(IEnumerable<T>)
  nameWithType: RepositoryBase<T, TKey>.Add(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Add(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Add(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Add(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Add(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryBase<T, TKey>.Add
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Add(System.Collections.Generic.IEnumerable{`0})
    name: Add
    nameWithType: RepositoryBase(Of T, TKey).Add
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
  isExternal: true
  name: DeleteItem(T)
  nameWithType: RepositoryBase<T, TKey>.DeleteItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DeleteItem(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).DeleteItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).DeleteItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: RepositoryBase<T, TKey>.DeleteItem
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.DeleteItem(`0)
    name: DeleteItem
    nameWithType: RepositoryBase(Of T, TKey).DeleteItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).DeleteItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(`0)
  isExternal: true
  name: Delete(T)
  nameWithType: RepositoryBase<T, TKey>.Delete(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`0)
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Delete(IEnumerable<T>)
  nameWithType: RepositoryBase<T, TKey>.Delete(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`0})
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: Delete(IEnumerable<TKey>)
  nameWithType: RepositoryBase<T, TKey>.Delete(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Delete(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Collections.Generic.IEnumerable{`1})
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
  isExternal: true
  name: Delete(TKey[])
  nameWithType: RepositoryBase<T, TKey>.Delete(TKey[])
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(TKey[])
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(TKey())
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(TKey())
  name.vb: Delete(TKey())
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1[])
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(`1)
  isExternal: true
  name: Delete(TKey)
  nameWithType: RepositoryBase<T, TKey>.Delete(TKey)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(TKey)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(`1)
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Delete(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, TKey>.Delete(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Delete(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
  isExternal: true
  name: Delete(ISpecification<T>)
  nameWithType: RepositoryBase<T, TKey>.Delete(ISpecification<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete(SharpRepository.Repository.Specifications.ISpecification<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Delete(ISpecification(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete(SharpRepository.Repository.Specifications.ISpecification(Of T))
  name.vb: Delete(ISpecification(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryBase<T, TKey>.Delete
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Delete(SharpRepository.Repository.Specifications.ISpecification{`0})
    name: Delete
    nameWithType: RepositoryBase(Of T, TKey).Delete
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Delete
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SharpRepository.Repository.Specifications.ISpecification`1
    name: ISpecification
    nameWithType: ISpecification
    fullName: SharpRepository.Repository.Specifications.ISpecification
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
  isExternal: true
  name: UpdateItem(T)
  nameWithType: RepositoryBase<T, TKey>.UpdateItem(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.UpdateItem(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).UpdateItem(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).UpdateItem(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: RepositoryBase<T, TKey>.UpdateItem
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.UpdateItem(`0)
    name: UpdateItem
    nameWithType: RepositoryBase(Of T, TKey).UpdateItem
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).UpdateItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Update(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Update(`0)
  isExternal: true
  name: Update(T)
  nameWithType: RepositoryBase<T, TKey>.Update(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Update(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).Update(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Update(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(`0)
    name: Update
    nameWithType: RepositoryBase<T, TKey>.Update
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(`0)
    name: Update
    nameWithType: RepositoryBase(Of T, TKey).Update
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Update(IEnumerable<T>)
  nameWithType: RepositoryBase<T, TKey>.Update(IEnumerable<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).Update(IEnumerable(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryBase<T, TKey>.Update
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    nameWithType: RepositoryBase(Of T, TKey).Update
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.SaveChanges
  commentId: M:SharpRepository.Repository.RepositoryBase`2.SaveChanges
  isExternal: true
  name: SaveChanges()
  nameWithType: RepositoryBase<T, TKey>.SaveChanges()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SaveChanges()
  nameWithType.vb: RepositoryBase(Of T, TKey).SaveChanges()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).SaveChanges()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: RepositoryBase<T, TKey>.SaveChanges
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SaveChanges
    name: SaveChanges
    nameWithType: RepositoryBase(Of T, TKey).SaveChanges
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).SaveChanges
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Dispose
  commentId: M:SharpRepository.Repository.RepositoryBase`2.Dispose
  isExternal: true
  name: Dispose()
  nameWithType: RepositoryBase<T, TKey>.Dispose()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Dispose()
  nameWithType.vb: RepositoryBase(Of T, TKey).Dispose()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Dispose()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.Dispose
    name: Dispose
    nameWithType: RepositoryBase<T, TKey>.Dispose
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of T, TKey).Dispose
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
  isExternal: true
  name: SetTraceInfo(String, String, Boolean)
  nameWithType: RepositoryBase<T, TKey>.SetTraceInfo(String, String, Boolean)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetTraceInfo(System.String, System.String, System.Boolean)
  nameWithType.vb: RepositoryBase(Of T, TKey).SetTraceInfo(String, String, Boolean)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetTraceInfo(System.String, System.String, System.Boolean)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase<T, TKey>.SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.String,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase(Of T, TKey).SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
  isExternal: true
  name: SetTraceInfo(String, IQueryable, Boolean)
  nameWithType: RepositoryBase<T, TKey>.SetTraceInfo(String, IQueryable, Boolean)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetTraceInfo(System.String, System.Linq.IQueryable, System.Boolean)
  nameWithType.vb: RepositoryBase(Of T, TKey).SetTraceInfo(String, IQueryable, Boolean)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetTraceInfo(System.String, System.Linq.IQueryable, System.Boolean)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase<T, TKey>.SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetTraceInfo(System.String,System.Linq.IQueryable,System.Boolean)
    name: SetTraceInfo
    nameWithType: RepositoryBase(Of T, TKey).SetTraceInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetTraceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
  isExternal: true
  name: GetPrimaryKey(T)
  nameWithType: RepositoryBase<T, TKey>.GetPrimaryKey(T)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKey(T)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetPrimaryKey(T)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKey(T)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryBase<T, TKey>.GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0)
    name: GetPrimaryKey
    nameWithType: RepositoryBase(Of T, TKey).GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
  isExternal: true
  name: GetPrimaryKey(T, TKey)
  nameWithType: RepositoryBase<T, TKey>.GetPrimaryKey(T, TKey)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKey(T, TKey)
  nameWithType.vb: RepositoryBase(Of T, TKey).GetPrimaryKey(T, TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKey(T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
    name: GetPrimaryKey
    nameWithType: RepositoryBase<T, TKey>.GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKey(`0,`1@)
    name: GetPrimaryKey
    nameWithType: RepositoryBase(Of T, TKey).GetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
  commentId: M:SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
  isExternal: true
  name: SetPrimaryKey(T, TKey)
  nameWithType: RepositoryBase<T, TKey>.SetPrimaryKey(T, TKey)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetPrimaryKey(T, TKey)
  nameWithType.vb: RepositoryBase(Of T, TKey).SetPrimaryKey(T, TKey)
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetPrimaryKey(T, TKey)
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
    name: SetPrimaryKey
    nameWithType: RepositoryBase<T, TKey>.SetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.SetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.SetPrimaryKey(`0,`1)
    name: SetPrimaryKey
    nameWithType: RepositoryBase(Of T, TKey).SetPrimaryKey
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).SetPrimaryKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
  isExternal: true
  name: ByPrimaryKeySpecification(TKey, IFetchStrategy<T>)
  nameWithType: RepositoryBase<T, TKey>.ByPrimaryKeySpecification(TKey, IFetchStrategy<T>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ByPrimaryKeySpecification(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy<T>)
  nameWithType.vb: RepositoryBase(Of T, TKey).ByPrimaryKeySpecification(TKey, IFetchStrategy(Of T))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).ByPrimaryKeySpecification(TKey, SharpRepository.Repository.FetchStrategies.IFetchStrategy(Of T))
  name.vb: ByPrimaryKeySpecification(TKey, IFetchStrategy(Of T))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: ByPrimaryKeySpecification
    nameWithType: RepositoryBase<T, TKey>.ByPrimaryKeySpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ByPrimaryKeySpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByPrimaryKeySpecification(`1,SharpRepository.Repository.FetchStrategies.IFetchStrategy{`0})
    name: ByPrimaryKeySpecification
    nameWithType: RepositoryBase(Of T, TKey).ByPrimaryKeySpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).ByPrimaryKeySpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SharpRepository.Repository.FetchStrategies.IFetchStrategy`1
    name: IFetchStrategy
    nameWithType: IFetchStrategy
    fullName: SharpRepository.Repository.FetchStrategies.IFetchStrategy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: CreateSpecification(Expression<Func<T, Boolean>>)
  nameWithType: RepositoryBase<T, TKey>.CreateSpecification(Expression<Func<T, Boolean>>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.CreateSpecification(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: RepositoryBase(Of T, TKey).CreateSpecification(Expression(Of Func(Of T, Boolean)))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).CreateSpecification(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: CreateSpecification(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: CreateSpecification
    nameWithType: RepositoryBase<T, TKey>.CreateSpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.CreateSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.CreateSpecification(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: CreateSpecification
    nameWithType: RepositoryBase(Of T, TKey).CreateSpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).CreateSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
  commentId: M:SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: ByMultipleKeysSpecification(IEnumerable<TKey>)
  nameWithType: RepositoryBase<T, TKey>.ByMultipleKeysSpecification(IEnumerable<TKey>)
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: RepositoryBase(Of T, TKey).ByMultipleKeysSpecification(IEnumerable(Of TKey))
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: ByMultipleKeysSpecification(IEnumerable(Of TKey))
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
    name: ByMultipleKeysSpecification
    nameWithType: RepositoryBase<T, TKey>.ByMultipleKeysSpecification
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.ByMultipleKeysSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.ByMultipleKeysSpecification(System.Collections.Generic.IEnumerable{`1})
    name: ByMultipleKeysSpecification
    nameWithType: RepositoryBase(Of T, TKey).ByMultipleKeysSpecification
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).ByMultipleKeysSpecification
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
  commentId: M:SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
  isExternal: true
  name: GetPrimaryKeyPropertyInfo()
  nameWithType: RepositoryBase<T, TKey>.GetPrimaryKeyPropertyInfo()
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKeyPropertyInfo()
  nameWithType.vb: RepositoryBase(Of T, TKey).GetPrimaryKeyPropertyInfo()
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKeyPropertyInfo()
  spec.csharp:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
    name: GetPrimaryKeyPropertyInfo
    nameWithType: RepositoryBase<T, TKey>.GetPrimaryKeyPropertyInfo
    fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GetPrimaryKeyPropertyInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SharpRepository.Repository.RepositoryBase`2.GetPrimaryKeyPropertyInfo
    name: GetPrimaryKeyPropertyInfo
    nameWithType: RepositoryBase(Of T, TKey).GetPrimaryKeyPropertyInfo
    fullName: SharpRepository.Repository.RepositoryBase(Of T, TKey).GetPrimaryKeyPropertyInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SharpRepository.Repository.RepositoryBase`2.Conventions
  commentId: P:SharpRepository.Repository.RepositoryBase`2.Conventions
  isExternal: true
  name: Conventions
  nameWithType: RepositoryBase<T, TKey>.Conventions
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Conventions
  nameWithType.vb: RepositoryBase(Of T, TKey).Conventions
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Conventions
- uid: SharpRepository.Repository.RepositoryBase`2.Aspects
  commentId: P:SharpRepository.Repository.RepositoryBase`2.Aspects
  isExternal: true
  name: Aspects
  nameWithType: RepositoryBase<T, TKey>.Aspects
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.Aspects
  nameWithType.vb: RepositoryBase(Of T, TKey).Aspects
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).Aspects
- uid: SharpRepository.Repository.RepositoryBase`2.EntityType
  commentId: P:SharpRepository.Repository.RepositoryBase`2.EntityType
  isExternal: true
  name: EntityType
  nameWithType: RepositoryBase<T, TKey>.EntityType
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.EntityType
  nameWithType.vb: RepositoryBase(Of T, TKey).EntityType
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).EntityType
- uid: SharpRepository.Repository.RepositoryBase`2.KeyType
  commentId: P:SharpRepository.Repository.RepositoryBase`2.KeyType
  isExternal: true
  name: KeyType
  nameWithType: RepositoryBase<T, TKey>.KeyType
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.KeyType
  nameWithType.vb: RepositoryBase(Of T, TKey).KeyType
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).KeyType
- uid: SharpRepository.Repository.RepositoryBase`2.TypeName
  commentId: P:SharpRepository.Repository.RepositoryBase`2.TypeName
  isExternal: true
  name: TypeName
  nameWithType: RepositoryBase<T, TKey>.TypeName
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TypeName
  nameWithType.vb: RepositoryBase(Of T, TKey).TypeName
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TypeName
- uid: SharpRepository.Repository.RepositoryBase`2.CacheUsed
  commentId: P:SharpRepository.Repository.RepositoryBase`2.CacheUsed
  isExternal: true
  name: CacheUsed
  nameWithType: RepositoryBase<T, TKey>.CacheUsed
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.CacheUsed
  nameWithType.vb: RepositoryBase(Of T, TKey).CacheUsed
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).CacheUsed
- uid: SharpRepository.Repository.RepositoryBase`2.CachingStrategy
  commentId: P:SharpRepository.Repository.RepositoryBase`2.CachingStrategy
  isExternal: true
  name: CachingStrategy
  nameWithType: RepositoryBase<T, TKey>.CachingStrategy
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.CachingStrategy
  nameWithType.vb: RepositoryBase(Of T, TKey).CachingStrategy
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).CachingStrategy
- uid: SharpRepository.Repository.RepositoryBase`2.CachingEnabled
  commentId: P:SharpRepository.Repository.RepositoryBase`2.CachingEnabled
  isExternal: true
  name: CachingEnabled
  nameWithType: RepositoryBase<T, TKey>.CachingEnabled
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.CachingEnabled
  nameWithType.vb: RepositoryBase(Of T, TKey).CachingEnabled
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).CachingEnabled
- uid: SharpRepository.Repository.RepositoryBase`2.TraceInfo
  commentId: P:SharpRepository.Repository.RepositoryBase`2.TraceInfo
  isExternal: true
  name: TraceInfo
  nameWithType: RepositoryBase<T, TKey>.TraceInfo
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.TraceInfo
  nameWithType.vb: RepositoryBase(Of T, TKey).TraceInfo
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).TraceInfo
- uid: SharpRepository.Repository.RepositoryBase`2.GenerateKeyOnAdd
  commentId: P:SharpRepository.Repository.RepositoryBase`2.GenerateKeyOnAdd
  isExternal: true
  name: GenerateKeyOnAdd
  nameWithType: RepositoryBase<T, TKey>.GenerateKeyOnAdd
  fullName: SharpRepository.Repository.RepositoryBase<T, TKey>.GenerateKeyOnAdd
  nameWithType.vb: RepositoryBase(Of T, TKey).GenerateKeyOnAdd
  fullName.vb: SharpRepository.Repository.RepositoryBase(Of T, TKey).GenerateKeyOnAdd
- uid: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor*
  commentId: Overload:Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository`1.#ctor
  name: FileSystemAwareXmlRepository
  nameWithType: FileSystemAwareXmlRepository<T>.FileSystemAwareXmlRepository
  fullName: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository<T>.FileSystemAwareXmlRepository
  nameWithType.vb: FileSystemAwareXmlRepository(Of T).FileSystemAwareXmlRepository
  fullName.vb: Catalyst.Core.Lib.Repository.FileSystemAwareXmlRepository(Of T).FileSystemAwareXmlRepository
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
