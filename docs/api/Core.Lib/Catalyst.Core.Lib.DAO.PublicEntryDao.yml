### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao
  commentId: T:Catalyst.Core.Lib.DAO.PublicEntryDao
  id: PublicEntryDao
  parent: Catalyst.Core.Lib.DAO
  children:
  - Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
  - Catalyst.Core.Lib.DAO.PublicEntryDao.Base
  - Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers(AutoMapper.IMapperConfigurationExpression)
  langs:
  - csharp
  - vb
  name: PublicEntryDao
  nameWithType: PublicEntryDao
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PublicEntryDao
    path: ../src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
    startLine: 30
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: 'public class PublicEntryDao : DaoBase<PublicEntry, PublicEntryDao>, IMapperInitializer, IValueConverter<PublicEntry, PublicEntryDao>'
    content.vb: >-
      Public Class PublicEntryDao

          Inherits DaoBase(Of PublicEntry, PublicEntryDao)

          Implements IMapperInitializer, IValueConverter(Of PublicEntry, PublicEntryDao)
  inheritance:
  - System.Object
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  implements:
  - Catalyst.Abstractions.DAO.IMapperInitializer
  - AutoMapper.IValueConverter{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  inheritedMembers:
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Id
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToProtoBuff
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToDao(Catalyst.Protocol.Transaction.PublicEntry)
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.InitMappers(AutoMapper.IMapperConfigurationExpression)
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Protocol.Transaction.PublicEntry,AutoMapper.ResolutionContext)
  - Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Core.Lib.DAO.PublicEntryDao,AutoMapper.ResolutionContext)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.Base
  commentId: P:Catalyst.Core.Lib.DAO.PublicEntryDao.Base
  id: Base
  parent: Catalyst.Core.Lib.DAO.PublicEntryDao
  langs:
  - csharp
  - vb
  name: Base
  nameWithType: PublicEntryDao.Base
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.Base
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Base
    path: ../src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
    startLine: 32
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public BaseEntryDao Base { get; set; }
    parameters: []
    return:
      type: Catalyst.Core.Lib.DAO.BaseEntryDao
    content.vb: Public Property Base As BaseEntryDao
  overload: Catalyst.Core.Lib.DAO.PublicEntryDao.Base*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
  commentId: P:Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
  id: Amount
  parent: Catalyst.Core.Lib.DAO.PublicEntryDao
  langs:
  - csharp
  - vb
  name: Amount
  nameWithType: PublicEntryDao.Amount
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
  type: Property
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Amount
    path: ../src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
    startLine: 33
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public string Amount { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Amount As String
  overload: Catalyst.Core.Lib.DAO.PublicEntryDao.Amount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers(AutoMapper.IMapperConfigurationExpression)
  commentId: M:Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers(AutoMapper.IMapperConfigurationExpression)
  id: InitMappers(AutoMapper.IMapperConfigurationExpression)
  parent: Catalyst.Core.Lib.DAO.PublicEntryDao
  langs:
  - csharp
  - vb
  name: InitMappers(IMapperConfigurationExpression)
  nameWithType: PublicEntryDao.InitMappers(IMapperConfigurationExpression)
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers(AutoMapper.IMapperConfigurationExpression)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: InitMappers
    path: ../src/Catalyst.Core.Lib/DAO/PublicEntryDao.cs
    startLine: 38
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.DAO
  syntax:
    content: public override void InitMappers(IMapperConfigurationExpression cfg)
    parameters:
    - id: cfg
      type: AutoMapper.IMapperConfigurationExpression
    content.vb: Public Overrides Sub InitMappers(cfg As IMapperConfigurationExpression)
  overridden: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.InitMappers(AutoMapper.IMapperConfigurationExpression)
  overload: Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Catalyst.Core.Lib.DAO
  commentId: N:Catalyst.Core.Lib.DAO
  name: Catalyst.Core.Lib.DAO
  nameWithType: Catalyst.Core.Lib.DAO
  fullName: Catalyst.Core.Lib.DAO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  commentId: T:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  parent: Catalyst.Core.Lib.DAO
  definition: Catalyst.Core.Lib.DAO.DaoBase`2
  name: DaoBase<PublicEntry, PublicEntryDao>
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao)
  name.vb: DaoBase(Of PublicEntry, PublicEntryDao)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2
    name: DaoBase
    nameWithType: DaoBase
    fullName: Catalyst.Core.Lib.DAO.DaoBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2
    name: DaoBase
    nameWithType: DaoBase
    fullName: Catalyst.Core.Lib.DAO.DaoBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.DAO.IMapperInitializer
  commentId: T:Catalyst.Abstractions.DAO.IMapperInitializer
  parent: Catalyst.Abstractions.DAO
  name: IMapperInitializer
  nameWithType: IMapperInitializer
  fullName: Catalyst.Abstractions.DAO.IMapperInitializer
- uid: AutoMapper.IValueConverter{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  commentId: T:AutoMapper.IValueConverter{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  parent: AutoMapper
  definition: AutoMapper.IValueConverter`2
  name: IValueConverter<PublicEntry, PublicEntryDao>
  nameWithType: IValueConverter<PublicEntry, PublicEntryDao>
  fullName: AutoMapper.IValueConverter<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>
  nameWithType.vb: IValueConverter(Of PublicEntry, PublicEntryDao)
  fullName.vb: AutoMapper.IValueConverter(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao)
  name.vb: IValueConverter(Of PublicEntry, PublicEntryDao)
  spec.csharp:
  - uid: AutoMapper.IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: AutoMapper.IValueConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoMapper.IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: AutoMapper.IValueConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Id
  commentId: P:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Id
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.Id
  name: Id
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.Id
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.Id
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).Id
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).Id
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToProtoBuff
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToProtoBuff
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  name: ToProtoBuff()
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.ToProtoBuff()
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.ToProtoBuff()
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).ToProtoBuff()
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).ToProtoBuff()
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
    name: ToProtoBuff
    nameWithType: DaoBase<PublicEntry, PublicEntryDao>.ToProtoBuff
    fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.ToProtoBuff
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
    name: ToProtoBuff
    nameWithType: DaoBase(Of PublicEntry, PublicEntryDao).ToProtoBuff
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).ToProtoBuff
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToDao(Catalyst.Protocol.Transaction.PublicEntry)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.ToDao(Catalyst.Protocol.Transaction.PublicEntry)
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  name: ToDao(PublicEntry)
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.ToDao(PublicEntry)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.ToDao(Catalyst.Protocol.Transaction.PublicEntry)
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).ToDao(PublicEntry)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).ToDao(Catalyst.Protocol.Transaction.PublicEntry)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
    name: ToDao
    nameWithType: DaoBase<PublicEntry, PublicEntryDao>.ToDao
    fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.ToDao
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
    name: ToDao
    nameWithType: DaoBase(Of PublicEntry, PublicEntryDao).ToDao
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).ToDao
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.InitMappers(AutoMapper.IMapperConfigurationExpression)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.InitMappers(AutoMapper.IMapperConfigurationExpression)
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
  name: InitMappers(IMapperConfigurationExpression)
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.InitMappers(IMapperConfigurationExpression)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.InitMappers(AutoMapper.IMapperConfigurationExpression)
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).InitMappers(IMapperConfigurationExpression)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).InitMappers(AutoMapper.IMapperConfigurationExpression)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
    name: InitMappers
    nameWithType: DaoBase<PublicEntry, PublicEntryDao>.InitMappers
    fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.InitMappers
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoMapper.IMapperConfigurationExpression
    name: IMapperConfigurationExpression
    nameWithType: IMapperConfigurationExpression
    fullName: AutoMapper.IMapperConfigurationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
    name: InitMappers
    nameWithType: DaoBase(Of PublicEntry, PublicEntryDao).InitMappers
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).InitMappers
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoMapper.IMapperConfigurationExpression
    name: IMapperConfigurationExpression
    nameWithType: IMapperConfigurationExpression
    fullName: AutoMapper.IMapperConfigurationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Protocol.Transaction.PublicEntry,AutoMapper.ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Protocol.Transaction.PublicEntry,AutoMapper.ResolutionContext)
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
  name: Convert(PublicEntry, ResolutionContext)
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.Convert(PublicEntry, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.Convert(Catalyst.Protocol.Transaction.PublicEntry, AutoMapper.ResolutionContext)
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).Convert(PublicEntry, ResolutionContext)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).Convert(Catalyst.Protocol.Transaction.PublicEntry, AutoMapper.ResolutionContext)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase<PublicEntry, PublicEntryDao>.Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase(Of PublicEntry, PublicEntryDao).Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Protocol.Transaction.PublicEntry
    name: PublicEntry
    nameWithType: PublicEntry
    fullName: Catalyst.Protocol.Transaction.PublicEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Core.Lib.DAO.PublicEntryDao,AutoMapper.ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}.Convert(Catalyst.Core.Lib.DAO.PublicEntryDao,AutoMapper.ResolutionContext)
  parent: Catalyst.Core.Lib.DAO.DaoBase{Catalyst.Protocol.Transaction.PublicEntry,Catalyst.Core.Lib.DAO.PublicEntryDao}
  definition: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
  name: Convert(PublicEntryDao, ResolutionContext)
  nameWithType: DaoBase<PublicEntry, PublicEntryDao>.Convert(PublicEntryDao, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.Convert(Catalyst.Core.Lib.DAO.PublicEntryDao, AutoMapper.ResolutionContext)
  nameWithType.vb: DaoBase(Of PublicEntry, PublicEntryDao).Convert(PublicEntryDao, ResolutionContext)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).Convert(Catalyst.Core.Lib.DAO.PublicEntryDao, AutoMapper.ResolutionContext)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase<PublicEntry, PublicEntryDao>.Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase<Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase(Of PublicEntry, PublicEntryDao).Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of Catalyst.Protocol.Transaction.PublicEntry, Catalyst.Core.Lib.DAO.PublicEntryDao).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Core.Lib.DAO.PublicEntryDao
    name: PublicEntryDao
    nameWithType: PublicEntryDao
    fullName: Catalyst.Core.Lib.DAO.PublicEntryDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Core.Lib.DAO.DaoBase`2
  commentId: T:Catalyst.Core.Lib.DAO.DaoBase`2
  name: DaoBase<TProto, TDao>
  nameWithType: DaoBase<TProto, TDao>
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>
  nameWithType.vb: DaoBase(Of TProto, TDao)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao)
  name.vb: DaoBase(Of TProto, TDao)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2
    name: DaoBase
    nameWithType: DaoBase
    fullName: Catalyst.Core.Lib.DAO.DaoBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2
    name: DaoBase
    nameWithType: DaoBase
    fullName: Catalyst.Core.Lib.DAO.DaoBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.DAO
  commentId: N:Catalyst.Abstractions.DAO
  name: Catalyst.Abstractions.DAO
  nameWithType: Catalyst.Abstractions.DAO
  fullName: Catalyst.Abstractions.DAO
- uid: AutoMapper.IValueConverter`2
  commentId: T:AutoMapper.IValueConverter`2
  isExternal: true
  name: IValueConverter<TSourceMember, TDestinationMember>
  nameWithType: IValueConverter<TSourceMember, TDestinationMember>
  fullName: AutoMapper.IValueConverter<TSourceMember, TDestinationMember>
  nameWithType.vb: IValueConverter(Of TSourceMember, TDestinationMember)
  fullName.vb: AutoMapper.IValueConverter(Of TSourceMember, TDestinationMember)
  name.vb: IValueConverter(Of TSourceMember, TDestinationMember)
  spec.csharp:
  - uid: AutoMapper.IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: AutoMapper.IValueConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSourceMember
    nameWithType: TSourceMember
    fullName: TSourceMember
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDestinationMember
    nameWithType: TDestinationMember
    fullName: TDestinationMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: AutoMapper.IValueConverter`2
    name: IValueConverter
    nameWithType: IValueConverter
    fullName: AutoMapper.IValueConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSourceMember
    nameWithType: TSourceMember
    fullName: TSourceMember
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDestinationMember
    nameWithType: TDestinationMember
    fullName: TDestinationMember
  - name: )
    nameWithType: )
    fullName: )
- uid: AutoMapper
  commentId: N:AutoMapper
  isExternal: true
  name: AutoMapper
  nameWithType: AutoMapper
  fullName: AutoMapper
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Id
  commentId: P:Catalyst.Core.Lib.DAO.DaoBase`2.Id
  name: Id
  nameWithType: DaoBase<TProto, TDao>.Id
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Id
  nameWithType.vb: DaoBase(Of TProto, TDao).Id
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Id
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
  name: ToProtoBuff()
  nameWithType: DaoBase<TProto, TDao>.ToProtoBuff()
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToProtoBuff()
  nameWithType.vb: DaoBase(Of TProto, TDao).ToProtoBuff()
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToProtoBuff()
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
    name: ToProtoBuff
    nameWithType: DaoBase<TProto, TDao>.ToProtoBuff
    fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToProtoBuff
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToProtoBuff
    name: ToProtoBuff
    nameWithType: DaoBase(Of TProto, TDao).ToProtoBuff
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToProtoBuff
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
  name: ToDao(TProto)
  nameWithType: DaoBase<TProto, TDao>.ToDao(TProto)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToDao(TProto)
  nameWithType.vb: DaoBase(Of TProto, TDao).ToDao(TProto)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToDao(TProto)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
    name: ToDao
    nameWithType: DaoBase<TProto, TDao>.ToDao
    fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.ToDao
  - name: (
    nameWithType: (
    fullName: (
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.ToDao(`0)
    name: ToDao
    nameWithType: DaoBase(Of TProto, TDao).ToDao
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).ToDao
  - name: (
    nameWithType: (
    fullName: (
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
  isExternal: true
  name: InitMappers(IMapperConfigurationExpression)
  nameWithType: DaoBase<TProto, TDao>.InitMappers(IMapperConfigurationExpression)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.InitMappers(AutoMapper.IMapperConfigurationExpression)
  nameWithType.vb: DaoBase(Of TProto, TDao).InitMappers(IMapperConfigurationExpression)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).InitMappers(AutoMapper.IMapperConfigurationExpression)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
    name: InitMappers
    nameWithType: DaoBase<TProto, TDao>.InitMappers
    fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.InitMappers
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoMapper.IMapperConfigurationExpression
    name: IMapperConfigurationExpression
    nameWithType: IMapperConfigurationExpression
    fullName: AutoMapper.IMapperConfigurationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.InitMappers(AutoMapper.IMapperConfigurationExpression)
    name: InitMappers
    nameWithType: DaoBase(Of TProto, TDao).InitMappers
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).InitMappers
  - name: (
    nameWithType: (
    fullName: (
  - uid: AutoMapper.IMapperConfigurationExpression
    name: IMapperConfigurationExpression
    nameWithType: IMapperConfigurationExpression
    fullName: AutoMapper.IMapperConfigurationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
  isExternal: true
  name: Convert(TProto, ResolutionContext)
  nameWithType: DaoBase<TProto, TDao>.Convert(TProto, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert(TProto, AutoMapper.ResolutionContext)
  nameWithType.vb: DaoBase(Of TProto, TDao).Convert(TProto, ResolutionContext)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert(TProto, AutoMapper.ResolutionContext)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase<TProto, TDao>.Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`0,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase(Of TProto, TDao).Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TProto
    nameWithType: TProto
    fullName: TProto
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
  commentId: M:Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
  isExternal: true
  name: Convert(TDao, ResolutionContext)
  nameWithType: DaoBase<TProto, TDao>.Convert(TDao, ResolutionContext)
  fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert(TDao, AutoMapper.ResolutionContext)
  nameWithType.vb: DaoBase(Of TProto, TDao).Convert(TDao, ResolutionContext)
  fullName.vb: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert(TDao, AutoMapper.ResolutionContext)
  spec.csharp:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase<TProto, TDao>.Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase<TProto, TDao>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Core.Lib.DAO.DaoBase`2.Convert(`1,AutoMapper.ResolutionContext)
    name: Convert
    nameWithType: DaoBase(Of TProto, TDao).Convert
    fullName: Catalyst.Core.Lib.DAO.DaoBase(Of TProto, TDao).Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TDao
    nameWithType: TDao
    fullName: TDao
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AutoMapper.ResolutionContext
    name: ResolutionContext
    nameWithType: ResolutionContext
    fullName: AutoMapper.ResolutionContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.Base*
  commentId: Overload:Catalyst.Core.Lib.DAO.PublicEntryDao.Base
  name: Base
  nameWithType: PublicEntryDao.Base
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.Base
- uid: Catalyst.Core.Lib.DAO.BaseEntryDao
  commentId: T:Catalyst.Core.Lib.DAO.BaseEntryDao
  parent: Catalyst.Core.Lib.DAO
  name: BaseEntryDao
  nameWithType: BaseEntryDao
  fullName: Catalyst.Core.Lib.DAO.BaseEntryDao
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.Amount*
  commentId: Overload:Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
  name: Amount
  nameWithType: PublicEntryDao.Amount
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.Amount
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers*
  commentId: Overload:Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers
  name: InitMappers
  nameWithType: PublicEntryDao.InitMappers
  fullName: Catalyst.Core.Lib.DAO.PublicEntryDao.InitMappers
- uid: AutoMapper.IMapperConfigurationExpression
  commentId: T:AutoMapper.IMapperConfigurationExpression
  parent: AutoMapper
  isExternal: true
  name: IMapperConfigurationExpression
  nameWithType: IMapperConfigurationExpression
  fullName: AutoMapper.IMapperConfigurationExpression
