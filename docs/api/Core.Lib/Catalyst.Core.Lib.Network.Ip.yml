### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Network.Ip
  commentId: T:Catalyst.Core.Lib.Network.Ip
  id: Ip
  parent: Catalyst.Core.Lib.Network
  children:
  - Catalyst.Core.Lib.Network.Ip.BuildIpAddress(System.String)
  - Catalyst.Core.Lib.Network.Ip.DefaultIpEchoUrls
  - Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync(System.IObservable{System.String})
  - Catalyst.Core.Lib.Network.Ip.To16Bytes(System.Net.IPAddress)
  langs:
  - csharp
  - vb
  name: Ip
  nameWithType: Ip
  fullName: Catalyst.Core.Lib.Network.Ip
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Network/Ip.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: Ip
    path: ../src/Catalyst.Core.Lib/Network/Ip.cs
    startLine: 38
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Network
  syntax:
    content: public static class Ip
    content.vb: Public Module Ip
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Catalyst.Core.Lib.Network.Ip.DefaultIpEchoUrls
  commentId: F:Catalyst.Core.Lib.Network.Ip.DefaultIpEchoUrls
  id: DefaultIpEchoUrls
  parent: Catalyst.Core.Lib.Network.Ip
  langs:
  - csharp
  - vb
  name: DefaultIpEchoUrls
  nameWithType: Ip.DefaultIpEchoUrls
  fullName: Catalyst.Core.Lib.Network.Ip.DefaultIpEchoUrls
  type: Field
  source:
    remote:
      path: src/Catalyst.Core.Lib/Network/Ip.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: DefaultIpEchoUrls
    path: ../src/Catalyst.Core.Lib/Network/Ip.cs
    startLine: 42
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Network
  syntax:
    content: public static readonly ReadOnlyCollection<string> DefaultIpEchoUrls
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
    content.vb: Public Shared ReadOnly DefaultIpEchoUrls As ReadOnlyCollection(Of String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync(System.IObservable{System.String})
  commentId: M:Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync(System.IObservable{System.String})
  id: GetPublicIpAsync(System.IObservable{System.String})
  parent: Catalyst.Core.Lib.Network.Ip
  langs:
  - csharp
  - vb
  name: GetPublicIpAsync(IObservable<String>)
  nameWithType: Ip.GetPublicIpAsync(IObservable<String>)
  fullName: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync(System.IObservable<System.String>)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Network/Ip.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: GetPublicIpAsync
    path: ../src/Catalyst.Core.Lib/Network/Ip.cs
    startLine: 58
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Network
  summary: "\n"
  example: []
  syntax:
    content: public static Task<IPAddress> GetPublicIpAsync(IObservable<string> ipEchoUrls = null)
    parameters:
    - id: ipEchoUrls
      type: System.IObservable{System.String}
    return:
      type: System.Threading.Tasks.Task{System.Net.IPAddress}
      description: ''
    content.vb: Public Shared Function GetPublicIpAsync(ipEchoUrls As IObservable(Of String) = Nothing) As Task(Of IPAddress)
  overload: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync*
  nameWithType.vb: Ip.GetPublicIpAsync(IObservable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync(System.IObservable(Of System.String))
  name.vb: GetPublicIpAsync(IObservable(Of String))
- uid: Catalyst.Core.Lib.Network.Ip.To16Bytes(System.Net.IPAddress)
  commentId: M:Catalyst.Core.Lib.Network.Ip.To16Bytes(System.Net.IPAddress)
  id: To16Bytes(System.Net.IPAddress)
  isExtensionMethod: true
  parent: Catalyst.Core.Lib.Network.Ip
  langs:
  - csharp
  - vb
  name: To16Bytes(IPAddress)
  nameWithType: Ip.To16Bytes(IPAddress)
  fullName: Catalyst.Core.Lib.Network.Ip.To16Bytes(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Network/Ip.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: To16Bytes
    path: ../src/Catalyst.Core.Lib/Network/Ip.cs
    startLine: 75
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Network
  summary: "\nCreates a standardised format byte array that can handle a IPv6 address or an IPv4 with leading bytes padded with 0x0\n"
  example: []
  syntax:
    content: public static byte[] To16Bytes(this IPAddress address)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: ''
    return:
      type: System.Byte[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function To16Bytes(address As IPAddress) As Byte()
  overload: Catalyst.Core.Lib.Network.Ip.To16Bytes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Catalyst.Core.Lib.Network.Ip.BuildIpAddress(System.String)
  commentId: M:Catalyst.Core.Lib.Network.Ip.BuildIpAddress(System.String)
  id: BuildIpAddress(System.String)
  parent: Catalyst.Core.Lib.Network.Ip
  langs:
  - csharp
  - vb
  name: BuildIpAddress(String)
  nameWithType: Ip.BuildIpAddress(String)
  fullName: Catalyst.Core.Lib.Network.Ip.BuildIpAddress(System.String)
  type: Method
  source:
    remote:
      path: src/Catalyst.Core.Lib/Network/Ip.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: BuildIpAddress
    path: ../src/Catalyst.Core.Lib/Network/Ip.cs
    startLine: 125
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Network
  summary: "\n"
  example: []
  syntax:
    content: public static IPAddress BuildIpAddress(string ipOrHost)
    parameters:
    - id: ipOrHost
      type: System.String
      description: ''
    return:
      type: System.Net.IPAddress
      description: ''
    content.vb: Public Shared Function BuildIpAddress(ipOrHost As String) As IPAddress
  overload: Catalyst.Core.Lib.Network.Ip.BuildIpAddress*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Catalyst.Core.Lib.Network
  commentId: N:Catalyst.Core.Lib.Network
  name: Catalyst.Core.Lib.Network
  nameWithType: Catalyst.Core.Lib.Network
  fullName: Catalyst.Core.Lib.Network
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync*
  commentId: Overload:Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync
  name: GetPublicIpAsync
  nameWithType: Ip.GetPublicIpAsync
  fullName: Catalyst.Core.Lib.Network.Ip.GetPublicIpAsync
- uid: System.IObservable{System.String}
  commentId: T:System.IObservable{System.String}
  parent: System
  definition: System.IObservable`1
  name: IObservable<String>
  nameWithType: IObservable<String>
  fullName: System.IObservable<System.String>
  nameWithType.vb: IObservable(Of String)
  fullName.vb: System.IObservable(Of System.String)
  name.vb: IObservable(Of String)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Net.IPAddress}
  commentId: T:System.Threading.Tasks.Task{System.Net.IPAddress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPAddress>
  nameWithType: Task<IPAddress>
  fullName: System.Threading.Tasks.Task<System.Net.IPAddress>
  nameWithType.vb: Task(Of IPAddress)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.IPAddress)
  name.vb: Task(Of IPAddress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Catalyst.Core.Lib.Network.Ip.To16Bytes*
  commentId: Overload:Catalyst.Core.Lib.Network.Ip.To16Bytes
  name: To16Bytes
  nameWithType: Ip.To16Bytes
  fullName: Catalyst.Core.Lib.Network.Ip.To16Bytes
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Net
  commentId: N:System.Net
  isExternal: true
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: Catalyst.Core.Lib.Network.Ip.BuildIpAddress*
  commentId: Overload:Catalyst.Core.Lib.Network.Ip.BuildIpAddress
  name: BuildIpAddress
  nameWithType: Ip.BuildIpAddress
  fullName: Catalyst.Core.Lib.Network.Ip.BuildIpAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
