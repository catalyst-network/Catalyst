### YamlMime:ManagedReference
items:
- uid: Catalyst.Core.Lib.Cryptography.PasswordRegistry
  commentId: T:Catalyst.Core.Lib.Cryptography.PasswordRegistry
  id: PasswordRegistry
  parent: Catalyst.Core.Lib.Cryptography
  children:
  - Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor
  langs:
  - csharp
  - vb
  name: PasswordRegistry
  nameWithType: PasswordRegistry
  fullName: Catalyst.Core.Lib.Cryptography.PasswordRegistry
  type: Class
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: PasswordRegistry
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordRegistry.cs
    startLine: 31
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  syntax:
    content: 'public sealed class PasswordRegistry : RegistryBase<PasswordRegistryTypes, SecureString>, IPasswordRegistry, IRegistryBase<PasswordRegistryTypes, SecureString>, IDisposable'
    content.vb: >-
      Public NotInheritable Class PasswordRegistry

          Inherits RegistryBase(Of PasswordRegistryTypes, SecureString)

          Implements IPasswordRegistry, IRegistryBase(Of PasswordRegistryTypes, SecureString), IDisposable
  inheritance:
  - System.Object
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  implements:
  - Catalyst.Abstractions.Cryptography.IPasswordRegistry
  - Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  - System.IDisposable
  inheritedMembers:
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.Registry
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  - Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.System#IDisposable#Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor
  commentId: M:Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor
  id: '#ctor'
  parent: Catalyst.Core.Lib.Cryptography.PasswordRegistry
  langs:
  - csharp
  - vb
  name: PasswordRegistry()
  nameWithType: PasswordRegistry.PasswordRegistry()
  fullName: Catalyst.Core.Lib.Cryptography.PasswordRegistry.PasswordRegistry()
  type: Constructor
  source:
    remote:
      path: src/Catalyst.Core.Lib/Cryptography/PasswordRegistry.cs
      branch: develop
      repo: https://github.com/catalyst-network/Catalyst.Node.git
    id: .ctor
    path: ../src/Catalyst.Core.Lib/Cryptography/PasswordRegistry.cs
    startLine: 33
  assemblies:
  - Catalyst.Core.Lib
  namespace: Catalyst.Core.Lib.Cryptography
  syntax:
    content: public PasswordRegistry()
    content.vb: Public Sub New
  overload: Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Catalyst.Core.Lib.Cryptography
  commentId: N:Catalyst.Core.Lib.Cryptography
  name: Catalyst.Core.Lib.Cryptography
  nameWithType: Catalyst.Core.Lib.Cryptography
  fullName: Catalyst.Core.Lib.Cryptography
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  commentId: T:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  parent: Catalyst.Abstractions.Registry
  definition: Catalyst.Abstractions.Registry.RegistryBase`2
  name: RegistryBase<PasswordRegistryTypes, SecureString>
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  name.vb: RegistryBase(Of PasswordRegistryTypes, SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2
    name: RegistryBase
    nameWithType: RegistryBase
    fullName: Catalyst.Abstractions.Registry.RegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2
    name: RegistryBase
    nameWithType: RegistryBase
    fullName: Catalyst.Abstractions.Registry.RegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Cryptography.IPasswordRegistry
  commentId: T:Catalyst.Abstractions.Cryptography.IPasswordRegistry
  parent: Catalyst.Abstractions.Cryptography
  name: IPasswordRegistry
  nameWithType: IPasswordRegistry
  fullName: Catalyst.Abstractions.Cryptography.IPasswordRegistry
- uid: Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  parent: Catalyst.Abstractions.Registry
  definition: Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<PasswordRegistryTypes, SecureString>
  nameWithType: IRegistryBase<PasswordRegistryTypes, SecureString>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>
  nameWithType.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  name.vb: IRegistryBase(Of PasswordRegistryTypes, SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.Registry
  commentId: P:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.Registry
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  name: Registry
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.Registry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.Registry
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).Registry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).Registry
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString)
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(PasswordRegistryTypes, SecureString)
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.AddItemToRegistry(PasswordRegistryTypes, SecureString)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).AddItemToRegistry(PasswordRegistryTypes, SecureString)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).AddItemToRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: RegistryBase(Of PasswordRegistryTypes, SecureString).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecureString
    name: SecureString
    nameWithType: SecureString
    fullName: System.Security.SecureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(PasswordRegistryTypes)
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.GetItemFromRegistry(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).GetItemFromRegistry(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).GetItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: RegistryBase(Of PasswordRegistryTypes, SecureString).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(PasswordRegistryTypes)
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.RegistryContainsKey(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).RegistryContainsKey(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RegistryContainsKey(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: RegistryBase(Of PasswordRegistryTypes, SecureString).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(PasswordRegistryTypes)
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.RemoveItemFromRegistry(PasswordRegistryTypes)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).RemoveItemFromRegistry(PasswordRegistryTypes)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RemoveItemFromRegistry(Catalyst.Abstractions.Types.PasswordRegistryTypes)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: RegistryBase(Of PasswordRegistryTypes, SecureString).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Catalyst.Abstractions.Types.PasswordRegistryTypes
    name: PasswordRegistryTypes
    nameWithType: PasswordRegistryTypes
    fullName: Catalyst.Abstractions.Types.PasswordRegistryTypes
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.System#IDisposable#Dispose
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}.System#IDisposable#Dispose
  parent: Catalyst.Abstractions.Registry.RegistryBase{Catalyst.Abstractions.Types.PasswordRegistryTypes,System.Security.SecureString}
  definition: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  name: IDisposable.Dispose()
  nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.IDisposable.Dispose()
  fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.System.IDisposable.Dispose()
  nameWithType.vb: RegistryBase(Of PasswordRegistryTypes, SecureString).System.IDisposable.Dispose()
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).System.IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
    name: IDisposable.Dispose
    nameWithType: RegistryBase<PasswordRegistryTypes, SecureString>.IDisposable.Dispose
    fullName: Catalyst.Abstractions.Registry.RegistryBase<Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString>.System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
    name: System.IDisposable.Dispose
    nameWithType: RegistryBase(Of PasswordRegistryTypes, SecureString).System.IDisposable.Dispose
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of Catalyst.Abstractions.Types.PasswordRegistryTypes, System.Security.SecureString).System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Catalyst.Abstractions.Registry.RegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.RegistryBase`2
  name: RegistryBase<TKey, TValue>
  nameWithType: RegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>
  nameWithType.vb: RegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue)
  name.vb: RegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2
    name: RegistryBase
    nameWithType: RegistryBase
    fullName: Catalyst.Abstractions.Registry.RegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2
    name: RegistryBase
    nameWithType: RegistryBase
    fullName: Catalyst.Abstractions.Registry.RegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry
  commentId: N:Catalyst.Abstractions.Registry
  name: Catalyst.Abstractions.Registry
  nameWithType: Catalyst.Abstractions.Registry
  fullName: Catalyst.Abstractions.Registry
- uid: Catalyst.Abstractions.Cryptography
  commentId: N:Catalyst.Abstractions.Cryptography
  name: Catalyst.Abstractions.Cryptography
  nameWithType: Catalyst.Abstractions.Cryptography
  fullName: Catalyst.Abstractions.Cryptography
- uid: Catalyst.Abstractions.Registry.IRegistryBase`2
  commentId: T:Catalyst.Abstractions.Registry.IRegistryBase`2
  name: IRegistryBase<TKey, TValue>
  nameWithType: IRegistryBase<TKey, TValue>
  fullName: Catalyst.Abstractions.Registry.IRegistryBase<TKey, TValue>
  nameWithType.vb: IRegistryBase(Of TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.IRegistryBase(Of TKey, TValue)
  name.vb: IRegistryBase(Of TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.IRegistryBase`2
    name: IRegistryBase
    nameWithType: IRegistryBase
    fullName: Catalyst.Abstractions.Registry.IRegistryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  commentId: P:Catalyst.Abstractions.Registry.RegistryBase`2.Registry
  name: Registry
  nameWithType: RegistryBase<TKey, TValue>.Registry
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.Registry
  nameWithType.vb: RegistryBase(Of TKey, TValue).Registry
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).Registry
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
  name: AddItemToRegistry(TKey, TValue)
  nameWithType: RegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.AddItemToRegistry(TKey, TValue)
  nameWithType.vb: RegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).AddItemToRegistry(TKey, TValue)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: RegistryBase<TKey, TValue>.AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.AddItemToRegistry(`0,`1)
    name: AddItemToRegistry
    nameWithType: RegistryBase(Of TKey, TValue).AddItemToRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).AddItemToRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
  name: GetItemFromRegistry(TKey)
  nameWithType: RegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.GetItemFromRegistry(TKey)
  nameWithType.vb: RegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).GetItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: RegistryBase<TKey, TValue>.GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.GetItemFromRegistry(`0)
    name: GetItemFromRegistry
    nameWithType: RegistryBase(Of TKey, TValue).GetItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).GetItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
  name: RegistryContainsKey(TKey)
  nameWithType: RegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RegistryContainsKey(TKey)
  nameWithType.vb: RegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RegistryContainsKey(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: RegistryBase<TKey, TValue>.RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RegistryContainsKey(`0)
    name: RegistryContainsKey
    nameWithType: RegistryBase(Of TKey, TValue).RegistryContainsKey
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RegistryContainsKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
  name: RemoveItemFromRegistry(TKey)
  nameWithType: RegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RemoveItemFromRegistry(TKey)
  nameWithType.vb: RegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RemoveItemFromRegistry(TKey)
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: RegistryBase<TKey, TValue>.RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.RemoveItemFromRegistry(`0)
    name: RemoveItemFromRegistry
    nameWithType: RegistryBase(Of TKey, TValue).RemoveItemFromRegistry
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).RemoveItemFromRegistry
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  commentId: M:Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
  name: IDisposable.Dispose()
  nameWithType: RegistryBase<TKey, TValue>.IDisposable.Dispose()
  fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.System.IDisposable.Dispose()
  nameWithType.vb: RegistryBase(Of TKey, TValue).System.IDisposable.Dispose()
  fullName.vb: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).System.IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
  spec.csharp:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
    name: IDisposable.Dispose
    nameWithType: RegistryBase<TKey, TValue>.IDisposable.Dispose
    fullName: Catalyst.Abstractions.Registry.RegistryBase<TKey, TValue>.System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Catalyst.Abstractions.Registry.RegistryBase`2.System#IDisposable#Dispose
    name: System.IDisposable.Dispose
    nameWithType: RegistryBase(Of TKey, TValue).System.IDisposable.Dispose
    fullName: Catalyst.Abstractions.Registry.RegistryBase(Of TKey, TValue).System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor*
  commentId: Overload:Catalyst.Core.Lib.Cryptography.PasswordRegistry.#ctor
  name: PasswordRegistry
  nameWithType: PasswordRegistry.PasswordRegistry
  fullName: Catalyst.Core.Lib.Cryptography.PasswordRegistry.PasswordRegistry
