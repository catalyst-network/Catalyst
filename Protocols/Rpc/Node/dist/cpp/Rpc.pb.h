// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#ifndef PROTOBUF_INCLUDED_Rpc_2eproto
#define PROTOBUF_INCLUDED_Rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Rpc_2eproto 

namespace protobuf_Rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[54];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Rpc_2eproto
namespace ADL {
namespace Protocol {
namespace Rpc {
namespace Node {
class AddNodeRequest;
class AddNodeRequestDefaultTypeInternal;
extern AddNodeRequestDefaultTypeInternal _AddNodeRequest_default_instance_;
class AddNodeResponse;
class AddNodeResponseDefaultTypeInternal;
extern AddNodeResponseDefaultTypeInternal _AddNodeResponse_default_instance_;
class BroadcastRawTransactionRequest;
class BroadcastRawTransactionRequestDefaultTypeInternal;
extern BroadcastRawTransactionRequestDefaultTypeInternal _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponse;
class BroadcastRawTransactionResponseDefaultTypeInternal;
extern BroadcastRawTransactionResponseDefaultTypeInternal _BroadcastRawTransactionResponse_default_instance_;
class CreateAddressRequest;
class CreateAddressRequestDefaultTypeInternal;
extern CreateAddressRequestDefaultTypeInternal _CreateAddressRequest_default_instance_;
class CreateAddressResponse;
class CreateAddressResponseDefaultTypeInternal;
extern CreateAddressResponseDefaultTypeInternal _CreateAddressResponse_default_instance_;
class CreateRawTransactionRequest;
class CreateRawTransactionRequestDefaultTypeInternal;
extern CreateRawTransactionRequestDefaultTypeInternal _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponse;
class CreateRawTransactionResponseDefaultTypeInternal;
extern CreateRawTransactionResponseDefaultTypeInternal _CreateRawTransactionResponse_default_instance_;
class CreateWalletRequest;
class CreateWalletRequestDefaultTypeInternal;
extern CreateWalletRequestDefaultTypeInternal _CreateWalletRequest_default_instance_;
class CreateWalletResponse;
class CreateWalletResponseDefaultTypeInternal;
extern CreateWalletResponseDefaultTypeInternal _CreateWalletResponse_default_instance_;
class DecodeRawTransactionRequest;
class DecodeRawTransactionRequestDefaultTypeInternal;
extern DecodeRawTransactionRequestDefaultTypeInternal _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponse;
class DecodeRawTransactionResponseDefaultTypeInternal;
extern DecodeRawTransactionResponseDefaultTypeInternal _DecodeRawTransactionResponse_default_instance_;
class GetAddressRequest;
class GetAddressRequestDefaultTypeInternal;
extern GetAddressRequestDefaultTypeInternal _GetAddressRequest_default_instance_;
class GetAddressResponse;
class GetAddressResponseDefaultTypeInternal;
extern GetAddressResponseDefaultTypeInternal _GetAddressResponse_default_instance_;
class GetBalanceRequest;
class GetBalanceRequestDefaultTypeInternal;
extern GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
class GetBalanceResponse;
class GetBalanceResponseDefaultTypeInternal;
extern GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
class GetConnectionCountRequest;
class GetConnectionCountRequestDefaultTypeInternal;
extern GetConnectionCountRequestDefaultTypeInternal _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponse;
class GetConnectionCountResponseDefaultTypeInternal;
extern GetConnectionCountResponseDefaultTypeInternal _GetConnectionCountResponse_default_instance_;
class GetDeltaRequest;
class GetDeltaRequestDefaultTypeInternal;
extern GetDeltaRequestDefaultTypeInternal _GetDeltaRequest_default_instance_;
class GetDeltaResponse;
class GetDeltaResponseDefaultTypeInternal;
extern GetDeltaResponseDefaultTypeInternal _GetDeltaResponse_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetMempoolRequest;
class GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
class GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class GetPeerInfoRequest;
class GetPeerInfoRequestDefaultTypeInternal;
extern GetPeerInfoRequestDefaultTypeInternal _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponse;
class GetPeerInfoResponseDefaultTypeInternal;
extern GetPeerInfoResponseDefaultTypeInternal _GetPeerInfoResponse_default_instance_;
class GetPeerListRequest;
class GetPeerListRequestDefaultTypeInternal;
extern GetPeerListRequestDefaultTypeInternal _GetPeerListRequest_default_instance_;
class GetPeerListResponse;
class GetPeerListResponseDefaultTypeInternal;
extern GetPeerListResponseDefaultTypeInternal _GetPeerListResponse_default_instance_;
class ListAddressRequest;
class ListAddressRequestDefaultTypeInternal;
extern ListAddressRequestDefaultTypeInternal _ListAddressRequest_default_instance_;
class ListAddressResponse;
class ListAddressResponseDefaultTypeInternal;
extern ListAddressResponseDefaultTypeInternal _ListAddressResponse_default_instance_;
class ListWalletRequest;
class ListWalletRequestDefaultTypeInternal;
extern ListWalletRequestDefaultTypeInternal _ListWalletRequest_default_instance_;
class ListWalletResponse;
class ListWalletResponseDefaultTypeInternal;
extern ListWalletResponseDefaultTypeInternal _ListWalletResponse_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PongResponse;
class PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
class SendFromManyRequest;
class SendFromManyRequestDefaultTypeInternal;
extern SendFromManyRequestDefaultTypeInternal _SendFromManyRequest_default_instance_;
class SendFromManyResponse;
class SendFromManyResponseDefaultTypeInternal;
extern SendFromManyResponseDefaultTypeInternal _SendFromManyResponse_default_instance_;
class SendManyRequest;
class SendManyRequestDefaultTypeInternal;
extern SendManyRequestDefaultTypeInternal _SendManyRequest_default_instance_;
class SendManyResponse;
class SendManyResponseDefaultTypeInternal;
extern SendManyResponseDefaultTypeInternal _SendManyResponse_default_instance_;
class SendToFromRequest;
class SendToFromRequestDefaultTypeInternal;
extern SendToFromRequestDefaultTypeInternal _SendToFromRequest_default_instance_;
class SendToFromResponse;
class SendToFromResponseDefaultTypeInternal;
extern SendToFromResponseDefaultTypeInternal _SendToFromResponse_default_instance_;
class SendToRequest;
class SendToRequestDefaultTypeInternal;
extern SendToRequestDefaultTypeInternal _SendToRequest_default_instance_;
class SendToResponse;
class SendToResponseDefaultTypeInternal;
extern SendToResponseDefaultTypeInternal _SendToResponse_default_instance_;
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
class ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class SignMessageRequest;
class SignMessageRequestDefaultTypeInternal;
extern SignMessageRequestDefaultTypeInternal _SignMessageRequest_default_instance_;
class SignMessageResponse;
class SignMessageResponseDefaultTypeInternal;
extern SignMessageResponseDefaultTypeInternal _SignMessageResponse_default_instance_;
class SignRawTransactionRequest;
class SignRawTransactionRequestDefaultTypeInternal;
extern SignRawTransactionRequestDefaultTypeInternal _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponse;
class SignRawTransactionResponseDefaultTypeInternal;
extern SignRawTransactionResponseDefaultTypeInternal _SignRawTransactionResponse_default_instance_;
class ValidateAddressRequest;
class ValidateAddressRequestDefaultTypeInternal;
extern ValidateAddressRequestDefaultTypeInternal _ValidateAddressRequest_default_instance_;
class ValidateAddressResponse;
class ValidateAddressResponseDefaultTypeInternal;
extern ValidateAddressResponseDefaultTypeInternal _ValidateAddressResponse_default_instance_;
class VerifyMessageRequest;
class VerifyMessageRequestDefaultTypeInternal;
extern VerifyMessageRequestDefaultTypeInternal _VerifyMessageRequest_default_instance_;
class VerifyMessageResponse;
class VerifyMessageResponseDefaultTypeInternal;
extern VerifyMessageResponseDefaultTypeInternal _VerifyMessageResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace ADL
namespace google {
namespace protobuf {
template<> ::ADL::Protocol::Rpc::Node::AddNodeRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::AddNodeRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::AddNodeResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::AddNodeResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::BroadcastRawTransactionRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::BroadcastRawTransactionRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::BroadcastRawTransactionResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::BroadcastRawTransactionResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateAddressRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateAddressRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateAddressResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateAddressResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateRawTransactionRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateRawTransactionRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateRawTransactionResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateRawTransactionResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateWalletRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateWalletRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::CreateWalletResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::CreateWalletResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::DecodeRawTransactionRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::DecodeRawTransactionRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::DecodeRawTransactionResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::DecodeRawTransactionResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetAddressRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetAddressRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetAddressResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetAddressResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetBalanceRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetBalanceRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetBalanceResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetBalanceResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetConnectionCountRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetConnectionCountRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetConnectionCountResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetConnectionCountResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetDeltaRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetDeltaRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetDeltaResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetDeltaResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetInfoRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetInfoRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetInfoResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetInfoResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetMempoolRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetMempoolRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetMempoolResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetMempoolResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetPeerInfoRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetPeerInfoRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetPeerInfoResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetPeerInfoResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetPeerListRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetPeerListRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::GetPeerListResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::GetPeerListResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ListAddressRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ListAddressRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ListAddressResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ListAddressResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ListWalletRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ListWalletRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ListWalletResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ListWalletResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::PingRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::PingRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::PongResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::PongResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendFromManyRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendFromManyRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendFromManyResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendFromManyResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendManyRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendManyRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendManyResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendManyResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendToFromRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendToFromRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendToFromResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendToFromResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendToRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendToRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SendToResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SendToResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ServiceStatusRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ServiceStatusRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ServiceStatusResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ServiceStatusResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SignMessageRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SignMessageRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SignMessageResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SignMessageResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SignRawTransactionRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SignRawTransactionRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::SignRawTransactionResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::SignRawTransactionResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ValidateAddressRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ValidateAddressRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::ValidateAddressResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::ValidateAddressResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::VerifyMessageRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::VerifyMessageRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::VerifyMessageResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::VerifyMessageResponse>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::VersionRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::VersionRequest>(Arena*);
template<> ::ADL::Protocol::Rpc::Node::VersionResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Rpc::Node::VersionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ADL {
namespace Protocol {
namespace Rpc {
namespace Node {

// ===================================================================

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(NULL);
  }

  PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PongResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.PongResponse) */ {
 public:
  PongResponse();
  virtual ~PongResponse();

  PongResponse(const PongResponse& from);

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PongResponse* other);
  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(NULL);
  }

  PongResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 2;
  void clear_pong();
  static const int kPongFieldNumber = 2;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.PongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.VersionRequest) */ {
 public:
  VersionRequest();
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VersionRequest* other);
  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(NULL);
  }

  VersionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.VersionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.VersionResponse) */ {
 public:
  VersionResponse();
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(VersionResponse* other);
  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(NULL);
  }

  VersionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.VersionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetInfoRequest* other);
  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(NULL);
  }

  GetInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetInfoResponse* other);
  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return CreateMaybeMessage<GetInfoResponse>(NULL);
  }

  GetInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateWalletRequest) */ {
 public:
  CreateWalletRequest();
  virtual ~CreateWalletRequest();

  CreateWalletRequest(const CreateWalletRequest& from);

  inline CreateWalletRequest& operator=(const CreateWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateWalletRequest(CreateWalletRequest&& from) noexcept
    : CreateWalletRequest() {
    *this = ::std::move(from);
  }

  inline CreateWalletRequest& operator=(CreateWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWalletRequest*>(
               &_CreateWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateWalletRequest* other);
  friend void swap(CreateWalletRequest& a, CreateWalletRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletRequest* New() const final {
    return CreateMaybeMessage<CreateWalletRequest>(NULL);
  }

  CreateWalletRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateWalletRequest& from);
  void MergeFrom(const CreateWalletRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateWalletResponse) */ {
 public:
  CreateWalletResponse();
  virtual ~CreateWalletResponse();

  CreateWalletResponse(const CreateWalletResponse& from);

  inline CreateWalletResponse& operator=(const CreateWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateWalletResponse(CreateWalletResponse&& from) noexcept
    : CreateWalletResponse() {
    *this = ::std::move(from);
  }

  inline CreateWalletResponse& operator=(CreateWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWalletResponse*>(
               &_CreateWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CreateWalletResponse* other);
  friend void swap(CreateWalletResponse& a, CreateWalletResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletResponse* New() const final {
    return CreateMaybeMessage<CreateWalletResponse>(NULL);
  }

  CreateWalletResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateWalletResponse& from);
  void MergeFrom(const CreateWalletResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ListWalletRequest) */ {
 public:
  ListWalletRequest();
  virtual ~ListWalletRequest();

  ListWalletRequest(const ListWalletRequest& from);

  inline ListWalletRequest& operator=(const ListWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListWalletRequest(ListWalletRequest&& from) noexcept
    : ListWalletRequest() {
    *this = ::std::move(from);
  }

  inline ListWalletRequest& operator=(ListWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletRequest* internal_default_instance() {
    return reinterpret_cast<const ListWalletRequest*>(
               &_ListWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ListWalletRequest* other);
  friend void swap(ListWalletRequest& a, ListWalletRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListWalletRequest* New() const final {
    return CreateMaybeMessage<ListWalletRequest>(NULL);
  }

  ListWalletRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListWalletRequest& from);
  void MergeFrom(const ListWalletRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ListWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ListWalletResponse) */ {
 public:
  ListWalletResponse();
  virtual ~ListWalletResponse();

  ListWalletResponse(const ListWalletResponse& from);

  inline ListWalletResponse& operator=(const ListWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListWalletResponse(ListWalletResponse&& from) noexcept
    : ListWalletResponse() {
    *this = ::std::move(from);
  }

  inline ListWalletResponse& operator=(ListWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletResponse* internal_default_instance() {
    return reinterpret_cast<const ListWalletResponse*>(
               &_ListWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ListWalletResponse* other);
  friend void swap(ListWalletResponse& a, ListWalletResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListWalletResponse* New() const final {
    return CreateMaybeMessage<ListWalletResponse>(NULL);
  }

  ListWalletResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListWalletResponse& from);
  void MergeFrom(const ListWalletResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ListWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateAddressRequest) */ {
 public:
  CreateAddressRequest();
  virtual ~CreateAddressRequest();

  CreateAddressRequest(const CreateAddressRequest& from);

  inline CreateAddressRequest& operator=(const CreateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAddressRequest(CreateAddressRequest&& from) noexcept
    : CreateAddressRequest() {
    *this = ::std::move(from);
  }

  inline CreateAddressRequest& operator=(CreateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAddressRequest*>(
               &_CreateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CreateAddressRequest* other);
  friend void swap(CreateAddressRequest& a, CreateAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressRequest* New() const final {
    return CreateMaybeMessage<CreateAddressRequest>(NULL);
  }

  CreateAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAddressRequest& from);
  void MergeFrom(const CreateAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateAddressResponse) */ {
 public:
  CreateAddressResponse();
  virtual ~CreateAddressResponse();

  CreateAddressResponse(const CreateAddressResponse& from);

  inline CreateAddressResponse& operator=(const CreateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAddressResponse(CreateAddressResponse&& from) noexcept
    : CreateAddressResponse() {
    *this = ::std::move(from);
  }

  inline CreateAddressResponse& operator=(CreateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAddressResponse*>(
               &_CreateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CreateAddressResponse* other);
  friend void swap(CreateAddressResponse& a, CreateAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressResponse* New() const final {
    return CreateMaybeMessage<CreateAddressResponse>(NULL);
  }

  CreateAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAddressResponse& from);
  void MergeFrom(const CreateAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetAddressRequest) */ {
 public:
  GetAddressRequest();
  virtual ~GetAddressRequest();

  GetAddressRequest(const GetAddressRequest& from);

  inline GetAddressRequest& operator=(const GetAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAddressRequest(GetAddressRequest&& from) noexcept
    : GetAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressRequest& operator=(GetAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressRequest*>(
               &_GetAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetAddressRequest* other);
  friend void swap(GetAddressRequest& a, GetAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAddressRequest* New() const final {
    return CreateMaybeMessage<GetAddressRequest>(NULL);
  }

  GetAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAddressRequest& from);
  void MergeFrom(const GetAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetAddressResponse) */ {
 public:
  GetAddressResponse();
  virtual ~GetAddressResponse();

  GetAddressResponse(const GetAddressResponse& from);

  inline GetAddressResponse& operator=(const GetAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAddressResponse(GetAddressResponse&& from) noexcept
    : GetAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressResponse& operator=(GetAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressResponse*>(
               &_GetAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetAddressResponse* other);
  friend void swap(GetAddressResponse& a, GetAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAddressResponse* New() const final {
    return CreateMaybeMessage<GetAddressResponse>(NULL);
  }

  GetAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAddressResponse& from);
  void MergeFrom(const GetAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ListAddressRequest) */ {
 public:
  ListAddressRequest();
  virtual ~ListAddressRequest();

  ListAddressRequest(const ListAddressRequest& from);

  inline ListAddressRequest& operator=(const ListAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAddressRequest(ListAddressRequest&& from) noexcept
    : ListAddressRequest() {
    *this = ::std::move(from);
  }

  inline ListAddressRequest& operator=(ListAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ListAddressRequest*>(
               &_ListAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ListAddressRequest* other);
  friend void swap(ListAddressRequest& a, ListAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAddressRequest* New() const final {
    return CreateMaybeMessage<ListAddressRequest>(NULL);
  }

  ListAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAddressRequest& from);
  void MergeFrom(const ListAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ListAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ListAddressResponse) */ {
 public:
  ListAddressResponse();
  virtual ~ListAddressResponse();

  ListAddressResponse(const ListAddressResponse& from);

  inline ListAddressResponse& operator=(const ListAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAddressResponse(ListAddressResponse&& from) noexcept
    : ListAddressResponse() {
    *this = ::std::move(from);
  }

  inline ListAddressResponse& operator=(ListAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ListAddressResponse*>(
               &_ListAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ListAddressResponse* other);
  friend void swap(ListAddressResponse& a, ListAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAddressResponse* New() const final {
    return CreateMaybeMessage<ListAddressResponse>(NULL);
  }

  ListAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAddressResponse& from);
  void MergeFrom(const ListAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ListAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ValidateAddressRequest) */ {
 public:
  ValidateAddressRequest();
  virtual ~ValidateAddressRequest();

  ValidateAddressRequest(const ValidateAddressRequest& from);

  inline ValidateAddressRequest& operator=(const ValidateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAddressRequest(ValidateAddressRequest&& from) noexcept
    : ValidateAddressRequest() {
    *this = ::std::move(from);
  }

  inline ValidateAddressRequest& operator=(ValidateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressRequest*>(
               &_ValidateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ValidateAddressRequest* other);
  friend void swap(ValidateAddressRequest& a, ValidateAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressRequest* New() const final {
    return CreateMaybeMessage<ValidateAddressRequest>(NULL);
  }

  ValidateAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAddressRequest& from);
  void MergeFrom(const ValidateAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ValidateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ValidateAddressResponse) */ {
 public:
  ValidateAddressResponse();
  virtual ~ValidateAddressResponse();

  ValidateAddressResponse(const ValidateAddressResponse& from);

  inline ValidateAddressResponse& operator=(const ValidateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAddressResponse(ValidateAddressResponse&& from) noexcept
    : ValidateAddressResponse() {
    *this = ::std::move(from);
  }

  inline ValidateAddressResponse& operator=(ValidateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressResponse*>(
               &_ValidateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ValidateAddressResponse* other);
  friend void swap(ValidateAddressResponse& a, ValidateAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressResponse* New() const final {
    return CreateMaybeMessage<ValidateAddressResponse>(NULL);
  }

  ValidateAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAddressResponse& from);
  void MergeFrom(const ValidateAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ValidateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetBalanceRequest) */ {
 public:
  GetBalanceRequest();
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBalanceRequest(GetBalanceRequest&& from) noexcept
    : GetBalanceRequest() {
    *this = ::std::move(from);
  }

  inline GetBalanceRequest& operator=(GetBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalanceRequest*>(
               &_GetBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GetBalanceRequest* other);
  friend void swap(GetBalanceRequest& a, GetBalanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const final {
    return CreateMaybeMessage<GetBalanceRequest>(NULL);
  }

  GetBalanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetBalanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetBalanceResponse) */ {
 public:
  GetBalanceResponse();
  virtual ~GetBalanceResponse();

  GetBalanceResponse(const GetBalanceResponse& from);

  inline GetBalanceResponse& operator=(const GetBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBalanceResponse(GetBalanceResponse&& from) noexcept
    : GetBalanceResponse() {
    *this = ::std::move(from);
  }

  inline GetBalanceResponse& operator=(GetBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetBalanceResponse*>(
               &_GetBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GetBalanceResponse* other);
  friend void swap(GetBalanceResponse& a, GetBalanceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceResponse* New() const final {
    return CreateMaybeMessage<GetBalanceResponse>(NULL);
  }

  GetBalanceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBalanceResponse& from);
  void MergeFrom(const GetBalanceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetBalanceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateRawTransactionRequest) */ {
 public:
  CreateRawTransactionRequest();
  virtual ~CreateRawTransactionRequest();

  CreateRawTransactionRequest(const CreateRawTransactionRequest& from);

  inline CreateRawTransactionRequest& operator=(const CreateRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRawTransactionRequest(CreateRawTransactionRequest&& from) noexcept
    : CreateRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionRequest& operator=(CreateRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionRequest*>(
               &_CreateRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CreateRawTransactionRequest* other);
  friend void swap(CreateRawTransactionRequest& a, CreateRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionRequest* New() const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(NULL);
  }

  CreateRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRawTransactionRequest& from);
  void MergeFrom(const CreateRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse) */ {
 public:
  CreateRawTransactionResponse();
  virtual ~CreateRawTransactionResponse();

  CreateRawTransactionResponse(const CreateRawTransactionResponse& from);

  inline CreateRawTransactionResponse& operator=(const CreateRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRawTransactionResponse(CreateRawTransactionResponse&& from) noexcept
    : CreateRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionResponse& operator=(CreateRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionResponse*>(
               &_CreateRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CreateRawTransactionResponse* other);
  friend void swap(CreateRawTransactionResponse& a, CreateRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionResponse* New() const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(NULL);
  }

  CreateRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRawTransactionResponse& from);
  void MergeFrom(const CreateRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SignRawTransactionRequest) */ {
 public:
  SignRawTransactionRequest();
  virtual ~SignRawTransactionRequest();

  SignRawTransactionRequest(const SignRawTransactionRequest& from);

  inline SignRawTransactionRequest& operator=(const SignRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignRawTransactionRequest(SignRawTransactionRequest&& from) noexcept
    : SignRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionRequest& operator=(SignRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionRequest*>(
               &_SignRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SignRawTransactionRequest* other);
  friend void swap(SignRawTransactionRequest& a, SignRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionRequest* New() const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(NULL);
  }

  SignRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignRawTransactionRequest& from);
  void MergeFrom(const SignRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SignRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SignRawTransactionResponse) */ {
 public:
  SignRawTransactionResponse();
  virtual ~SignRawTransactionResponse();

  SignRawTransactionResponse(const SignRawTransactionResponse& from);

  inline SignRawTransactionResponse& operator=(const SignRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignRawTransactionResponse(SignRawTransactionResponse&& from) noexcept
    : SignRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionResponse& operator=(SignRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionResponse*>(
               &_SignRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SignRawTransactionResponse* other);
  friend void swap(SignRawTransactionResponse& a, SignRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionResponse* New() const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(NULL);
  }

  SignRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignRawTransactionResponse& from);
  void MergeFrom(const SignRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SignRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.DecodeRawTransactionRequest) */ {
 public:
  DecodeRawTransactionRequest();
  virtual ~DecodeRawTransactionRequest();

  DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from);

  inline DecodeRawTransactionRequest& operator=(const DecodeRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecodeRawTransactionRequest(DecodeRawTransactionRequest&& from) noexcept
    : DecodeRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionRequest& operator=(DecodeRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionRequest*>(
               &_DecodeRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DecodeRawTransactionRequest* other);
  friend void swap(DecodeRawTransactionRequest& a, DecodeRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionRequest* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(NULL);
  }

  DecodeRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DecodeRawTransactionRequest& from);
  void MergeFrom(const DecodeRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.DecodeRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse) */ {
 public:
  DecodeRawTransactionResponse();
  virtual ~DecodeRawTransactionResponse();

  DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from);

  inline DecodeRawTransactionResponse& operator=(const DecodeRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecodeRawTransactionResponse(DecodeRawTransactionResponse&& from) noexcept
    : DecodeRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionResponse& operator=(DecodeRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionResponse*>(
               &_DecodeRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DecodeRawTransactionResponse* other);
  friend void swap(DecodeRawTransactionResponse& a, DecodeRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionResponse* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(NULL);
  }

  DecodeRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DecodeRawTransactionResponse& from);
  void MergeFrom(const DecodeRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.BroadcastRawTransactionRequest) */ {
 public:
  BroadcastRawTransactionRequest();
  virtual ~BroadcastRawTransactionRequest();

  BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from);

  inline BroadcastRawTransactionRequest& operator=(const BroadcastRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadcastRawTransactionRequest(BroadcastRawTransactionRequest&& from) noexcept
    : BroadcastRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionRequest& operator=(BroadcastRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionRequest*>(
               &_BroadcastRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(BroadcastRawTransactionRequest* other);
  friend void swap(BroadcastRawTransactionRequest& a, BroadcastRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionRequest* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(NULL);
  }

  BroadcastRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionRequest& from);
  void MergeFrom(const BroadcastRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse) */ {
 public:
  BroadcastRawTransactionResponse();
  virtual ~BroadcastRawTransactionResponse();

  BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from);

  inline BroadcastRawTransactionResponse& operator=(const BroadcastRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadcastRawTransactionResponse(BroadcastRawTransactionResponse&& from) noexcept
    : BroadcastRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionResponse& operator=(BroadcastRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionResponse*>(
               &_BroadcastRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(BroadcastRawTransactionResponse* other);
  friend void swap(BroadcastRawTransactionResponse& a, BroadcastRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionResponse* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(NULL);
  }

  BroadcastRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionResponse& from);
  void MergeFrom(const BroadcastRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendToRequest) */ {
 public:
  SendToRequest();
  virtual ~SendToRequest();

  SendToRequest(const SendToRequest& from);

  inline SendToRequest& operator=(const SendToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToRequest(SendToRequest&& from) noexcept
    : SendToRequest() {
    *this = ::std::move(from);
  }

  inline SendToRequest& operator=(SendToRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRequest*>(
               &_SendToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SendToRequest* other);
  friend void swap(SendToRequest& a, SendToRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToRequest* New() const final {
    return CreateMaybeMessage<SendToRequest>(NULL);
  }

  SendToRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToRequest& from);
  void MergeFrom(const SendToRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendToRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendToResponse) */ {
 public:
  SendToResponse();
  virtual ~SendToResponse();

  SendToResponse(const SendToResponse& from);

  inline SendToResponse& operator=(const SendToResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToResponse(SendToResponse&& from) noexcept
    : SendToResponse() {
    *this = ::std::move(from);
  }

  inline SendToResponse& operator=(SendToResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToResponse* internal_default_instance() {
    return reinterpret_cast<const SendToResponse*>(
               &_SendToResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(SendToResponse* other);
  friend void swap(SendToResponse& a, SendToResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToResponse* New() const final {
    return CreateMaybeMessage<SendToResponse>(NULL);
  }

  SendToResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToResponse& from);
  void MergeFrom(const SendToResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendToResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendToFromRequest) */ {
 public:
  SendToFromRequest();
  virtual ~SendToFromRequest();

  SendToFromRequest(const SendToFromRequest& from);

  inline SendToFromRequest& operator=(const SendToFromRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToFromRequest(SendToFromRequest&& from) noexcept
    : SendToFromRequest() {
    *this = ::std::move(from);
  }

  inline SendToFromRequest& operator=(SendToFromRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromRequest* internal_default_instance() {
    return reinterpret_cast<const SendToFromRequest*>(
               &_SendToFromRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SendToFromRequest* other);
  friend void swap(SendToFromRequest& a, SendToFromRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToFromRequest* New() const final {
    return CreateMaybeMessage<SendToFromRequest>(NULL);
  }

  SendToFromRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToFromRequest& from);
  void MergeFrom(const SendToFromRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendToFromRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendToFromResponse) */ {
 public:
  SendToFromResponse();
  virtual ~SendToFromResponse();

  SendToFromResponse(const SendToFromResponse& from);

  inline SendToFromResponse& operator=(const SendToFromResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToFromResponse(SendToFromResponse&& from) noexcept
    : SendToFromResponse() {
    *this = ::std::move(from);
  }

  inline SendToFromResponse& operator=(SendToFromResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromResponse* internal_default_instance() {
    return reinterpret_cast<const SendToFromResponse*>(
               &_SendToFromResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SendToFromResponse* other);
  friend void swap(SendToFromResponse& a, SendToFromResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToFromResponse* New() const final {
    return CreateMaybeMessage<SendToFromResponse>(NULL);
  }

  SendToFromResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToFromResponse& from);
  void MergeFrom(const SendToFromResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendToFromResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendManyRequest) */ {
 public:
  SendManyRequest();
  virtual ~SendManyRequest();

  SendManyRequest(const SendManyRequest& from);

  inline SendManyRequest& operator=(const SendManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendManyRequest(SendManyRequest&& from) noexcept
    : SendManyRequest() {
    *this = ::std::move(from);
  }

  inline SendManyRequest& operator=(SendManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendManyRequest*>(
               &_SendManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SendManyRequest* other);
  friend void swap(SendManyRequest& a, SendManyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendManyRequest* New() const final {
    return CreateMaybeMessage<SendManyRequest>(NULL);
  }

  SendManyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendManyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendManyRequest& from);
  void MergeFrom(const SendManyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendManyResponse) */ {
 public:
  SendManyResponse();
  virtual ~SendManyResponse();

  SendManyResponse(const SendManyResponse& from);

  inline SendManyResponse& operator=(const SendManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendManyResponse(SendManyResponse&& from) noexcept
    : SendManyResponse() {
    *this = ::std::move(from);
  }

  inline SendManyResponse& operator=(SendManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendManyResponse*>(
               &_SendManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(SendManyResponse* other);
  friend void swap(SendManyResponse& a, SendManyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendManyResponse* New() const final {
    return CreateMaybeMessage<SendManyResponse>(NULL);
  }

  SendManyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendManyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendManyResponse& from);
  void MergeFrom(const SendManyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendFromManyRequest) */ {
 public:
  SendFromManyRequest();
  virtual ~SendFromManyRequest();

  SendFromManyRequest(const SendFromManyRequest& from);

  inline SendFromManyRequest& operator=(const SendFromManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFromManyRequest(SendFromManyRequest&& from) noexcept
    : SendFromManyRequest() {
    *this = ::std::move(from);
  }

  inline SendFromManyRequest& operator=(SendFromManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendFromManyRequest*>(
               &_SendFromManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(SendFromManyRequest* other);
  friend void swap(SendFromManyRequest& a, SendFromManyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyRequest* New() const final {
    return CreateMaybeMessage<SendFromManyRequest>(NULL);
  }

  SendFromManyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendFromManyRequest& from);
  void MergeFrom(const SendFromManyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendFromManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SendFromManyResponse) */ {
 public:
  SendFromManyResponse();
  virtual ~SendFromManyResponse();

  SendFromManyResponse(const SendFromManyResponse& from);

  inline SendFromManyResponse& operator=(const SendFromManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFromManyResponse(SendFromManyResponse&& from) noexcept
    : SendFromManyResponse() {
    *this = ::std::move(from);
  }

  inline SendFromManyResponse& operator=(SendFromManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendFromManyResponse*>(
               &_SendFromManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(SendFromManyResponse* other);
  friend void swap(SendFromManyResponse& a, SendFromManyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyResponse* New() const final {
    return CreateMaybeMessage<SendFromManyResponse>(NULL);
  }

  SendFromManyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendFromManyResponse& from);
  void MergeFrom(const SendFromManyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SendFromManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.AddNodeRequest) */ {
 public:
  AddNodeRequest();
  virtual ~AddNodeRequest();

  AddNodeRequest(const AddNodeRequest& from);

  inline AddNodeRequest& operator=(const AddNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNodeRequest(AddNodeRequest&& from) noexcept
    : AddNodeRequest() {
    *this = ::std::move(from);
  }

  inline AddNodeRequest& operator=(AddNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodeRequest*>(
               &_AddNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(AddNodeRequest* other);
  friend void swap(AddNodeRequest& a, AddNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNodeRequest* New() const final {
    return CreateMaybeMessage<AddNodeRequest>(NULL);
  }

  AddNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddNodeRequest& from);
  void MergeFrom(const AddNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.AddNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.AddNodeResponse) */ {
 public:
  AddNodeResponse();
  virtual ~AddNodeResponse();

  AddNodeResponse(const AddNodeResponse& from);

  inline AddNodeResponse& operator=(const AddNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNodeResponse(AddNodeResponse&& from) noexcept
    : AddNodeResponse() {
    *this = ::std::move(from);
  }

  inline AddNodeResponse& operator=(AddNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodeResponse*>(
               &_AddNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(AddNodeResponse* other);
  friend void swap(AddNodeResponse& a, AddNodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNodeResponse* New() const final {
    return CreateMaybeMessage<AddNodeResponse>(NULL);
  }

  AddNodeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddNodeResponse& from);
  void MergeFrom(const AddNodeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.AddNodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetPeerListRequest) */ {
 public:
  GetPeerListRequest();
  virtual ~GetPeerListRequest();

  GetPeerListRequest(const GetPeerListRequest& from);

  inline GetPeerListRequest& operator=(const GetPeerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerListRequest(GetPeerListRequest&& from) noexcept
    : GetPeerListRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerListRequest& operator=(GetPeerListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerListRequest*>(
               &_GetPeerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(GetPeerListRequest* other);
  friend void swap(GetPeerListRequest& a, GetPeerListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListRequest* New() const final {
    return CreateMaybeMessage<GetPeerListRequest>(NULL);
  }

  GetPeerListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerListRequest& from);
  void MergeFrom(const GetPeerListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetPeerListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetPeerListResponse) */ {
 public:
  GetPeerListResponse();
  virtual ~GetPeerListResponse();

  GetPeerListResponse(const GetPeerListResponse& from);

  inline GetPeerListResponse& operator=(const GetPeerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerListResponse(GetPeerListResponse&& from) noexcept
    : GetPeerListResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerListResponse& operator=(GetPeerListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerListResponse*>(
               &_GetPeerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(GetPeerListResponse* other);
  friend void swap(GetPeerListResponse& a, GetPeerListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListResponse* New() const final {
    return CreateMaybeMessage<GetPeerListResponse>(NULL);
  }

  GetPeerListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerListResponse& from);
  void MergeFrom(const GetPeerListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetPeerListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetPeerInfoRequest) */ {
 public:
  GetPeerInfoRequest();
  virtual ~GetPeerInfoRequest();

  GetPeerInfoRequest(const GetPeerInfoRequest& from);

  inline GetPeerInfoRequest& operator=(const GetPeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoRequest(GetPeerInfoRequest&& from) noexcept
    : GetPeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoRequest& operator=(GetPeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoRequest*>(
               &_GetPeerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(GetPeerInfoRequest* other);
  friend void swap(GetPeerInfoRequest& a, GetPeerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoRequest* New() const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(NULL);
  }

  GetPeerInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerInfoRequest& from);
  void MergeFrom(const GetPeerInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetPeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetPeerInfoResponse) */ {
 public:
  GetPeerInfoResponse();
  virtual ~GetPeerInfoResponse();

  GetPeerInfoResponse(const GetPeerInfoResponse& from);

  inline GetPeerInfoResponse& operator=(const GetPeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoResponse(GetPeerInfoResponse&& from) noexcept
    : GetPeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoResponse& operator=(GetPeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoResponse*>(
               &_GetPeerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(GetPeerInfoResponse* other);
  friend void swap(GetPeerInfoResponse& a, GetPeerInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoResponse* New() const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(NULL);
  }

  GetPeerInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerInfoResponse& from);
  void MergeFrom(const GetPeerInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetPeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetConnectionCountRequest) */ {
 public:
  GetConnectionCountRequest();
  virtual ~GetConnectionCountRequest();

  GetConnectionCountRequest(const GetConnectionCountRequest& from);

  inline GetConnectionCountRequest& operator=(const GetConnectionCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnectionCountRequest(GetConnectionCountRequest&& from) noexcept
    : GetConnectionCountRequest() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountRequest& operator=(GetConnectionCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountRequest*>(
               &_GetConnectionCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(GetConnectionCountRequest* other);
  friend void swap(GetConnectionCountRequest& a, GetConnectionCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountRequest* New() const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(NULL);
  }

  GetConnectionCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetConnectionCountRequest& from);
  void MergeFrom(const GetConnectionCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetConnectionCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetConnectionCountResponse) */ {
 public:
  GetConnectionCountResponse();
  virtual ~GetConnectionCountResponse();

  GetConnectionCountResponse(const GetConnectionCountResponse& from);

  inline GetConnectionCountResponse& operator=(const GetConnectionCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnectionCountResponse(GetConnectionCountResponse&& from) noexcept
    : GetConnectionCountResponse() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountResponse& operator=(GetConnectionCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountResponse*>(
               &_GetConnectionCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(GetConnectionCountResponse* other);
  friend void swap(GetConnectionCountResponse& a, GetConnectionCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountResponse* New() const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(NULL);
  }

  GetConnectionCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetConnectionCountResponse& from);
  void MergeFrom(const GetConnectionCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetConnectionCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetDeltaRequest) */ {
 public:
  GetDeltaRequest();
  virtual ~GetDeltaRequest();

  GetDeltaRequest(const GetDeltaRequest& from);

  inline GetDeltaRequest& operator=(const GetDeltaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeltaRequest(GetDeltaRequest&& from) noexcept
    : GetDeltaRequest() {
    *this = ::std::move(from);
  }

  inline GetDeltaRequest& operator=(GetDeltaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeltaRequest*>(
               &_GetDeltaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(GetDeltaRequest* other);
  friend void swap(GetDeltaRequest& a, GetDeltaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaRequest* New() const final {
    return CreateMaybeMessage<GetDeltaRequest>(NULL);
  }

  GetDeltaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDeltaRequest& from);
  void MergeFrom(const GetDeltaRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetDeltaRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetDeltaResponse) */ {
 public:
  GetDeltaResponse();
  virtual ~GetDeltaResponse();

  GetDeltaResponse(const GetDeltaResponse& from);

  inline GetDeltaResponse& operator=(const GetDeltaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeltaResponse(GetDeltaResponse&& from) noexcept
    : GetDeltaResponse() {
    *this = ::std::move(from);
  }

  inline GetDeltaResponse& operator=(GetDeltaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeltaResponse*>(
               &_GetDeltaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(GetDeltaResponse* other);
  friend void swap(GetDeltaResponse& a, GetDeltaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaResponse* New() const final {
    return CreateMaybeMessage<GetDeltaResponse>(NULL);
  }

  GetDeltaResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDeltaResponse& from);
  void MergeFrom(const GetDeltaResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetDeltaResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetMempoolRequest) */ {
 public:
  GetMempoolRequest();
  virtual ~GetMempoolRequest();

  GetMempoolRequest(const GetMempoolRequest& from);

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMempoolRequest(GetMempoolRequest&& from) noexcept
    : GetMempoolRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolRequest& operator=(GetMempoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(GetMempoolRequest* other);
  friend void swap(GetMempoolRequest& a, GetMempoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const final {
    return CreateMaybeMessage<GetMempoolRequest>(NULL);
  }

  GetMempoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetMempoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.GetMempoolResponse) */ {
 public:
  GetMempoolResponse();
  virtual ~GetMempoolResponse();

  GetMempoolResponse(const GetMempoolResponse& from);

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMempoolResponse(GetMempoolResponse&& from) noexcept
    : GetMempoolResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse& operator=(GetMempoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(GetMempoolResponse* other);
  friend void swap(GetMempoolResponse& a, GetMempoolResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const final {
    return CreateMaybeMessage<GetMempoolResponse>(NULL);
  }

  GetMempoolResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.GetMempoolResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SignMessageRequest) */ {
 public:
  SignMessageRequest();
  virtual ~SignMessageRequest();

  SignMessageRequest(const SignMessageRequest& from);

  inline SignMessageRequest& operator=(const SignMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignMessageRequest(SignMessageRequest&& from) noexcept
    : SignMessageRequest() {
    *this = ::std::move(from);
  }

  inline SignMessageRequest& operator=(SignMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SignMessageRequest*>(
               &_SignMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(SignMessageRequest* other);
  friend void swap(SignMessageRequest& a, SignMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignMessageRequest* New() const final {
    return CreateMaybeMessage<SignMessageRequest>(NULL);
  }

  SignMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignMessageRequest& from);
  void MergeFrom(const SignMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SignMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.SignMessageResponse) */ {
 public:
  SignMessageResponse();
  virtual ~SignMessageResponse();

  SignMessageResponse(const SignMessageResponse& from);

  inline SignMessageResponse& operator=(const SignMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignMessageResponse(SignMessageResponse&& from) noexcept
    : SignMessageResponse() {
    *this = ::std::move(from);
  }

  inline SignMessageResponse& operator=(SignMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SignMessageResponse*>(
               &_SignMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(SignMessageResponse* other);
  friend void swap(SignMessageResponse& a, SignMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignMessageResponse* New() const final {
    return CreateMaybeMessage<SignMessageResponse>(NULL);
  }

  SignMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignMessageResponse& from);
  void MergeFrom(const SignMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.SignMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.VerifyMessageRequest) */ {
 public:
  VerifyMessageRequest();
  virtual ~VerifyMessageRequest();

  VerifyMessageRequest(const VerifyMessageRequest& from);

  inline VerifyMessageRequest& operator=(const VerifyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyMessageRequest(VerifyMessageRequest&& from) noexcept
    : VerifyMessageRequest() {
    *this = ::std::move(from);
  }

  inline VerifyMessageRequest& operator=(VerifyMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageRequest*>(
               &_VerifyMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(VerifyMessageRequest* other);
  friend void swap(VerifyMessageRequest& a, VerifyMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageRequest* New() const final {
    return CreateMaybeMessage<VerifyMessageRequest>(NULL);
  }

  VerifyMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyMessageRequest& from);
  void MergeFrom(const VerifyMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.VerifyMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.VerifyMessageResponse) */ {
 public:
  VerifyMessageResponse();
  virtual ~VerifyMessageResponse();

  VerifyMessageResponse(const VerifyMessageResponse& from);

  inline VerifyMessageResponse& operator=(const VerifyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyMessageResponse(VerifyMessageResponse&& from) noexcept
    : VerifyMessageResponse() {
    *this = ::std::move(from);
  }

  inline VerifyMessageResponse& operator=(VerifyMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageResponse*>(
               &_VerifyMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(VerifyMessageResponse* other);
  friend void swap(VerifyMessageResponse& a, VerifyMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageResponse* New() const final {
    return CreateMaybeMessage<VerifyMessageResponse>(NULL);
  }

  VerifyMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyMessageResponse& from);
  void MergeFrom(const VerifyMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.VerifyMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ServiceStatusRequest) */ {
 public:
  ServiceStatusRequest();
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(ServiceStatusRequest* other);
  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const final {
    return CreateMaybeMessage<ServiceStatusRequest>(NULL);
  }

  ServiceStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ServiceStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Rpc.Node.ServiceStatusResponse) */ {
 public:
  ServiceStatusResponse();
  virtual ~ServiceStatusResponse();

  ServiceStatusResponse(const ServiceStatusResponse& from);

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceStatusResponse(ServiceStatusResponse&& from) noexcept
    : ServiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse& operator=(ServiceStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(ServiceStatusResponse* other);
  friend void swap(ServiceStatusResponse& a, ServiceStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusResponse* New() const final {
    return CreateMaybeMessage<ServiceStatusResponse>(NULL);
  }

  ServiceStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceStatusResponse& from);
  void MergeFrom(const ServiceStatusResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Rpc.Node.ServiceStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingRequest

// string ping = 1;
inline void PingRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.PingRequest.ping)
  return ping_.GetNoArena();
}
inline void PingRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.PingRequest.ping)
}
#if LANG_CXX11
inline void PingRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.PingRequest.ping)
}
#endif
inline void PingRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.PingRequest.ping)
}
inline void PingRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.PingRequest.ping)
}
inline ::std::string* PingRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.PingRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.PingRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.PingRequest.ping)
}

// -------------------------------------------------------------------

// PongResponse

// string pong = 2;
inline void PongResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PongResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.PongResponse.pong)
  return pong_.GetNoArena();
}
inline void PongResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.PongResponse.pong)
}
#if LANG_CXX11
inline void PongResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.PongResponse.pong)
}
#endif
inline void PongResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.PongResponse.pong)
}
inline void PongResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.PongResponse.pong)
}
inline ::std::string* PongResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.PongResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PongResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.PongResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PongResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.PongResponse.pong)
}

// -------------------------------------------------------------------

// VersionRequest

// bool query = 1;
inline void VersionRequest::clear_query() {
  query_ = false;
}
inline bool VersionRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.VersionRequest.query)
  return query_;
}
inline void VersionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.VersionRequest.query)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.VersionResponse.version)
  return version_.GetNoArena();
}
inline void VersionResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.VersionResponse.version)
}
#if LANG_CXX11
inline void VersionResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.VersionResponse.version)
}
#endif
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.VersionResponse.version)
}
inline ::std::string* VersionResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.VersionResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.VersionResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.VersionResponse.version)
}

// -------------------------------------------------------------------

// GetInfoRequest

// bool query = 1;
inline void GetInfoRequest::clear_query() {
  query_ = false;
}
inline bool GetInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetInfoRequest.query)
  return query_;
}
inline void GetInfoRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetInfoRequest.query)
}

// -------------------------------------------------------------------

// GetInfoResponse

// string query = 1;
inline void GetInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.GetNoArena();
}
inline void GetInfoResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
}
#if LANG_CXX11
inline void GetInfoResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
}
#endif
inline void GetInfoResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline void GetInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline ::std::string* GetInfoResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetInfoResponse.query)
}

// -------------------------------------------------------------------

// CreateWalletRequest

// bool query = 1;
inline void CreateWalletRequest::clear_query() {
  query_ = false;
}
inline bool CreateWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateWalletRequest.query)
  return query_;
}
inline void CreateWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateWalletRequest.query)
}

// -------------------------------------------------------------------

// CreateWalletResponse

// string query = 1;
inline void CreateWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.GetNoArena();
}
inline void CreateWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#if LANG_CXX11
inline void CreateWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#endif
inline void CreateWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline void CreateWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline ::std::string* CreateWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.CreateWalletResponse.query)
}

// -------------------------------------------------------------------

// ListWalletRequest

// bool query = 1;
inline void ListWalletRequest::clear_query() {
  query_ = false;
}
inline bool ListWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ListWalletRequest.query)
  return query_;
}
inline void ListWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ListWalletRequest.query)
}

// -------------------------------------------------------------------

// ListWalletResponse

// string query = 1;
inline void ListWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.GetNoArena();
}
inline void ListWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
}
#if LANG_CXX11
inline void ListWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
}
#endif
inline void ListWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline void ListWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline ::std::string* ListWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.ListWalletResponse.query)
}

// -------------------------------------------------------------------

// CreateAddressRequest

// bool query = 1;
inline void CreateAddressRequest::clear_query() {
  query_ = false;
}
inline bool CreateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateAddressRequest.query)
  return query_;
}
inline void CreateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateAddressRequest.query)
}

// -------------------------------------------------------------------

// CreateAddressResponse

// string query = 1;
inline void CreateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.GetNoArena();
}
inline void CreateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#if LANG_CXX11
inline void CreateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#endif
inline void CreateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline void CreateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline ::std::string* CreateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.CreateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetAddressRequest

// bool query = 1;
inline void GetAddressRequest::clear_query() {
  query_ = false;
}
inline bool GetAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetAddressRequest.query)
  return query_;
}
inline void GetAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetAddressRequest.query)
}

// -------------------------------------------------------------------

// GetAddressResponse

// string query = 1;
inline void GetAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.GetNoArena();
}
inline void GetAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
}
#if LANG_CXX11
inline void GetAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
}
#endif
inline void GetAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline void GetAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline ::std::string* GetAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetAddressResponse.query)
}

// -------------------------------------------------------------------

// ListAddressRequest

// bool query = 1;
inline void ListAddressRequest::clear_query() {
  query_ = false;
}
inline bool ListAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ListAddressRequest.query)
  return query_;
}
inline void ListAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ListAddressRequest.query)
}

// -------------------------------------------------------------------

// ListAddressResponse

// string query = 1;
inline void ListAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.GetNoArena();
}
inline void ListAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
}
#if LANG_CXX11
inline void ListAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
}
#endif
inline void ListAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline void ListAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline ::std::string* ListAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.ListAddressResponse.query)
}

// -------------------------------------------------------------------

// ValidateAddressRequest

// bool query = 1;
inline void ValidateAddressRequest::clear_query() {
  query_ = false;
}
inline bool ValidateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ValidateAddressRequest.query)
  return query_;
}
inline void ValidateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ValidateAddressRequest.query)
}

// -------------------------------------------------------------------

// ValidateAddressResponse

// string query = 1;
inline void ValidateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.GetNoArena();
}
inline void ValidateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#if LANG_CXX11
inline void ValidateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#endif
inline void ValidateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline void ValidateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline ::std::string* ValidateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.ValidateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetBalanceRequest

// bool query = 1;
inline void GetBalanceRequest::clear_query() {
  query_ = false;
}
inline bool GetBalanceRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetBalanceRequest.query)
  return query_;
}
inline void GetBalanceRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetBalanceRequest.query)
}

// -------------------------------------------------------------------

// GetBalanceResponse

// string query = 1;
inline void GetBalanceResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.GetNoArena();
}
inline void GetBalanceResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#if LANG_CXX11
inline void GetBalanceResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#endif
inline void GetBalanceResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline void GetBalanceResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline ::std::string* GetBalanceResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetBalanceResponse.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionRequest

// bool query = 1;
inline void CreateRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool CreateRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
  return query_;
}
inline void CreateRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionResponse

// string query = 1;
inline void CreateRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void CreateRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#if LANG_CXX11
inline void CreateRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#endif
inline void CreateRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline void CreateRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline ::std::string* CreateRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// SignRawTransactionRequest

// bool query = 1;
inline void SignRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool SignRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SignRawTransactionRequest.query)
  return query_;
}
inline void SignRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SignRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// SignRawTransactionResponse

// string query = 1;
inline void SignRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void SignRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#if LANG_CXX11
inline void SignRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#endif
inline void SignRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline void SignRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline ::std::string* SignRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionRequest

// bool query = 1;
inline void DecodeRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool DecodeRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
  return query_;
}
inline void DecodeRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionResponse

// string query = 1;
inline void DecodeRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecodeRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void DecodeRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#if LANG_CXX11
inline void DecodeRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#endif
inline void DecodeRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline void DecodeRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline ::std::string* DecodeRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecodeRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecodeRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionRequest

// bool query = 1;
inline void BroadcastRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool BroadcastRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.BroadcastRawTransactionRequest.query)
  return query_;
}
inline void BroadcastRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.BroadcastRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionResponse

// string query = 1;
inline void BroadcastRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BroadcastRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void BroadcastRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
}
#if LANG_CXX11
inline void BroadcastRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
}
#endif
inline void BroadcastRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
}
inline void BroadcastRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
}
inline ::std::string* BroadcastRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BroadcastRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.BroadcastRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// SendToRequest

// bool query = 1;
inline void SendToRequest::clear_query() {
  query_ = false;
}
inline bool SendToRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendToRequest.query)
  return query_;
}
inline void SendToRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendToRequest.query)
}

// -------------------------------------------------------------------

// SendToResponse

// string query = 1;
inline void SendToResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendToResponse.query)
  return query_.GetNoArena();
}
inline void SendToResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendToResponse.query)
}
#if LANG_CXX11
inline void SendToResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SendToResponse.query)
}
#endif
inline void SendToResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SendToResponse.query)
}
inline void SendToResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SendToResponse.query)
}
inline ::std::string* SendToResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SendToResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SendToResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SendToResponse.query)
}

// -------------------------------------------------------------------

// SendToFromRequest

// bool query = 1;
inline void SendToFromRequest::clear_query() {
  query_ = false;
}
inline bool SendToFromRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendToFromRequest.query)
  return query_;
}
inline void SendToFromRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendToFromRequest.query)
}

// -------------------------------------------------------------------

// SendToFromResponse

// string query = 1;
inline void SendToFromResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToFromResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.GetNoArena();
}
inline void SendToFromResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
}
#if LANG_CXX11
inline void SendToFromResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
}
#endif
inline void SendToFromResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline void SendToFromResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline ::std::string* SendToFromResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToFromResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToFromResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SendToFromResponse.query)
}

// -------------------------------------------------------------------

// SendManyRequest

// bool query = 1;
inline void SendManyRequest::clear_query() {
  query_ = false;
}
inline bool SendManyRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendManyRequest.query)
  return query_;
}
inline void SendManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendManyRequest.query)
}

// -------------------------------------------------------------------

// SendManyResponse

// string query = 1;
inline void SendManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendManyResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.GetNoArena();
}
inline void SendManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendManyResponse.query)
}
#if LANG_CXX11
inline void SendManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SendManyResponse.query)
}
#endif
inline void SendManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SendManyResponse.query)
}
inline void SendManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SendManyResponse.query)
}
inline ::std::string* SendManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SendManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SendManyResponse.query)
}

// -------------------------------------------------------------------

// SendFromManyRequest

// bool query = 1;
inline void SendFromManyRequest::clear_query() {
  query_ = false;
}
inline bool SendFromManyRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendFromManyRequest.query)
  return query_;
}
inline void SendFromManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendFromManyRequest.query)
}

// -------------------------------------------------------------------

// SendFromManyResponse

// string query = 1;
inline void SendFromManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFromManyResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.GetNoArena();
}
inline void SendFromManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#if LANG_CXX11
inline void SendFromManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#endif
inline void SendFromManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline void SendFromManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline ::std::string* SendFromManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFromManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFromManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SendFromManyResponse.query)
}

// -------------------------------------------------------------------

// AddNodeRequest

// bool query = 1;
inline void AddNodeRequest::clear_query() {
  query_ = false;
}
inline bool AddNodeRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.AddNodeRequest.query)
  return query_;
}
inline void AddNodeRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.AddNodeRequest.query)
}

// -------------------------------------------------------------------

// AddNodeResponse

// string query = 1;
inline void AddNodeResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNodeResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.GetNoArena();
}
inline void AddNodeResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
}
#if LANG_CXX11
inline void AddNodeResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
}
#endif
inline void AddNodeResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline void AddNodeResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline ::std::string* AddNodeResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNodeResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNodeResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.AddNodeResponse.query)
}

// -------------------------------------------------------------------

// GetPeerListRequest

// bool query = 1;
inline void GetPeerListRequest::clear_query() {
  query_ = false;
}
inline bool GetPeerListRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetPeerListRequest.query)
  return query_;
}
inline void GetPeerListRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetPeerListRequest.query)
}

// -------------------------------------------------------------------

// GetPeerListResponse

// string query = 1;
inline void GetPeerListResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerListResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
  return query_.GetNoArena();
}
inline void GetPeerListResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
}
#if LANG_CXX11
inline void GetPeerListResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
}
#endif
inline void GetPeerListResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
}
inline void GetPeerListResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
}
inline ::std::string* GetPeerListResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerListResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerListResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetPeerListResponse.query)
}

// -------------------------------------------------------------------

// GetPeerInfoRequest

// bool query = 1;
inline void GetPeerInfoRequest::clear_query() {
  query_ = false;
}
inline bool GetPeerInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetPeerInfoRequest.query)
  return query_;
}
inline void GetPeerInfoRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetPeerInfoRequest.query)
}

// -------------------------------------------------------------------

// GetPeerInfoResponse

// string query = 1;
inline void GetPeerInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
  return query_.GetNoArena();
}
inline void GetPeerInfoResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
}
#if LANG_CXX11
inline void GetPeerInfoResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
}
#endif
inline void GetPeerInfoResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
}
inline void GetPeerInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
}
inline ::std::string* GetPeerInfoResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetPeerInfoResponse.query)
}

// -------------------------------------------------------------------

// GetConnectionCountRequest

// bool query = 1;
inline void GetConnectionCountRequest::clear_query() {
  query_ = false;
}
inline bool GetConnectionCountRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetConnectionCountRequest.query)
  return query_;
}
inline void GetConnectionCountRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetConnectionCountRequest.query)
}

// -------------------------------------------------------------------

// GetConnectionCountResponse

// string query = 1;
inline void GetConnectionCountResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetConnectionCountResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.GetNoArena();
}
inline void GetConnectionCountResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#if LANG_CXX11
inline void GetConnectionCountResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#endif
inline void GetConnectionCountResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline void GetConnectionCountResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline ::std::string* GetConnectionCountResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectionCountResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectionCountResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}

// -------------------------------------------------------------------

// GetDeltaRequest

// bool query = 1;
inline void GetDeltaRequest::clear_query() {
  query_ = false;
}
inline bool GetDeltaRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetDeltaRequest.query)
  return query_;
}
inline void GetDeltaRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetDeltaRequest.query)
}

// -------------------------------------------------------------------

// GetDeltaResponse

// string query = 1;
inline void GetDeltaResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeltaResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
  return query_.GetNoArena();
}
inline void GetDeltaResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
}
#if LANG_CXX11
inline void GetDeltaResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
}
#endif
inline void GetDeltaResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
}
inline void GetDeltaResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
}
inline ::std::string* GetDeltaResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeltaResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeltaResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetDeltaResponse.query)
}

// -------------------------------------------------------------------

// GetMempoolRequest

// bool query = 1;
inline void GetMempoolRequest::clear_query() {
  query_ = false;
}
inline bool GetMempoolRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetMempoolRequest.query)
  return query_;
}
inline void GetMempoolRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetMempoolRequest.query)
}

// -------------------------------------------------------------------

// GetMempoolResponse

// string query = 1;
inline void GetMempoolResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMempoolResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
  return query_.GetNoArena();
}
inline void GetMempoolResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
}
#if LANG_CXX11
inline void GetMempoolResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
}
#endif
inline void GetMempoolResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
}
inline void GetMempoolResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
}
inline ::std::string* GetMempoolResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMempoolResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMempoolResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.GetMempoolResponse.query)
}

// -------------------------------------------------------------------

// SignMessageRequest

// bool query = 1;
inline void SignMessageRequest::clear_query() {
  query_ = false;
}
inline bool SignMessageRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SignMessageRequest.query)
  return query_;
}
inline void SignMessageRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SignMessageRequest.query)
}

// -------------------------------------------------------------------

// SignMessageResponse

// string query = 1;
inline void SignMessageResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
  return query_.GetNoArena();
}
inline void SignMessageResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
}
#if LANG_CXX11
inline void SignMessageResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
}
#endif
inline void SignMessageResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
}
inline void SignMessageResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
}
inline ::std::string* SignMessageResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.SignMessageResponse.query)
}

// -------------------------------------------------------------------

// VerifyMessageRequest

// bool query = 1;
inline void VerifyMessageRequest::clear_query() {
  query_ = false;
}
inline bool VerifyMessageRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.VerifyMessageRequest.query)
  return query_;
}
inline void VerifyMessageRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.VerifyMessageRequest.query)
}

// -------------------------------------------------------------------

// VerifyMessageResponse

// string query = 1;
inline void VerifyMessageResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
  return query_.GetNoArena();
}
inline void VerifyMessageResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
}
#if LANG_CXX11
inline void VerifyMessageResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
}
#endif
inline void VerifyMessageResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
}
inline void VerifyMessageResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
}
inline ::std::string* VerifyMessageResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.VerifyMessageResponse.query)
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// bool query = 1;
inline void ServiceStatusRequest::clear_query() {
  query_ = false;
}
inline bool ServiceStatusRequest::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ServiceStatusRequest.query)
  return query_;
}
inline void ServiceStatusRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ServiceStatusRequest.query)
}

// -------------------------------------------------------------------

// ServiceStatusResponse

// string query = 1;
inline void ServiceStatusResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceStatusResponse::query() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.GetNoArena();
}
inline void ServiceStatusResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#if LANG_CXX11
inline void ServiceStatusResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#endif
inline void ServiceStatusResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline void ServiceStatusResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline ::std::string* ServiceStatusResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceStatusResponse::release_query() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceStatusResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Rpc.Node.ServiceStatusResponse.query)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace ADL

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Rpc_2eproto
