// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mempool.proto

#ifndef PROTOBUF_INCLUDED_Mempool_2eproto
#define PROTOBUF_INCLUDED_Mempool_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Mempool_2eproto 

namespace protobuf_Mempool_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Mempool_2eproto
namespace ADL {
namespace Protocols {
namespace Mempool {
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Tx;
class TxDefaultTypeInternal;
extern TxDefaultTypeInternal _Tx_default_instance_;
class Tx_Timestamp;
class Tx_TimestampDefaultTypeInternal;
extern Tx_TimestampDefaultTypeInternal _Tx_Timestamp_default_instance_;
}  // namespace Mempool
}  // namespace Protocols
}  // namespace ADL
namespace google {
namespace protobuf {
template<> ::ADL::Protocols::Mempool::Key* Arena::CreateMaybeMessage<::ADL::Protocols::Mempool::Key>(Arena*);
template<> ::ADL::Protocols::Mempool::Tx* Arena::CreateMaybeMessage<::ADL::Protocols::Mempool::Tx>(Arena*);
template<> ::ADL::Protocols::Mempool::Tx_Timestamp* Arena::CreateMaybeMessage<::ADL::Protocols::Mempool::Tx_Timestamp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ADL {
namespace Protocols {
namespace Mempool {

// ===================================================================

class Tx_Timestamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocols.Mempool.Tx.Timestamp) */ {
 public:
  Tx_Timestamp();
  virtual ~Tx_Timestamp();

  Tx_Timestamp(const Tx_Timestamp& from);

  inline Tx_Timestamp& operator=(const Tx_Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tx_Timestamp(Tx_Timestamp&& from) noexcept
    : Tx_Timestamp() {
    *this = ::std::move(from);
  }

  inline Tx_Timestamp& operator=(Tx_Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tx_Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tx_Timestamp* internal_default_instance() {
    return reinterpret_cast<const Tx_Timestamp*>(
               &_Tx_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Tx_Timestamp* other);
  friend void swap(Tx_Timestamp& a, Tx_Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tx_Timestamp* New() const final {
    return CreateMaybeMessage<Tx_Timestamp>(NULL);
  }

  Tx_Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tx_Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tx_Timestamp& from);
  void MergeFrom(const Tx_Timestamp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tx_Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 seconds = 1;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::int64 seconds() const;
  void set_seconds(::google::protobuf::int64 value);

  // int32 nanos = 2;
  void clear_nanos();
  static const int kNanosFieldNumber = 2;
  ::google::protobuf::int32 nanos() const;
  void set_nanos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ADL.Protocols.Mempool.Tx.Timestamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::int32 nanos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Mempool_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocols.Mempool.Tx) */ {
 public:
  Tx();
  virtual ~Tx();

  Tx(const Tx& from);

  inline Tx& operator=(const Tx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tx(Tx&& from) noexcept
    : Tx() {
    *this = ::std::move(from);
  }

  inline Tx& operator=(Tx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tx* internal_default_instance() {
    return reinterpret_cast<const Tx*>(
               &_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Tx* other);
  friend void swap(Tx& a, Tx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tx* New() const final {
    return CreateMaybeMessage<Tx>(NULL);
  }

  Tx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tx& from);
  void MergeFrom(const Tx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Tx_Timestamp Timestamp;

  // accessors -------------------------------------------------------

  // string addressSource = 1;
  void clear_addresssource();
  static const int kAddressSourceFieldNumber = 1;
  const ::std::string& addresssource() const;
  void set_addresssource(const ::std::string& value);
  #if LANG_CXX11
  void set_addresssource(::std::string&& value);
  #endif
  void set_addresssource(const char* value);
  void set_addresssource(const char* value, size_t size);
  ::std::string* mutable_addresssource();
  ::std::string* release_addresssource();
  void set_allocated_addresssource(::std::string* addresssource);

  // string addressDest = 2;
  void clear_addressdest();
  static const int kAddressDestFieldNumber = 2;
  const ::std::string& addressdest() const;
  void set_addressdest(const ::std::string& value);
  #if LANG_CXX11
  void set_addressdest(::std::string&& value);
  #endif
  void set_addressdest(const char* value);
  void set_addressdest(const char* value, size_t size);
  ::std::string* mutable_addressdest();
  ::std::string* release_addressdest();
  void set_allocated_addressdest(::std::string* addressdest);

  // string signature = 3;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // string inputAction = 7;
  void clear_inputaction();
  static const int kInputActionFieldNumber = 7;
  const ::std::string& inputaction() const;
  void set_inputaction(const ::std::string& value);
  #if LANG_CXX11
  void set_inputaction(::std::string&& value);
  #endif
  void set_inputaction(const char* value);
  void set_inputaction(const char* value, size_t size);
  ::std::string* mutable_inputaction();
  ::std::string* release_inputaction();
  void set_allocated_inputaction(::std::string* inputaction);

  // string unlockScript = 8;
  void clear_unlockscript();
  static const int kUnlockScriptFieldNumber = 8;
  const ::std::string& unlockscript() const;
  void set_unlockscript(const ::std::string& value);
  #if LANG_CXX11
  void set_unlockscript(::std::string&& value);
  #endif
  void set_unlockscript(const char* value);
  void set_unlockscript(const char* value, size_t size);
  ::std::string* mutable_unlockscript();
  ::std::string* release_unlockscript();
  void set_allocated_unlockscript(::std::string* unlockscript);

  // string unlockingProgram = 9;
  void clear_unlockingprogram();
  static const int kUnlockingProgramFieldNumber = 9;
  const ::std::string& unlockingprogram() const;
  void set_unlockingprogram(const ::std::string& value);
  #if LANG_CXX11
  void set_unlockingprogram(::std::string&& value);
  #endif
  void set_unlockingprogram(const char* value);
  void set_unlockingprogram(const char* value, size_t size);
  ::std::string* mutable_unlockingprogram();
  ::std::string* release_unlockingprogram();
  void set_allocated_unlockingprogram(::std::string* unlockingprogram);

  // .ADL.Protocols.Mempool.Tx.Timestamp updated = 10;
  bool has_updated() const;
  void clear_updated();
  static const int kUpdatedFieldNumber = 10;
  private:
  const ::ADL::Protocols::Mempool::Tx_Timestamp& _internal_updated() const;
  public:
  const ::ADL::Protocols::Mempool::Tx_Timestamp& updated() const;
  ::ADL::Protocols::Mempool::Tx_Timestamp* release_updated();
  ::ADL::Protocols::Mempool::Tx_Timestamp* mutable_updated();
  void set_allocated_updated(::ADL::Protocols::Mempool::Tx_Timestamp* updated);

  // fixed32 amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::uint32 amount() const;
  void set_amount(::google::protobuf::uint32 value);

  // fixed32 fee = 5;
  void clear_fee();
  static const int kFeeFieldNumber = 5;
  ::google::protobuf::uint32 fee() const;
  void set_fee(::google::protobuf::uint32 value);

  // fixed32 outputAmount = 6;
  void clear_outputamount();
  static const int kOutputAmountFieldNumber = 6;
  ::google::protobuf::uint32 outputamount() const;
  void set_outputamount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ADL.Protocols.Mempool.Tx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addresssource_;
  ::google::protobuf::internal::ArenaStringPtr addressdest_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr inputaction_;
  ::google::protobuf::internal::ArenaStringPtr unlockscript_;
  ::google::protobuf::internal::ArenaStringPtr unlockingprogram_;
  ::ADL::Protocols::Mempool::Tx_Timestamp* updated_;
  ::google::protobuf::uint32 amount_;
  ::google::protobuf::uint32 fee_;
  ::google::protobuf::uint32 outputamount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Mempool_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocols.Mempool.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(NULL);
  }

  Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hashed_signature = 1;
  void clear_hashed_signature();
  static const int kHashedSignatureFieldNumber = 1;
  const ::std::string& hashed_signature() const;
  void set_hashed_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_hashed_signature(::std::string&& value);
  #endif
  void set_hashed_signature(const char* value);
  void set_hashed_signature(const char* value, size_t size);
  ::std::string* mutable_hashed_signature();
  ::std::string* release_hashed_signature();
  void set_allocated_hashed_signature(::std::string* hashed_signature);

  // @@protoc_insertion_point(class_scope:ADL.Protocols.Mempool.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hashed_signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Mempool_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tx_Timestamp

// int64 seconds = 1;
inline void Tx_Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tx_Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.Timestamp.seconds)
  return seconds_;
}
inline void Tx_Timestamp::set_seconds(::google::protobuf::int64 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.Timestamp.seconds)
}

// int32 nanos = 2;
inline void Tx_Timestamp::clear_nanos() {
  nanos_ = 0;
}
inline ::google::protobuf::int32 Tx_Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.Timestamp.nanos)
  return nanos_;
}
inline void Tx_Timestamp::set_nanos(::google::protobuf::int32 value) {
  
  nanos_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Tx

// string addressSource = 1;
inline void Tx::clear_addresssource() {
  addresssource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::addresssource() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.addressSource)
  return addresssource_.GetNoArena();
}
inline void Tx::set_addresssource(const ::std::string& value) {
  
  addresssource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.addressSource)
}
#if LANG_CXX11
inline void Tx::set_addresssource(::std::string&& value) {
  
  addresssource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.addressSource)
}
#endif
inline void Tx::set_addresssource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addresssource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.addressSource)
}
inline void Tx::set_addresssource(const char* value, size_t size) {
  
  addresssource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.addressSource)
}
inline ::std::string* Tx::mutable_addresssource() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.addressSource)
  return addresssource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_addresssource() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.addressSource)
  
  return addresssource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_addresssource(::std::string* addresssource) {
  if (addresssource != NULL) {
    
  } else {
    
  }
  addresssource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addresssource);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.addressSource)
}

// string addressDest = 2;
inline void Tx::clear_addressdest() {
  addressdest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::addressdest() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.addressDest)
  return addressdest_.GetNoArena();
}
inline void Tx::set_addressdest(const ::std::string& value) {
  
  addressdest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.addressDest)
}
#if LANG_CXX11
inline void Tx::set_addressdest(::std::string&& value) {
  
  addressdest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.addressDest)
}
#endif
inline void Tx::set_addressdest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addressdest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.addressDest)
}
inline void Tx::set_addressdest(const char* value, size_t size) {
  
  addressdest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.addressDest)
}
inline ::std::string* Tx::mutable_addressdest() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.addressDest)
  return addressdest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_addressdest() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.addressDest)
  
  return addressdest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_addressdest(::std::string* addressdest) {
  if (addressdest != NULL) {
    
  } else {
    
  }
  addressdest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addressdest);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.addressDest)
}

// string signature = 3;
inline void Tx::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::signature() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.signature)
  return signature_.GetNoArena();
}
inline void Tx::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.signature)
}
#if LANG_CXX11
inline void Tx::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.signature)
}
#endif
inline void Tx::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.signature)
}
inline void Tx::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.signature)
}
inline ::std::string* Tx::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_signature() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.signature)
}

// fixed32 amount = 4;
inline void Tx::clear_amount() {
  amount_ = 0u;
}
inline ::google::protobuf::uint32 Tx::amount() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.amount)
  return amount_;
}
inline void Tx::set_amount(::google::protobuf::uint32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.amount)
}

// fixed32 fee = 5;
inline void Tx::clear_fee() {
  fee_ = 0u;
}
inline ::google::protobuf::uint32 Tx::fee() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.fee)
  return fee_;
}
inline void Tx::set_fee(::google::protobuf::uint32 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.fee)
}

// fixed32 outputAmount = 6;
inline void Tx::clear_outputamount() {
  outputamount_ = 0u;
}
inline ::google::protobuf::uint32 Tx::outputamount() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.outputAmount)
  return outputamount_;
}
inline void Tx::set_outputamount(::google::protobuf::uint32 value) {
  
  outputamount_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.outputAmount)
}

// string inputAction = 7;
inline void Tx::clear_inputaction() {
  inputaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::inputaction() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.inputAction)
  return inputaction_.GetNoArena();
}
inline void Tx::set_inputaction(const ::std::string& value) {
  
  inputaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.inputAction)
}
#if LANG_CXX11
inline void Tx::set_inputaction(::std::string&& value) {
  
  inputaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.inputAction)
}
#endif
inline void Tx::set_inputaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inputaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.inputAction)
}
inline void Tx::set_inputaction(const char* value, size_t size) {
  
  inputaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.inputAction)
}
inline ::std::string* Tx::mutable_inputaction() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.inputAction)
  return inputaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_inputaction() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.inputAction)
  
  return inputaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_inputaction(::std::string* inputaction) {
  if (inputaction != NULL) {
    
  } else {
    
  }
  inputaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputaction);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.inputAction)
}

// string unlockScript = 8;
inline void Tx::clear_unlockscript() {
  unlockscript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::unlockscript() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.unlockScript)
  return unlockscript_.GetNoArena();
}
inline void Tx::set_unlockscript(const ::std::string& value) {
  
  unlockscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.unlockScript)
}
#if LANG_CXX11
inline void Tx::set_unlockscript(::std::string&& value) {
  
  unlockscript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.unlockScript)
}
#endif
inline void Tx::set_unlockscript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unlockscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.unlockScript)
}
inline void Tx::set_unlockscript(const char* value, size_t size) {
  
  unlockscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.unlockScript)
}
inline ::std::string* Tx::mutable_unlockscript() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.unlockScript)
  return unlockscript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_unlockscript() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.unlockScript)
  
  return unlockscript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_unlockscript(::std::string* unlockscript) {
  if (unlockscript != NULL) {
    
  } else {
    
  }
  unlockscript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlockscript);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.unlockScript)
}

// string unlockingProgram = 9;
inline void Tx::clear_unlockingprogram() {
  unlockingprogram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::unlockingprogram() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.unlockingProgram)
  return unlockingprogram_.GetNoArena();
}
inline void Tx::set_unlockingprogram(const ::std::string& value) {
  
  unlockingprogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Tx.unlockingProgram)
}
#if LANG_CXX11
inline void Tx::set_unlockingprogram(::std::string&& value) {
  
  unlockingprogram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Tx.unlockingProgram)
}
#endif
inline void Tx::set_unlockingprogram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unlockingprogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Tx.unlockingProgram)
}
inline void Tx::set_unlockingprogram(const char* value, size_t size) {
  
  unlockingprogram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Tx.unlockingProgram)
}
inline ::std::string* Tx::mutable_unlockingprogram() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.unlockingProgram)
  return unlockingprogram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_unlockingprogram() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.unlockingProgram)
  
  return unlockingprogram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_unlockingprogram(::std::string* unlockingprogram) {
  if (unlockingprogram != NULL) {
    
  } else {
    
  }
  unlockingprogram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlockingprogram);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.unlockingProgram)
}

// .ADL.Protocols.Mempool.Tx.Timestamp updated = 10;
inline bool Tx::has_updated() const {
  return this != internal_default_instance() && updated_ != NULL;
}
inline void Tx::clear_updated() {
  if (GetArenaNoVirtual() == NULL && updated_ != NULL) {
    delete updated_;
  }
  updated_ = NULL;
}
inline const ::ADL::Protocols::Mempool::Tx_Timestamp& Tx::_internal_updated() const {
  return *updated_;
}
inline const ::ADL::Protocols::Mempool::Tx_Timestamp& Tx::updated() const {
  const ::ADL::Protocols::Mempool::Tx_Timestamp* p = updated_;
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Tx.updated)
  return p != NULL ? *p : *reinterpret_cast<const ::ADL::Protocols::Mempool::Tx_Timestamp*>(
      &::ADL::Protocols::Mempool::_Tx_Timestamp_default_instance_);
}
inline ::ADL::Protocols::Mempool::Tx_Timestamp* Tx::release_updated() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Tx.updated)
  
  ::ADL::Protocols::Mempool::Tx_Timestamp* temp = updated_;
  updated_ = NULL;
  return temp;
}
inline ::ADL::Protocols::Mempool::Tx_Timestamp* Tx::mutable_updated() {
  
  if (updated_ == NULL) {
    auto* p = CreateMaybeMessage<::ADL::Protocols::Mempool::Tx_Timestamp>(GetArenaNoVirtual());
    updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Tx.updated)
  return updated_;
}
inline void Tx::set_allocated_updated(::ADL::Protocols::Mempool::Tx_Timestamp* updated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete updated_;
  }
  if (updated) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Tx.updated)
}

// -------------------------------------------------------------------

// Key

// string hashed_signature = 1;
inline void Key::clear_hashed_signature() {
  hashed_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::hashed_signature() const {
  // @@protoc_insertion_point(field_get:ADL.Protocols.Mempool.Key.hashed_signature)
  return hashed_signature_.GetNoArena();
}
inline void Key::set_hashed_signature(const ::std::string& value) {
  
  hashed_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocols.Mempool.Key.hashed_signature)
}
#if LANG_CXX11
inline void Key::set_hashed_signature(::std::string&& value) {
  
  hashed_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocols.Mempool.Key.hashed_signature)
}
#endif
inline void Key::set_hashed_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashed_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocols.Mempool.Key.hashed_signature)
}
inline void Key::set_hashed_signature(const char* value, size_t size) {
  
  hashed_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocols.Mempool.Key.hashed_signature)
}
inline ::std::string* Key::mutable_hashed_signature() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocols.Mempool.Key.hashed_signature)
  return hashed_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_hashed_signature() {
  // @@protoc_insertion_point(field_release:ADL.Protocols.Mempool.Key.hashed_signature)
  
  return hashed_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_hashed_signature(::std::string* hashed_signature) {
  if (hashed_signature != NULL) {
    
  } else {
    
  }
  hashed_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashed_signature);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocols.Mempool.Key.hashed_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Mempool
}  // namespace Protocols
}  // namespace ADL

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Mempool_2eproto
