// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#ifndef PROTOBUF_INCLUDED_Peer_2eproto
#define PROTOBUF_INCLUDED_Peer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Peer_2eproto 

namespace protobuf_Peer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Peer_2eproto
namespace ADL {
namespace Peer {
namespace Protocol {
class PeerInfoRequest;
class PeerInfoRequestDefaultTypeInternal;
extern PeerInfoRequestDefaultTypeInternal _PeerInfoRequest_default_instance_;
class PeerInfoResponse;
class PeerInfoResponseDefaultTypeInternal;
extern PeerInfoResponseDefaultTypeInternal _PeerInfoResponse_default_instance_;
class PeerNeighborsRequest;
class PeerNeighborsRequestDefaultTypeInternal;
extern PeerNeighborsRequestDefaultTypeInternal _PeerNeighborsRequest_default_instance_;
class PeerNeighborsResponse;
class PeerNeighborsResponseDefaultTypeInternal;
extern PeerNeighborsResponseDefaultTypeInternal _PeerNeighborsResponse_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PongResponse;
class PongResponseDefaultTypeInternal;
extern PongResponseDefaultTypeInternal _PongResponse_default_instance_;
}  // namespace Protocol
}  // namespace Peer
}  // namespace ADL
namespace google {
namespace protobuf {
template<> ::ADL::Peer::Protocol::PeerInfoRequest* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PeerInfoRequest>(Arena*);
template<> ::ADL::Peer::Protocol::PeerInfoResponse* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PeerInfoResponse>(Arena*);
template<> ::ADL::Peer::Protocol::PeerNeighborsRequest* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PeerNeighborsRequest>(Arena*);
template<> ::ADL::Peer::Protocol::PeerNeighborsResponse* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PeerNeighborsResponse>(Arena*);
template<> ::ADL::Peer::Protocol::PingRequest* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PingRequest>(Arena*);
template<> ::ADL::Peer::Protocol::PongResponse* Arena::CreateMaybeMessage<::ADL::Peer::Protocol::PongResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ADL {
namespace Peer {
namespace Protocol {

// ===================================================================

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(NULL);
  }

  PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PongResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PongResponse) */ {
 public:
  PongResponse();
  virtual ~PongResponse();

  PongResponse(const PongResponse& from);

  inline PongResponse& operator=(const PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PongResponse(PongResponse&& from) noexcept
    : PongResponse() {
    *this = ::std::move(from);
  }

  inline PongResponse& operator=(PongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongResponse* internal_default_instance() {
    return reinterpret_cast<const PongResponse*>(
               &_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PongResponse* other);
  friend void swap(PongResponse& a, PongResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PongResponse* New() const final {
    return CreateMaybeMessage<PongResponse>(NULL);
  }

  PongResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PongResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PongResponse& from);
  void MergeFrom(const PongResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 2;
  void clear_pong();
  static const int kPongFieldNumber = 2;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PeerInfoRequest) */ {
 public:
  PeerInfoRequest();
  virtual ~PeerInfoRequest();

  PeerInfoRequest(const PeerInfoRequest& from);

  inline PeerInfoRequest& operator=(const PeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerInfoRequest(PeerInfoRequest&& from) noexcept
    : PeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline PeerInfoRequest& operator=(PeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const PeerInfoRequest*>(
               &_PeerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PeerInfoRequest* other);
  friend void swap(PeerInfoRequest& a, PeerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerInfoRequest* New() const final {
    return CreateMaybeMessage<PeerInfoRequest>(NULL);
  }

  PeerInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerInfoRequest& from);
  void MergeFrom(const PeerInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PeerInfoResponse) */ {
 public:
  PeerInfoResponse();
  virtual ~PeerInfoResponse();

  PeerInfoResponse(const PeerInfoResponse& from);

  inline PeerInfoResponse& operator=(const PeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerInfoResponse(PeerInfoResponse&& from) noexcept
    : PeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline PeerInfoResponse& operator=(PeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const PeerInfoResponse*>(
               &_PeerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PeerInfoResponse* other);
  friend void swap(PeerInfoResponse& a, PeerInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerInfoResponse* New() const final {
    return CreateMaybeMessage<PeerInfoResponse>(NULL);
  }

  PeerInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerInfoResponse& from);
  void MergeFrom(const PeerInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 2;
  void clear_pong();
  static const int kPongFieldNumber = 2;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerNeighborsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PeerNeighborsRequest) */ {
 public:
  PeerNeighborsRequest();
  virtual ~PeerNeighborsRequest();

  PeerNeighborsRequest(const PeerNeighborsRequest& from);

  inline PeerNeighborsRequest& operator=(const PeerNeighborsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerNeighborsRequest(PeerNeighborsRequest&& from) noexcept
    : PeerNeighborsRequest() {
    *this = ::std::move(from);
  }

  inline PeerNeighborsRequest& operator=(PeerNeighborsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerNeighborsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerNeighborsRequest* internal_default_instance() {
    return reinterpret_cast<const PeerNeighborsRequest*>(
               &_PeerNeighborsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PeerNeighborsRequest* other);
  friend void swap(PeerNeighborsRequest& a, PeerNeighborsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerNeighborsRequest* New() const final {
    return CreateMaybeMessage<PeerNeighborsRequest>(NULL);
  }

  PeerNeighborsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerNeighborsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerNeighborsRequest& from);
  void MergeFrom(const PeerNeighborsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerNeighborsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PeerNeighborsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerNeighborsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Peer.Protocol.PeerNeighborsResponse) */ {
 public:
  PeerNeighborsResponse();
  virtual ~PeerNeighborsResponse();

  PeerNeighborsResponse(const PeerNeighborsResponse& from);

  inline PeerNeighborsResponse& operator=(const PeerNeighborsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerNeighborsResponse(PeerNeighborsResponse&& from) noexcept
    : PeerNeighborsResponse() {
    *this = ::std::move(from);
  }

  inline PeerNeighborsResponse& operator=(PeerNeighborsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerNeighborsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerNeighborsResponse* internal_default_instance() {
    return reinterpret_cast<const PeerNeighborsResponse*>(
               &_PeerNeighborsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PeerNeighborsResponse* other);
  friend void swap(PeerNeighborsResponse& a, PeerNeighborsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerNeighborsResponse* New() const final {
    return CreateMaybeMessage<PeerNeighborsResponse>(NULL);
  }

  PeerNeighborsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerNeighborsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerNeighborsResponse& from);
  void MergeFrom(const PeerNeighborsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerNeighborsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 2;
  void clear_pong();
  static const int kPongFieldNumber = 2;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Peer.Protocol.PeerNeighborsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PingRequest

// string ping = 1;
inline void PingRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PingRequest.ping)
  return ping_.GetNoArena();
}
inline void PingRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PingRequest.ping)
}
#if LANG_CXX11
inline void PingRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PingRequest.ping)
}
#endif
inline void PingRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PingRequest.ping)
}
inline void PingRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PingRequest.ping)
}
inline ::std::string* PingRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PingRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PingRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PingRequest.ping)
}

// -------------------------------------------------------------------

// PongResponse

// string pong = 2;
inline void PongResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PongResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PongResponse.pong)
  return pong_.GetNoArena();
}
inline void PongResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PongResponse.pong)
}
#if LANG_CXX11
inline void PongResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PongResponse.pong)
}
#endif
inline void PongResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PongResponse.pong)
}
inline void PongResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PongResponse.pong)
}
inline ::std::string* PongResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PongResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PongResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PongResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PongResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PongResponse.pong)
}

// -------------------------------------------------------------------

// PeerInfoRequest

// string ping = 1;
inline void PeerInfoRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerInfoRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PeerInfoRequest.ping)
  return ping_.GetNoArena();
}
inline void PeerInfoRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PeerInfoRequest.ping)
}
#if LANG_CXX11
inline void PeerInfoRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PeerInfoRequest.ping)
}
#endif
inline void PeerInfoRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PeerInfoRequest.ping)
}
inline void PeerInfoRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PeerInfoRequest.ping)
}
inline ::std::string* PeerInfoRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PeerInfoRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfoRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PeerInfoRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfoRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PeerInfoRequest.ping)
}

// -------------------------------------------------------------------

// PeerInfoResponse

// string pong = 2;
inline void PeerInfoResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerInfoResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PeerInfoResponse.pong)
  return pong_.GetNoArena();
}
inline void PeerInfoResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PeerInfoResponse.pong)
}
#if LANG_CXX11
inline void PeerInfoResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PeerInfoResponse.pong)
}
#endif
inline void PeerInfoResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PeerInfoResponse.pong)
}
inline void PeerInfoResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PeerInfoResponse.pong)
}
inline ::std::string* PeerInfoResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PeerInfoResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerInfoResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PeerInfoResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerInfoResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PeerInfoResponse.pong)
}

// -------------------------------------------------------------------

// PeerNeighborsRequest

// string ping = 1;
inline void PeerNeighborsRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerNeighborsRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
  return ping_.GetNoArena();
}
inline void PeerNeighborsRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
}
#if LANG_CXX11
inline void PeerNeighborsRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
}
#endif
inline void PeerNeighborsRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
}
inline void PeerNeighborsRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
}
inline ::std::string* PeerNeighborsRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerNeighborsRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerNeighborsRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PeerNeighborsRequest.ping)
}

// -------------------------------------------------------------------

// PeerNeighborsResponse

// string pong = 2;
inline void PeerNeighborsResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerNeighborsResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
  return pong_.GetNoArena();
}
inline void PeerNeighborsResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
}
#if LANG_CXX11
inline void PeerNeighborsResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
}
#endif
inline void PeerNeighborsResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
}
inline void PeerNeighborsResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
}
inline ::std::string* PeerNeighborsResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerNeighborsResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerNeighborsResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Peer.Protocol.PeerNeighborsResponse.pong)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Peer
}  // namespace ADL

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Peer_2eproto
