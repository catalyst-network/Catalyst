// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#ifndef PROTOBUF_INCLUDED_Peer_2eproto
#define PROTOBUF_INCLUDED_Peer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Peer_2eproto 

namespace protobuf_Peer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Peer_2eproto
namespace ADL {
namespace Protocol {
namespace Peer {
class PeerProtocol;
class PeerProtocolDefaultTypeInternal;
extern PeerProtocolDefaultTypeInternal _PeerProtocol_default_instance_;
class PeerProtocol_ChallengeRequest;
class PeerProtocol_ChallengeRequestDefaultTypeInternal;
extern PeerProtocol_ChallengeRequestDefaultTypeInternal _PeerProtocol_ChallengeRequest_default_instance_;
class PeerProtocol_ChallengeResponse;
class PeerProtocol_ChallengeResponseDefaultTypeInternal;
extern PeerProtocol_ChallengeResponseDefaultTypeInternal _PeerProtocol_ChallengeResponse_default_instance_;
class PeerProtocol_PeerInfoRequest;
class PeerProtocol_PeerInfoRequestDefaultTypeInternal;
extern PeerProtocol_PeerInfoRequestDefaultTypeInternal _PeerProtocol_PeerInfoRequest_default_instance_;
class PeerProtocol_PeerInfoResponse;
class PeerProtocol_PeerInfoResponseDefaultTypeInternal;
extern PeerProtocol_PeerInfoResponseDefaultTypeInternal _PeerProtocol_PeerInfoResponse_default_instance_;
class PeerProtocol_PeerNeighborsRequest;
class PeerProtocol_PeerNeighborsRequestDefaultTypeInternal;
extern PeerProtocol_PeerNeighborsRequestDefaultTypeInternal _PeerProtocol_PeerNeighborsRequest_default_instance_;
class PeerProtocol_PeerNeighborsResponse;
class PeerProtocol_PeerNeighborsResponseDefaultTypeInternal;
extern PeerProtocol_PeerNeighborsResponseDefaultTypeInternal _PeerProtocol_PeerNeighborsResponse_default_instance_;
class PeerProtocol_PingRequest;
class PeerProtocol_PingRequestDefaultTypeInternal;
extern PeerProtocol_PingRequestDefaultTypeInternal _PeerProtocol_PingRequest_default_instance_;
class PeerProtocol_PongResponse;
class PeerProtocol_PongResponseDefaultTypeInternal;
extern PeerProtocol_PongResponseDefaultTypeInternal _PeerProtocol_PongResponse_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace ADL
namespace google {
namespace protobuf {
template<> ::ADL::Protocol::Peer::PeerProtocol* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PingRequest* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PingRequest>(Arena*);
template<> ::ADL::Protocol::Peer::PeerProtocol_PongResponse* Arena::CreateMaybeMessage<::ADL::Protocol::Peer::PeerProtocol_PongResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ADL {
namespace Protocol {
namespace Peer {

// ===================================================================

class PeerProtocol_PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PingRequest) */ {
 public:
  PeerProtocol_PingRequest();
  virtual ~PeerProtocol_PingRequest();

  PeerProtocol_PingRequest(const PeerProtocol_PingRequest& from);

  inline PeerProtocol_PingRequest& operator=(const PeerProtocol_PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PingRequest(PeerProtocol_PingRequest&& from) noexcept
    : PeerProtocol_PingRequest() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PingRequest& operator=(PeerProtocol_PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PingRequest* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PingRequest*>(
               &_PeerProtocol_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PeerProtocol_PingRequest* other);
  friend void swap(PeerProtocol_PingRequest& a, PeerProtocol_PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PingRequest* New() const final {
    return CreateMaybeMessage<PeerProtocol_PingRequest>(NULL);
  }

  PeerProtocol_PingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PingRequest& from);
  void MergeFrom(const PeerProtocol_PingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_PongResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PongResponse) */ {
 public:
  PeerProtocol_PongResponse();
  virtual ~PeerProtocol_PongResponse();

  PeerProtocol_PongResponse(const PeerProtocol_PongResponse& from);

  inline PeerProtocol_PongResponse& operator=(const PeerProtocol_PongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PongResponse(PeerProtocol_PongResponse&& from) noexcept
    : PeerProtocol_PongResponse() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PongResponse& operator=(PeerProtocol_PongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PongResponse* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PongResponse*>(
               &_PeerProtocol_PongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PeerProtocol_PongResponse* other);
  friend void swap(PeerProtocol_PongResponse& a, PeerProtocol_PongResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PongResponse* New() const final {
    return CreateMaybeMessage<PeerProtocol_PongResponse>(NULL);
  }

  PeerProtocol_PongResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PongResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PongResponse& from);
  void MergeFrom(const PeerProtocol_PongResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 1;
  void clear_pong();
  static const int kPongFieldNumber = 1;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_PeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest) */ {
 public:
  PeerProtocol_PeerInfoRequest();
  virtual ~PeerProtocol_PeerInfoRequest();

  PeerProtocol_PeerInfoRequest(const PeerProtocol_PeerInfoRequest& from);

  inline PeerProtocol_PeerInfoRequest& operator=(const PeerProtocol_PeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PeerInfoRequest(PeerProtocol_PeerInfoRequest&& from) noexcept
    : PeerProtocol_PeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PeerInfoRequest& operator=(PeerProtocol_PeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PeerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PeerInfoRequest*>(
               &_PeerProtocol_PeerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PeerProtocol_PeerInfoRequest* other);
  friend void swap(PeerProtocol_PeerInfoRequest& a, PeerProtocol_PeerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PeerInfoRequest* New() const final {
    return CreateMaybeMessage<PeerProtocol_PeerInfoRequest>(NULL);
  }

  PeerProtocol_PeerInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PeerInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PeerInfoRequest& from);
  void MergeFrom(const PeerProtocol_PeerInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_PeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse) */ {
 public:
  PeerProtocol_PeerInfoResponse();
  virtual ~PeerProtocol_PeerInfoResponse();

  PeerProtocol_PeerInfoResponse(const PeerProtocol_PeerInfoResponse& from);

  inline PeerProtocol_PeerInfoResponse& operator=(const PeerProtocol_PeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PeerInfoResponse(PeerProtocol_PeerInfoResponse&& from) noexcept
    : PeerProtocol_PeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PeerInfoResponse& operator=(PeerProtocol_PeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PeerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PeerInfoResponse*>(
               &_PeerProtocol_PeerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PeerProtocol_PeerInfoResponse* other);
  friend void swap(PeerProtocol_PeerInfoResponse& a, PeerProtocol_PeerInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PeerInfoResponse* New() const final {
    return CreateMaybeMessage<PeerProtocol_PeerInfoResponse>(NULL);
  }

  PeerProtocol_PeerInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PeerInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PeerInfoResponse& from);
  void MergeFrom(const PeerProtocol_PeerInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 1;
  void clear_pong();
  static const int kPongFieldNumber = 1;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_PeerNeighborsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest) */ {
 public:
  PeerProtocol_PeerNeighborsRequest();
  virtual ~PeerProtocol_PeerNeighborsRequest();

  PeerProtocol_PeerNeighborsRequest(const PeerProtocol_PeerNeighborsRequest& from);

  inline PeerProtocol_PeerNeighborsRequest& operator=(const PeerProtocol_PeerNeighborsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PeerNeighborsRequest(PeerProtocol_PeerNeighborsRequest&& from) noexcept
    : PeerProtocol_PeerNeighborsRequest() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PeerNeighborsRequest& operator=(PeerProtocol_PeerNeighborsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PeerNeighborsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PeerNeighborsRequest* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PeerNeighborsRequest*>(
               &_PeerProtocol_PeerNeighborsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PeerProtocol_PeerNeighborsRequest* other);
  friend void swap(PeerProtocol_PeerNeighborsRequest& a, PeerProtocol_PeerNeighborsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PeerNeighborsRequest* New() const final {
    return CreateMaybeMessage<PeerProtocol_PeerNeighborsRequest>(NULL);
  }

  PeerProtocol_PeerNeighborsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PeerNeighborsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PeerNeighborsRequest& from);
  void MergeFrom(const PeerProtocol_PeerNeighborsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PeerNeighborsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ping = 1;
  void clear_ping();
  static const int kPingFieldNumber = 1;
  const ::std::string& ping() const;
  void set_ping(const ::std::string& value);
  #if LANG_CXX11
  void set_ping(::std::string&& value);
  #endif
  void set_ping(const char* value);
  void set_ping(const char* value, size_t size);
  ::std::string* mutable_ping();
  ::std::string* release_ping();
  void set_allocated_ping(::std::string* ping);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ping_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_PeerNeighborsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse) */ {
 public:
  PeerProtocol_PeerNeighborsResponse();
  virtual ~PeerProtocol_PeerNeighborsResponse();

  PeerProtocol_PeerNeighborsResponse(const PeerProtocol_PeerNeighborsResponse& from);

  inline PeerProtocol_PeerNeighborsResponse& operator=(const PeerProtocol_PeerNeighborsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_PeerNeighborsResponse(PeerProtocol_PeerNeighborsResponse&& from) noexcept
    : PeerProtocol_PeerNeighborsResponse() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_PeerNeighborsResponse& operator=(PeerProtocol_PeerNeighborsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_PeerNeighborsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_PeerNeighborsResponse* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_PeerNeighborsResponse*>(
               &_PeerProtocol_PeerNeighborsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PeerProtocol_PeerNeighborsResponse* other);
  friend void swap(PeerProtocol_PeerNeighborsResponse& a, PeerProtocol_PeerNeighborsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_PeerNeighborsResponse* New() const final {
    return CreateMaybeMessage<PeerProtocol_PeerNeighborsResponse>(NULL);
  }

  PeerProtocol_PeerNeighborsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_PeerNeighborsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_PeerNeighborsResponse& from);
  void MergeFrom(const PeerProtocol_PeerNeighborsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_PeerNeighborsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pong = 1;
  void clear_pong();
  static const int kPongFieldNumber = 1;
  const ::std::string& pong() const;
  void set_pong(const ::std::string& value);
  #if LANG_CXX11
  void set_pong(::std::string&& value);
  #endif
  void set_pong(const char* value);
  void set_pong(const char* value, size_t size);
  ::std::string* mutable_pong();
  ::std::string* release_pong();
  void set_allocated_pong(::std::string* pong);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pong_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_ChallengeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest) */ {
 public:
  PeerProtocol_ChallengeRequest();
  virtual ~PeerProtocol_ChallengeRequest();

  PeerProtocol_ChallengeRequest(const PeerProtocol_ChallengeRequest& from);

  inline PeerProtocol_ChallengeRequest& operator=(const PeerProtocol_ChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_ChallengeRequest(PeerProtocol_ChallengeRequest&& from) noexcept
    : PeerProtocol_ChallengeRequest() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_ChallengeRequest& operator=(PeerProtocol_ChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_ChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_ChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_ChallengeRequest*>(
               &_PeerProtocol_ChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PeerProtocol_ChallengeRequest* other);
  friend void swap(PeerProtocol_ChallengeRequest& a, PeerProtocol_ChallengeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_ChallengeRequest* New() const final {
    return CreateMaybeMessage<PeerProtocol_ChallengeRequest>(NULL);
  }

  PeerProtocol_ChallengeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_ChallengeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_ChallengeRequest& from);
  void MergeFrom(const PeerProtocol_ChallengeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_ChallengeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 nonce = 3;
  void clear_nonce();
  static const int kNonceFieldNumber = 3;
  ::google::protobuf::int32 nonce() const;
  void set_nonce(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 nonce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol_ChallengeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse) */ {
 public:
  PeerProtocol_ChallengeResponse();
  virtual ~PeerProtocol_ChallengeResponse();

  PeerProtocol_ChallengeResponse(const PeerProtocol_ChallengeResponse& from);

  inline PeerProtocol_ChallengeResponse& operator=(const PeerProtocol_ChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol_ChallengeResponse(PeerProtocol_ChallengeResponse&& from) noexcept
    : PeerProtocol_ChallengeResponse() {
    *this = ::std::move(from);
  }

  inline PeerProtocol_ChallengeResponse& operator=(PeerProtocol_ChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol_ChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol_ChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol_ChallengeResponse*>(
               &_PeerProtocol_ChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PeerProtocol_ChallengeResponse* other);
  friend void swap(PeerProtocol_ChallengeResponse& a, PeerProtocol_ChallengeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol_ChallengeResponse* New() const final {
    return CreateMaybeMessage<PeerProtocol_ChallengeResponse>(NULL);
  }

  PeerProtocol_ChallengeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol_ChallengeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol_ChallengeResponse& from);
  void MergeFrom(const PeerProtocol_ChallengeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol_ChallengeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signedNonce = 2;
  void clear_signednonce();
  static const int kSignedNonceFieldNumber = 2;
  const ::std::string& signednonce() const;
  void set_signednonce(const ::std::string& value);
  #if LANG_CXX11
  void set_signednonce(::std::string&& value);
  #endif
  void set_signednonce(const char* value);
  void set_signednonce(const char* value, size_t size);
  ::std::string* mutable_signednonce();
  ::std::string* release_signednonce();
  void set_allocated_signednonce(::std::string* signednonce);

  // string publicKey = 3;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 3;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signednonce_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PeerProtocol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ADL.Protocol.Peer.PeerProtocol) */ {
 public:
  PeerProtocol();
  virtual ~PeerProtocol();

  PeerProtocol(const PeerProtocol& from);

  inline PeerProtocol& operator=(const PeerProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerProtocol(PeerProtocol&& from) noexcept
    : PeerProtocol() {
    *this = ::std::move(from);
  }

  inline PeerProtocol& operator=(PeerProtocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerProtocol* internal_default_instance() {
    return reinterpret_cast<const PeerProtocol*>(
               &_PeerProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PeerProtocol* other);
  friend void swap(PeerProtocol& a, PeerProtocol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerProtocol* New() const final {
    return CreateMaybeMessage<PeerProtocol>(NULL);
  }

  PeerProtocol* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerProtocol>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerProtocol& from);
  void MergeFrom(const PeerProtocol& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerProtocol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeerProtocol_PingRequest PingRequest;
  typedef PeerProtocol_PongResponse PongResponse;
  typedef PeerProtocol_PeerInfoRequest PeerInfoRequest;
  typedef PeerProtocol_PeerInfoResponse PeerInfoResponse;
  typedef PeerProtocol_PeerNeighborsRequest PeerNeighborsRequest;
  typedef PeerProtocol_PeerNeighborsResponse PeerNeighborsResponse;
  typedef PeerProtocol_ChallengeRequest ChallengeRequest;
  typedef PeerProtocol_ChallengeResponse ChallengeResponse;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ADL.Protocol.Peer.PeerProtocol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Peer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerProtocol_PingRequest

// string ping = 1;
inline void PeerProtocol_PingRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PingRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
  return ping_.GetNoArena();
}
inline void PeerProtocol_PingRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
}
#if LANG_CXX11
inline void PeerProtocol_PingRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
}
#endif
inline void PeerProtocol_PingRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
}
inline void PeerProtocol_PingRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
}
inline ::std::string* PeerProtocol_PingRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PingRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PingRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PingRequest.ping)
}

// -------------------------------------------------------------------

// PeerProtocol_PongResponse

// string pong = 1;
inline void PeerProtocol_PongResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PongResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
  return pong_.GetNoArena();
}
inline void PeerProtocol_PongResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
}
#if LANG_CXX11
inline void PeerProtocol_PongResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
}
#endif
inline void PeerProtocol_PongResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
}
inline void PeerProtocol_PongResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
}
inline ::std::string* PeerProtocol_PongResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PongResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PongResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PongResponse.pong)
}

// -------------------------------------------------------------------

// PeerProtocol_PeerInfoRequest

// string ping = 1;
inline void PeerProtocol_PeerInfoRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PeerInfoRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
  return ping_.GetNoArena();
}
inline void PeerProtocol_PeerInfoRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
}
#if LANG_CXX11
inline void PeerProtocol_PeerInfoRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
}
#endif
inline void PeerProtocol_PeerInfoRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
}
inline void PeerProtocol_PeerInfoRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
}
inline ::std::string* PeerProtocol_PeerInfoRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PeerInfoRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PeerInfoRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping)
}

// -------------------------------------------------------------------

// PeerProtocol_PeerInfoResponse

// string pong = 1;
inline void PeerProtocol_PeerInfoResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PeerInfoResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
  return pong_.GetNoArena();
}
inline void PeerProtocol_PeerInfoResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
}
#if LANG_CXX11
inline void PeerProtocol_PeerInfoResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
}
#endif
inline void PeerProtocol_PeerInfoResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
}
inline void PeerProtocol_PeerInfoResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
}
inline ::std::string* PeerProtocol_PeerInfoResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PeerInfoResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PeerInfoResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong)
}

// -------------------------------------------------------------------

// PeerProtocol_PeerNeighborsRequest

// string ping = 1;
inline void PeerProtocol_PeerNeighborsRequest::clear_ping() {
  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PeerNeighborsRequest::ping() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
  return ping_.GetNoArena();
}
inline void PeerProtocol_PeerNeighborsRequest::set_ping(const ::std::string& value) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
}
#if LANG_CXX11
inline void PeerProtocol_PeerNeighborsRequest::set_ping(::std::string&& value) {
  
  ping_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
}
#endif
inline void PeerProtocol_PeerNeighborsRequest::set_ping(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
}
inline void PeerProtocol_PeerNeighborsRequest::set_ping(const char* value, size_t size) {
  
  ping_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
}
inline ::std::string* PeerProtocol_PeerNeighborsRequest::mutable_ping() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
  return ping_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PeerNeighborsRequest::release_ping() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
  
  return ping_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PeerNeighborsRequest::set_allocated_ping(::std::string* ping) {
  if (ping != NULL) {
    
  } else {
    
  }
  ping_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ping);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping)
}

// -------------------------------------------------------------------

// PeerProtocol_PeerNeighborsResponse

// string pong = 1;
inline void PeerProtocol_PeerNeighborsResponse::clear_pong() {
  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_PeerNeighborsResponse::pong() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
  return pong_.GetNoArena();
}
inline void PeerProtocol_PeerNeighborsResponse::set_pong(const ::std::string& value) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
}
#if LANG_CXX11
inline void PeerProtocol_PeerNeighborsResponse::set_pong(::std::string&& value) {
  
  pong_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
}
#endif
inline void PeerProtocol_PeerNeighborsResponse::set_pong(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
}
inline void PeerProtocol_PeerNeighborsResponse::set_pong(const char* value, size_t size) {
  
  pong_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
}
inline ::std::string* PeerProtocol_PeerNeighborsResponse::mutable_pong() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
  return pong_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_PeerNeighborsResponse::release_pong() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
  
  return pong_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_PeerNeighborsResponse::set_allocated_pong(::std::string* pong) {
  if (pong != NULL) {
    
  } else {
    
  }
  pong_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pong);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong)
}

// -------------------------------------------------------------------

// PeerProtocol_ChallengeRequest

// int32 type = 2;
inline void PeerProtocol_ChallengeRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 PeerProtocol_ChallengeRequest::type() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest.type)
  return type_;
}
inline void PeerProtocol_ChallengeRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest.type)
}

// int32 nonce = 3;
inline void PeerProtocol_ChallengeRequest::clear_nonce() {
  nonce_ = 0;
}
inline ::google::protobuf::int32 PeerProtocol_ChallengeRequest::nonce() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest.nonce)
  return nonce_;
}
inline void PeerProtocol_ChallengeRequest::set_nonce(::google::protobuf::int32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest.nonce)
}

// -------------------------------------------------------------------

// PeerProtocol_ChallengeResponse

// string signedNonce = 2;
inline void PeerProtocol_ChallengeResponse::clear_signednonce() {
  signednonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_ChallengeResponse::signednonce() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
  return signednonce_.GetNoArena();
}
inline void PeerProtocol_ChallengeResponse::set_signednonce(const ::std::string& value) {
  
  signednonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
}
#if LANG_CXX11
inline void PeerProtocol_ChallengeResponse::set_signednonce(::std::string&& value) {
  
  signednonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
}
#endif
inline void PeerProtocol_ChallengeResponse::set_signednonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signednonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
}
inline void PeerProtocol_ChallengeResponse::set_signednonce(const char* value, size_t size) {
  
  signednonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
}
inline ::std::string* PeerProtocol_ChallengeResponse::mutable_signednonce() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
  return signednonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_ChallengeResponse::release_signednonce() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
  
  return signednonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_ChallengeResponse::set_allocated_signednonce(::std::string* signednonce) {
  if (signednonce != NULL) {
    
  } else {
    
  }
  signednonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signednonce);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce)
}

// string publicKey = 3;
inline void PeerProtocol_ChallengeResponse::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerProtocol_ChallengeResponse::publickey() const {
  // @@protoc_insertion_point(field_get:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
  return publickey_.GetNoArena();
}
inline void PeerProtocol_ChallengeResponse::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
}
#if LANG_CXX11
inline void PeerProtocol_ChallengeResponse::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
}
#endif
inline void PeerProtocol_ChallengeResponse::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
}
inline void PeerProtocol_ChallengeResponse::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
}
inline ::std::string* PeerProtocol_ChallengeResponse::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerProtocol_ChallengeResponse::release_publickey() {
  // @@protoc_insertion_point(field_release:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerProtocol_ChallengeResponse::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey)
}

// -------------------------------------------------------------------

// PeerProtocol

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Peer
}  // namespace Protocol
}  // namespace ADL

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Peer_2eproto
