// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#include "Peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ADL {
namespace Protocol {
namespace Peer {
class PeerProtocol_PingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PingRequest>
      _instance;
} _PeerProtocol_PingRequest_default_instance_;
class PeerProtocol_PongResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PongResponse>
      _instance;
} _PeerProtocol_PongResponse_default_instance_;
class PeerProtocol_PeerInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PeerInfoRequest>
      _instance;
} _PeerProtocol_PeerInfoRequest_default_instance_;
class PeerProtocol_PeerInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PeerInfoResponse>
      _instance;
} _PeerProtocol_PeerInfoResponse_default_instance_;
class PeerProtocol_PeerNeighborsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PeerNeighborsRequest>
      _instance;
} _PeerProtocol_PeerNeighborsRequest_default_instance_;
class PeerProtocol_PeerNeighborsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_PeerNeighborsResponse>
      _instance;
} _PeerProtocol_PeerNeighborsResponse_default_instance_;
class PeerProtocol_ChallengeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_ChallengeRequest>
      _instance;
} _PeerProtocol_ChallengeRequest_default_instance_;
class PeerProtocol_ChallengeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol_ChallengeResponse>
      _instance;
} _PeerProtocol_ChallengeResponse_default_instance_;
class PeerProtocolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerProtocol>
      _instance;
} _PeerProtocol_default_instance_;
}  // namespace Peer
}  // namespace Protocol
}  // namespace ADL
namespace protobuf_Peer_2eproto {
static void InitDefaultsPeerProtocol_PingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PingRequest_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PingRequest}, {}};

static void InitDefaultsPeerProtocol_PongResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PongResponse_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PongResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PongResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PongResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PongResponse}, {}};

static void InitDefaultsPeerProtocol_PeerInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PeerInfoRequest_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PeerInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PeerInfoRequest}, {}};

static void InitDefaultsPeerProtocol_PeerInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PeerInfoResponse_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PeerInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PeerInfoResponse}, {}};

static void InitDefaultsPeerProtocol_PeerNeighborsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PeerNeighborsRequest_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PeerNeighborsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PeerNeighborsRequest}, {}};

static void InitDefaultsPeerProtocol_PeerNeighborsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_PeerNeighborsResponse_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_PeerNeighborsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_PeerNeighborsResponse}, {}};

static void InitDefaultsPeerProtocol_ChallengeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_ChallengeRequest_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_ChallengeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_ChallengeRequest}, {}};

static void InitDefaultsPeerProtocol_ChallengeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_ChallengeResponse_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol_ChallengeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol_ChallengeResponse}, {}};

static void InitDefaultsPeerProtocol() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Protocol::Peer::_PeerProtocol_default_instance_;
    new (ptr) ::ADL::Protocol::Peer::PeerProtocol();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Protocol::Peer::PeerProtocol::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerProtocol =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerProtocol}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PongResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PeerInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PeerInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PeerNeighborsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_PeerNeighborsResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_ChallengeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol_ChallengeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerProtocol.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PingRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PongResponse, pong_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse, pong_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse, pong_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest, nonce_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse, signednonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse, publickey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Protocol::Peer::PeerProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PingRequest)},
  { 6, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PongResponse)},
  { 12, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest)},
  { 18, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse)},
  { 24, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest)},
  { 30, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse)},
  { 36, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest)},
  { 43, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse)},
  { 50, -1, sizeof(::ADL::Protocol::Peer::PeerProtocol)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PongResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PeerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PeerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PeerNeighborsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_PeerNeighborsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_ChallengeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_ChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Protocol::Peer::_PeerProtocol_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Peer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nPeer.proto\022\021ADL.Protocol.Peer\"\307\002\n\014Peer"
      "Protocol\032\033\n\013PingRequest\022\014\n\004ping\030\001 \001(\t\032\034\n"
      "\014PongResponse\022\014\n\004pong\030\001 \001(\t\032\037\n\017PeerInfoR"
      "equest\022\014\n\004ping\030\001 \001(\t\032 \n\020PeerInfoResponse"
      "\022\014\n\004pong\030\001 \001(\t\032$\n\024PeerNeighborsRequest\022\014"
      "\n\004ping\030\001 \001(\t\032%\n\025PeerNeighborsResponse\022\014\n"
      "\004pong\030\001 \001(\t\032/\n\020ChallengeRequest\022\014\n\004type\030"
      "\002 \001(\005\022\r\n\005nonce\030\003 \001(\005\032;\n\021ChallengeRespons"
      "e\022\023\n\013signedNonce\030\002 \001(\t\022\021\n\tpublicKey\030\003 \001("
      "\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Peer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Peer_2eproto
namespace ADL {
namespace Protocol {
namespace Peer {

// ===================================================================

void PeerProtocol_PingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PingRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PingRequest::PeerProtocol_PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PingRequest)
}
PeerProtocol_PingRequest::PeerProtocol_PingRequest(const PeerProtocol_PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PingRequest)
}

void PeerProtocol_PingRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PingRequest::~PeerProtocol_PingRequest() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  SharedDtor();
}

void PeerProtocol_PingRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PingRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PingRequest& PeerProtocol_PingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PingRequest.base);
  return *internal_default_instance();
}


void PeerProtocol_PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PingRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  return false;
#undef DO_
}

void PeerProtocol_PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PingRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PingRequest)
}

::google::protobuf::uint8* PeerProtocol_PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PingRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  return target;
}

size_t PeerProtocol_PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PingRequest)
    MergeFrom(*source);
  }
}

void PeerProtocol_PingRequest::MergeFrom(const PeerProtocol_PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PeerProtocol_PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PingRequest::CopyFrom(const PeerProtocol_PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PingRequest::IsInitialized() const {
  return true;
}

void PeerProtocol_PingRequest::Swap(PeerProtocol_PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PingRequest::InternalSwap(PeerProtocol_PingRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PingRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_PongResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PongResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PongResponse::PeerProtocol_PongResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PongResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PongResponse)
}
PeerProtocol_PongResponse::PeerProtocol_PongResponse(const PeerProtocol_PongResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PongResponse)
}

void PeerProtocol_PongResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PongResponse::~PeerProtocol_PongResponse() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  SharedDtor();
}

void PeerProtocol_PongResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PongResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PongResponse& PeerProtocol_PongResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PongResponse.base);
  return *internal_default_instance();
}


void PeerProtocol_PongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PongResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PongResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  return false;
#undef DO_
}

void PeerProtocol_PongResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PongResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PongResponse)
}

::google::protobuf::uint8* PeerProtocol_PongResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PongResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  return target;
}

size_t PeerProtocol_PongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 1;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PongResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PongResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PongResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PongResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PongResponse)
    MergeFrom(*source);
  }
}

void PeerProtocol_PongResponse::MergeFrom(const PeerProtocol_PongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PeerProtocol_PongResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PongResponse::CopyFrom(const PeerProtocol_PongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PongResponse::IsInitialized() const {
  return true;
}

void PeerProtocol_PongResponse::Swap(PeerProtocol_PongResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PongResponse::InternalSwap(PeerProtocol_PongResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PongResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_PeerInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PeerInfoRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PeerInfoRequest::PeerProtocol_PeerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
}
PeerProtocol_PeerInfoRequest::PeerProtocol_PeerInfoRequest(const PeerProtocol_PeerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
}

void PeerProtocol_PeerInfoRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PeerInfoRequest::~PeerProtocol_PeerInfoRequest() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  SharedDtor();
}

void PeerProtocol_PeerInfoRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PeerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PeerInfoRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PeerInfoRequest& PeerProtocol_PeerInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerInfoRequest.base);
  return *internal_default_instance();
}


void PeerProtocol_PeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PeerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  return false;
#undef DO_
}

void PeerProtocol_PeerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
}

::google::protobuf::uint8* PeerProtocol_PeerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  return target;
}

size_t PeerProtocol_PeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PeerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PeerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PeerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
    MergeFrom(*source);
  }
}

void PeerProtocol_PeerInfoRequest::MergeFrom(const PeerProtocol_PeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PeerProtocol_PeerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PeerInfoRequest::CopyFrom(const PeerProtocol_PeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PeerInfoRequest::IsInitialized() const {
  return true;
}

void PeerProtocol_PeerInfoRequest::Swap(PeerProtocol_PeerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PeerInfoRequest::InternalSwap(PeerProtocol_PeerInfoRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PeerInfoRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_PeerInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PeerInfoResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PeerInfoResponse::PeerProtocol_PeerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
}
PeerProtocol_PeerInfoResponse::PeerProtocol_PeerInfoResponse(const PeerProtocol_PeerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
}

void PeerProtocol_PeerInfoResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PeerInfoResponse::~PeerProtocol_PeerInfoResponse() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  SharedDtor();
}

void PeerProtocol_PeerInfoResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PeerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PeerInfoResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PeerInfoResponse& PeerProtocol_PeerInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerInfoResponse.base);
  return *internal_default_instance();
}


void PeerProtocol_PeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PeerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  return false;
#undef DO_
}

void PeerProtocol_PeerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
}

::google::protobuf::uint8* PeerProtocol_PeerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  return target;
}

size_t PeerProtocol_PeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 1;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PeerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PeerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PeerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
    MergeFrom(*source);
  }
}

void PeerProtocol_PeerInfoResponse::MergeFrom(const PeerProtocol_PeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PeerProtocol_PeerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PeerInfoResponse::CopyFrom(const PeerProtocol_PeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PeerInfoResponse::IsInitialized() const {
  return true;
}

void PeerProtocol_PeerInfoResponse::Swap(PeerProtocol_PeerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PeerInfoResponse::InternalSwap(PeerProtocol_PeerInfoResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PeerInfoResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_PeerNeighborsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PeerNeighborsRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PeerNeighborsRequest::PeerProtocol_PeerNeighborsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerNeighborsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
}
PeerProtocol_PeerNeighborsRequest::PeerProtocol_PeerNeighborsRequest(const PeerProtocol_PeerNeighborsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
}

void PeerProtocol_PeerNeighborsRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PeerNeighborsRequest::~PeerProtocol_PeerNeighborsRequest() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  SharedDtor();
}

void PeerProtocol_PeerNeighborsRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PeerNeighborsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PeerNeighborsRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PeerNeighborsRequest& PeerProtocol_PeerNeighborsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerNeighborsRequest.base);
  return *internal_default_instance();
}


void PeerProtocol_PeerNeighborsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PeerNeighborsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  return false;
#undef DO_
}

void PeerProtocol_PeerNeighborsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
}

::google::protobuf::uint8* PeerProtocol_PeerNeighborsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  return target;
}

size_t PeerProtocol_PeerNeighborsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PeerNeighborsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PeerNeighborsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PeerNeighborsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
    MergeFrom(*source);
  }
}

void PeerProtocol_PeerNeighborsRequest::MergeFrom(const PeerProtocol_PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PeerProtocol_PeerNeighborsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PeerNeighborsRequest::CopyFrom(const PeerProtocol_PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PeerNeighborsRequest::IsInitialized() const {
  return true;
}

void PeerProtocol_PeerNeighborsRequest::Swap(PeerProtocol_PeerNeighborsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PeerNeighborsRequest::InternalSwap(PeerProtocol_PeerNeighborsRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PeerNeighborsRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_PeerNeighborsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_PeerNeighborsResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_PeerNeighborsResponse::PeerProtocol_PeerNeighborsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerNeighborsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
}
PeerProtocol_PeerNeighborsResponse::PeerProtocol_PeerNeighborsResponse(const PeerProtocol_PeerNeighborsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
}

void PeerProtocol_PeerNeighborsResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_PeerNeighborsResponse::~PeerProtocol_PeerNeighborsResponse() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  SharedDtor();
}

void PeerProtocol_PeerNeighborsResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_PeerNeighborsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_PeerNeighborsResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_PeerNeighborsResponse& PeerProtocol_PeerNeighborsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_PeerNeighborsResponse.base);
  return *internal_default_instance();
}


void PeerProtocol_PeerNeighborsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_PeerNeighborsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  return false;
#undef DO_
}

void PeerProtocol_PeerNeighborsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
}

::google::protobuf::uint8* PeerProtocol_PeerNeighborsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 1;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  return target;
}

size_t PeerProtocol_PeerNeighborsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 1;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_PeerNeighborsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_PeerNeighborsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_PeerNeighborsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
    MergeFrom(*source);
  }
}

void PeerProtocol_PeerNeighborsResponse::MergeFrom(const PeerProtocol_PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PeerProtocol_PeerNeighborsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_PeerNeighborsResponse::CopyFrom(const PeerProtocol_PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_PeerNeighborsResponse::IsInitialized() const {
  return true;
}

void PeerProtocol_PeerNeighborsResponse::Swap(PeerProtocol_PeerNeighborsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_PeerNeighborsResponse::InternalSwap(PeerProtocol_PeerNeighborsResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_PeerNeighborsResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_ChallengeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_ChallengeRequest::kTypeFieldNumber;
const int PeerProtocol_ChallengeRequest::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_ChallengeRequest::PeerProtocol_ChallengeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_ChallengeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
}
PeerProtocol_ChallengeRequest::PeerProtocol_ChallengeRequest(const PeerProtocol_ChallengeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&type_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
}

void PeerProtocol_ChallengeRequest::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&type_)) + sizeof(nonce_));
}

PeerProtocol_ChallengeRequest::~PeerProtocol_ChallengeRequest() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  SharedDtor();
}

void PeerProtocol_ChallengeRequest::SharedDtor() {
}

void PeerProtocol_ChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_ChallengeRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_ChallengeRequest& PeerProtocol_ChallengeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_ChallengeRequest.base);
  return *internal_default_instance();
}


void PeerProtocol_ChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&type_)) + sizeof(nonce_));
  _internal_metadata_.Clear();
}

bool PeerProtocol_ChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  return false;
#undef DO_
}

void PeerProtocol_ChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 nonce = 3;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nonce(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
}

::google::protobuf::uint8* PeerProtocol_ChallengeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 nonce = 3;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nonce(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  return target;
}

size_t PeerProtocol_ChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 nonce = 3;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_ChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_ChallengeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_ChallengeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
    MergeFrom(*source);
  }
}

void PeerProtocol_ChallengeRequest::MergeFrom(const PeerProtocol_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
}

void PeerProtocol_ChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_ChallengeRequest::CopyFrom(const PeerProtocol_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_ChallengeRequest::IsInitialized() const {
  return true;
}

void PeerProtocol_ChallengeRequest::Swap(PeerProtocol_ChallengeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_ChallengeRequest::InternalSwap(PeerProtocol_ChallengeRequest* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(nonce_, other->nonce_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_ChallengeRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol_ChallengeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerProtocol_ChallengeResponse::kSignedNonceFieldNumber;
const int PeerProtocol_ChallengeResponse::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol_ChallengeResponse::PeerProtocol_ChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol_ChallengeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
}
PeerProtocol_ChallengeResponse::PeerProtocol_ChallengeResponse(const PeerProtocol_ChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signednonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signednonce().size() > 0) {
    signednonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signednonce_);
  }
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publickey().size() > 0) {
    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
}

void PeerProtocol_ChallengeResponse::SharedCtor() {
  signednonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerProtocol_ChallengeResponse::~PeerProtocol_ChallengeResponse() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  SharedDtor();
}

void PeerProtocol_ChallengeResponse::SharedDtor() {
  signednonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerProtocol_ChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol_ChallengeResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol_ChallengeResponse& PeerProtocol_ChallengeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol_ChallengeResponse.base);
  return *internal_default_instance();
}


void PeerProtocol_ChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signednonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerProtocol_ChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signedNonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signednonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signednonce().data(), static_cast<int>(this->signednonce().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string publicKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), static_cast<int>(this->publickey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  return false;
#undef DO_
}

void PeerProtocol_ChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signedNonce = 2;
  if (this->signednonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signednonce().data(), static_cast<int>(this->signednonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signednonce(), output);
  }

  // string publicKey = 3;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), static_cast<int>(this->publickey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->publickey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
}

::google::protobuf::uint8* PeerProtocol_ChallengeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signedNonce = 2;
  if (this->signednonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signednonce().data(), static_cast<int>(this->signednonce().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.signedNonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signednonce(), target);
  }

  // string publicKey = 3;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), static_cast<int>(this->publickey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Protocol.Peer.PeerProtocol.ChallengeResponse.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->publickey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  return target;
}

size_t PeerProtocol_ChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string signedNonce = 2;
  if (this->signednonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signednonce());
  }

  // string publicKey = 3;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol_ChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol_ChallengeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol_ChallengeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
    MergeFrom(*source);
  }
}

void PeerProtocol_ChallengeResponse::MergeFrom(const PeerProtocol_ChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signednonce().size() > 0) {

    signednonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signednonce_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void PeerProtocol_ChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol_ChallengeResponse::CopyFrom(const PeerProtocol_ChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol.ChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol_ChallengeResponse::IsInitialized() const {
  return true;
}

void PeerProtocol_ChallengeResponse::Swap(PeerProtocol_ChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol_ChallengeResponse::InternalSwap(PeerProtocol_ChallengeResponse* other) {
  using std::swap;
  signednonce_.Swap(&other->signednonce_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol_ChallengeResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerProtocol::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerProtocol::PeerProtocol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerProtocol.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Protocol.Peer.PeerProtocol)
}
PeerProtocol::PeerProtocol(const PeerProtocol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ADL.Protocol.Peer.PeerProtocol)
}

void PeerProtocol::SharedCtor() {
}

PeerProtocol::~PeerProtocol() {
  // @@protoc_insertion_point(destructor:ADL.Protocol.Peer.PeerProtocol)
  SharedDtor();
}

void PeerProtocol::SharedDtor() {
}

void PeerProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerProtocol::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerProtocol& PeerProtocol::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerProtocol.base);
  return *internal_default_instance();
}


void PeerProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Protocol.Peer.PeerProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool PeerProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Protocol.Peer.PeerProtocol)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Protocol.Peer.PeerProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Protocol.Peer.PeerProtocol)
  return false;
#undef DO_
}

void PeerProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Protocol.Peer.PeerProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Protocol.Peer.PeerProtocol)
}

::google::protobuf::uint8* PeerProtocol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Protocol.Peer.PeerProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Protocol.Peer.PeerProtocol)
  return target;
}

size_t PeerProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Protocol.Peer.PeerProtocol)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerProtocol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Protocol.Peer.PeerProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerProtocol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerProtocol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Protocol.Peer.PeerProtocol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Protocol.Peer.PeerProtocol)
    MergeFrom(*source);
  }
}

void PeerProtocol::MergeFrom(const PeerProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Protocol.Peer.PeerProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PeerProtocol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Protocol.Peer.PeerProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerProtocol::CopyFrom(const PeerProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Protocol.Peer.PeerProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerProtocol::IsInitialized() const {
  return true;
}

void PeerProtocol::Swap(PeerProtocol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerProtocol::InternalSwap(PeerProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerProtocol::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Peer
}  // namespace Protocol
}  // namespace ADL
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PingRequest* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PongResponse* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PongResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PongResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PeerInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PeerInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_PeerNeighborsResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_ChallengeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol_ChallengeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Protocol::Peer::PeerProtocol* Arena::CreateMaybeMessage< ::ADL::Protocol::Peer::PeerProtocol >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Protocol::Peer::PeerProtocol >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
