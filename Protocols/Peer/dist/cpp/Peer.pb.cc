// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Peer.proto

#include "Peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ADL {
namespace Peer {
namespace Protocol {
class PingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingRequest>
      _instance;
} _PingRequest_default_instance_;
class PongResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PongResponse>
      _instance;
} _PongResponse_default_instance_;
class PeerInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerInfoRequest>
      _instance;
} _PeerInfoRequest_default_instance_;
class PeerInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerInfoResponse>
      _instance;
} _PeerInfoResponse_default_instance_;
class PeerNeighborsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerNeighborsRequest>
      _instance;
} _PeerNeighborsRequest_default_instance_;
class PeerNeighborsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerNeighborsResponse>
      _instance;
} _PeerNeighborsResponse_default_instance_;
}  // namespace Protocol
}  // namespace Peer
}  // namespace ADL
namespace protobuf_Peer_2eproto {
static void InitDefaultsPingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PingRequest_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPingRequest}, {}};

static void InitDefaultsPongResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PongResponse_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PongResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PongResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PongResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPongResponse}, {}};

static void InitDefaultsPeerInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PeerInfoRequest_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PeerInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PeerInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerInfoRequest}, {}};

static void InitDefaultsPeerInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PeerInfoResponse_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PeerInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PeerInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerInfoResponse}, {}};

static void InitDefaultsPeerNeighborsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PeerNeighborsRequest_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PeerNeighborsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PeerNeighborsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerNeighborsRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerNeighborsRequest}, {}};

static void InitDefaultsPeerNeighborsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ADL::Peer::Protocol::_PeerNeighborsResponse_default_instance_;
    new (ptr) ::ADL::Peer::Protocol::PeerNeighborsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ADL::Peer::Protocol::PeerNeighborsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerNeighborsResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerNeighborsResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PongResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerInfoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerNeighborsRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerNeighborsResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PingRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PongResponse, pong_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerInfoRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerInfoResponse, pong_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerNeighborsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerNeighborsRequest, ping_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerNeighborsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ADL::Peer::Protocol::PeerNeighborsResponse, pong_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ADL::Peer::Protocol::PingRequest)},
  { 6, -1, sizeof(::ADL::Peer::Protocol::PongResponse)},
  { 12, -1, sizeof(::ADL::Peer::Protocol::PeerInfoRequest)},
  { 18, -1, sizeof(::ADL::Peer::Protocol::PeerInfoResponse)},
  { 24, -1, sizeof(::ADL::Peer::Protocol::PeerNeighborsRequest)},
  { 30, -1, sizeof(::ADL::Peer::Protocol::PeerNeighborsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PongResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PeerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PeerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PeerNeighborsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ADL::Peer::Protocol::_PeerNeighborsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Peer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nPeer.proto\022\021ADL.Peer.Protocol\"\033\n\013PingR"
      "equest\022\014\n\004ping\030\001 \001(\t\"\034\n\014PongResponse\022\014\n\004"
      "pong\030\002 \001(\t\"\037\n\017PeerInfoRequest\022\014\n\004ping\030\001 "
      "\001(\t\" \n\020PeerInfoResponse\022\014\n\004pong\030\002 \001(\t\"$\n"
      "\024PeerNeighborsRequest\022\014\n\004ping\030\001 \001(\t\"%\n\025P"
      "eerNeighborsResponse\022\014\n\004pong\030\002 \001(\t2\216\002\n\004P"
      "eer\022G\n\004Ping\022\036.ADL.Peer.Protocol.PingRequ"
      "est\032\037.ADL.Peer.Protocol.PongResponse\022V\n\013"
      "GetPeerInfo\022\".ADL.Peer.Protocol.PeerInfo"
      "Request\032#.ADL.Peer.Protocol.PeerInfoResp"
      "onse\022e\n\020GetPeerNeighbors\022\'.ADL.Peer.Prot"
      "ocol.PeerNeighborsRequest\032(.ADL.Peer.Pro"
      "tocol.PeerNeighborsResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 515);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Peer.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Peer_2eproto
namespace ADL {
namespace Peer {
namespace Protocol {

// ===================================================================

void PingRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PingRequest)
}

void PingRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingRequest& PingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PingRequest.base);
  return *internal_default_instance();
}


void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PingRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PingRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PingRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PingRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PongResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PongResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PongResponse::PongResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PongResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PongResponse)
}
PongResponse::PongResponse(const PongResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PongResponse)
}

void PongResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PongResponse::~PongResponse() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PongResponse)
  SharedDtor();
}

void PongResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PongResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PongResponse& PongResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PongResponse.base);
  return *internal_default_instance();
}


void PongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PongResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PongResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PongResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PongResponse)
  return false;
#undef DO_
}

void PongResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PongResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PongResponse)
}

::google::protobuf::uint8* PongResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PongResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PongResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PongResponse)
  return target;
}

size_t PongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PongResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 2;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PongResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PongResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PongResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PongResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PongResponse)
    MergeFrom(*source);
  }
}

void PongResponse::MergeFrom(const PongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PongResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongResponse::CopyFrom(const PongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongResponse::IsInitialized() const {
  return true;
}

void PongResponse::Swap(PongResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PongResponse::InternalSwap(PongResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PongResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfoRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfoRequest::PeerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PeerInfoRequest)
}
PeerInfoRequest::PeerInfoRequest(const PeerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PeerInfoRequest)
}

void PeerInfoRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerInfoRequest::~PeerInfoRequest() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PeerInfoRequest)
  SharedDtor();
}

void PeerInfoRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerInfoRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerInfoRequest& PeerInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerInfoRequest.base);
  return *internal_default_instance();
}


void PeerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PeerInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PeerInfoRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PeerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PeerInfoRequest)
  return false;
#undef DO_
}

void PeerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerInfoRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PeerInfoRequest)
}

::google::protobuf::uint8* PeerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PeerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerInfoRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PeerInfoRequest)
  return target;
}

size_t PeerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PeerInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PeerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PeerInfoRequest)
    MergeFrom(*source);
  }
}

void PeerInfoRequest::MergeFrom(const PeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PeerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PeerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfoRequest::CopyFrom(const PeerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PeerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfoRequest::IsInitialized() const {
  return true;
}

void PeerInfoRequest::Swap(PeerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfoRequest::InternalSwap(PeerInfoRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerInfoRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerInfoResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerInfoResponse::PeerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PeerInfoResponse)
}
PeerInfoResponse::PeerInfoResponse(const PeerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PeerInfoResponse)
}

void PeerInfoResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerInfoResponse::~PeerInfoResponse() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PeerInfoResponse)
  SharedDtor();
}

void PeerInfoResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerInfoResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerInfoResponse& PeerInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerInfoResponse.base);
  return *internal_default_instance();
}


void PeerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PeerInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PeerInfoResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PeerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PeerInfoResponse)
  return false;
#undef DO_
}

void PeerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerInfoResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PeerInfoResponse)
}

::google::protobuf::uint8* PeerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PeerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerInfoResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PeerInfoResponse)
  return target;
}

size_t PeerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PeerInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 2;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PeerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PeerInfoResponse)
    MergeFrom(*source);
  }
}

void PeerInfoResponse::MergeFrom(const PeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PeerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PeerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerInfoResponse::CopyFrom(const PeerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PeerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerInfoResponse::IsInitialized() const {
  return true;
}

void PeerInfoResponse::Swap(PeerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerInfoResponse::InternalSwap(PeerInfoResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerInfoResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerNeighborsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerNeighborsRequest::kPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerNeighborsRequest::PeerNeighborsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerNeighborsRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PeerNeighborsRequest)
}
PeerNeighborsRequest::PeerNeighborsRequest(const PeerNeighborsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ping().size() > 0) {
    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PeerNeighborsRequest)
}

void PeerNeighborsRequest::SharedCtor() {
  ping_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerNeighborsRequest::~PeerNeighborsRequest() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PeerNeighborsRequest)
  SharedDtor();
}

void PeerNeighborsRequest::SharedDtor() {
  ping_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerNeighborsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerNeighborsRequest::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerNeighborsRequest& PeerNeighborsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerNeighborsRequest.base);
  return *internal_default_instance();
}


void PeerNeighborsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ping_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerNeighborsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ping()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ping().data(), static_cast<int>(this->ping().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PeerNeighborsRequest.ping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PeerNeighborsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PeerNeighborsRequest)
  return false;
#undef DO_
}

void PeerNeighborsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerNeighborsRequest.ping");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ping(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PeerNeighborsRequest)
}

::google::protobuf::uint8* PeerNeighborsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ping = 1;
  if (this->ping().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ping().data(), static_cast<int>(this->ping().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerNeighborsRequest.ping");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ping(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PeerNeighborsRequest)
  return target;
}

size_t PeerNeighborsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ping = 1;
  if (this->ping().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ping());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerNeighborsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerNeighborsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerNeighborsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PeerNeighborsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PeerNeighborsRequest)
    MergeFrom(*source);
  }
}

void PeerNeighborsRequest::MergeFrom(const PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ping().size() > 0) {

    ping_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ping_);
  }
}

void PeerNeighborsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerNeighborsRequest::CopyFrom(const PeerNeighborsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PeerNeighborsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerNeighborsRequest::IsInitialized() const {
  return true;
}

void PeerNeighborsRequest::Swap(PeerNeighborsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerNeighborsRequest::InternalSwap(PeerNeighborsRequest* other) {
  using std::swap;
  ping_.Swap(&other->ping_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerNeighborsRequest::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerNeighborsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerNeighborsResponse::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerNeighborsResponse::PeerNeighborsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Peer_2eproto::scc_info_PeerNeighborsResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADL.Peer.Protocol.PeerNeighborsResponse)
}
PeerNeighborsResponse::PeerNeighborsResponse(const PeerNeighborsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pong().size() > 0) {
    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
  // @@protoc_insertion_point(copy_constructor:ADL.Peer.Protocol.PeerNeighborsResponse)
}

void PeerNeighborsResponse::SharedCtor() {
  pong_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerNeighborsResponse::~PeerNeighborsResponse() {
  // @@protoc_insertion_point(destructor:ADL.Peer.Protocol.PeerNeighborsResponse)
  SharedDtor();
}

void PeerNeighborsResponse::SharedDtor() {
  pong_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerNeighborsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerNeighborsResponse::descriptor() {
  ::protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerNeighborsResponse& PeerNeighborsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Peer_2eproto::scc_info_PeerNeighborsResponse.base);
  return *internal_default_instance();
}


void PeerNeighborsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pong_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PeerNeighborsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pong = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pong()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pong().data(), static_cast<int>(this->pong().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ADL.Peer.Protocol.PeerNeighborsResponse.pong"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADL.Peer.Protocol.PeerNeighborsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADL.Peer.Protocol.PeerNeighborsResponse)
  return false;
#undef DO_
}

void PeerNeighborsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerNeighborsResponse.pong");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pong(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ADL.Peer.Protocol.PeerNeighborsResponse)
}

::google::protobuf::uint8* PeerNeighborsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pong = 2;
  if (this->pong().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pong().data(), static_cast<int>(this->pong().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ADL.Peer.Protocol.PeerNeighborsResponse.pong");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pong(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADL.Peer.Protocol.PeerNeighborsResponse)
  return target;
}

size_t PeerNeighborsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pong = 2;
  if (this->pong().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pong());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerNeighborsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerNeighborsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerNeighborsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ADL.Peer.Protocol.PeerNeighborsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ADL.Peer.Protocol.PeerNeighborsResponse)
    MergeFrom(*source);
  }
}

void PeerNeighborsResponse::MergeFrom(const PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pong().size() > 0) {

    pong_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pong_);
  }
}

void PeerNeighborsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerNeighborsResponse::CopyFrom(const PeerNeighborsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ADL.Peer.Protocol.PeerNeighborsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerNeighborsResponse::IsInitialized() const {
  return true;
}

void PeerNeighborsResponse::Swap(PeerNeighborsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerNeighborsResponse::InternalSwap(PeerNeighborsResponse* other) {
  using std::swap;
  pong_.Swap(&other->pong_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerNeighborsResponse::GetMetadata() const {
  protobuf_Peer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Peer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
}  // namespace Peer
}  // namespace ADL
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PingRequest* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PongResponse* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PongResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PongResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PeerInfoRequest* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PeerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PeerInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PeerInfoResponse* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PeerInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PeerInfoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PeerNeighborsRequest* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PeerNeighborsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PeerNeighborsRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ADL::Peer::Protocol::PeerNeighborsResponse* Arena::CreateMaybeMessage< ::ADL::Peer::Protocol::PeerNeighborsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ADL::Peer::Protocol::PeerNeighborsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
