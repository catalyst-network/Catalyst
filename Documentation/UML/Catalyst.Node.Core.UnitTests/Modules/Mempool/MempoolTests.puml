@startuml
class MempoolTests {
    + MempoolTests()
    - {static} AddKeyValueStoreEntryExpectation(transaction:Transaction, store:IRepository<Transaction, TransactionSignature>) : void
    + Get_should_retrieve_a_saved_transaction() : void
    + Get_should_retrieve_saved_transaction_matching_their_keys() : void
    + GetNonExistentKey() : void
    + KeyAlreadyExists() : void
    + MultipleThreadsSameKey() : void
    + SaveNullKey() : void
    + SaveNullTx() : void
}
class "IRepository`2"<T1,T2> {
}
class ProducerConsumer <<sealed>> {
    - {static} <<readonly>> Locker : object
    + ProducerConsumer(memPool:IMempool, keyValueStore:IRepository<Transaction, TransactionSignature>)
    + Writer() : void
}
MempoolTests --> "_transactionStore<Transaction,TransactionSignature>" "IRepository`2"
MempoolTests --> "_transaction" Transaction
MempoolTests +-- ProducerConsumer
ProducerConsumer --> "_keyValueStore<Transaction,TransactionSignature>" "IRepository`2"
ProducerConsumer --> "_memPool" IMempool
@enduml
