@startuml
class MempoolTests {
    + MempoolTests()
    - {static} AddKeyValueStoreEntryExpectation(key:Key, tx:StTx, keyValueStore:IRepository<StTxModel, Key>) : void
    + Get_should_retrieve_a_saved_transaction() : void
    + Get_should_retrieve_saved_transaction_matching_their_keys() : void
    + GetNonExistentKey() : void
    + KeyAlreadyExists() : void
    + MultipleThreadsSameKey() : void
    + SaveNullKey() : void
    + SaveNullTx() : void
}
class "IRepository`2"<T1,T2> {
}
class ProducerConsumer {
    - {static} <<readonly>> Locker : object
    + ProducerConsumer(memPool:IMempool, key:Key, keyValueStore:IRepository<StTxModel, Key>)
    + Writer() : void
}
MempoolTests --> "_keyValueStore<StTxModel,Key>" "IRepository`2"
MempoolTests --> "_key" Key
MempoolTests --> "_transaction" StTx
MempoolTests --> "_logger" ILogger
MempoolTests +-- ProducerConsumer
ProducerConsumer --> "_key" Key
ProducerConsumer --> "_keyValueStore<StTxModel,Key>" "IRepository`2"
ProducerConsumer --> "_memPool" IMempool
@enduml
